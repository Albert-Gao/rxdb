{"version":3,"sources":["../../../src/plugins/attachments.ts"],"names":["ensureSchemaSupportsAttachments","doc","schemaJson","collection","schema","jsonSchema","attachments","link","postMigrateDocument","_action","preMigrateDocument","data","docData","_attachments","newAttachments","Promise","all","Object","keys","map","attachmentId","attachment","docPrimary","oldCollection","primaryPath","storageInstance","getAttachmentData","rawAttachmentData","hookInput","database","type","plainData","digest","length","putAttachment","attachmentData","skipIfSame","dataSize","blobBufferUtil","size","storageStatics","storage","statics","toBase64String","dataString","hookAttachmentData","id","then","hash","hashKey","newDigest","_atomicQueue","_data","currentMeta","getAttachment","docWriteData","writeRow","previous","document","writeResult","fromStorageInstanceResult","newData","_rev","_dataSync$","next","_assignMethodsToAttachment","entries","forEach","funName","fun","defineProperty","get","bind","RxAttachment","remove","getData","primary","plainDataBase64","createBlobBufferFromBase64","getStringData","toString","rxDocument","getValue","allAttachments","RxDBAttachmentsPlugin","name","rxdb","prototypes","RxDocument","proto","allAttachments$","pipe","attachmentsData","overwritable","hooks","after"],"mappings":"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","sourcesContent":["import {\n    map\n} from 'rxjs/operators';\n\nimport {\n    blobBufferUtil,\n    flatClone\n} from './../util';\nimport {\n    newRxError\n} from '../rx-error';\nimport type {\n    RxDocument,\n    RxPlugin,\n    BlobBuffer,\n    OldRxCollection,\n    RxDocumentWriteData,\n    RxAttachmentData,\n    RxDocumentData,\n    RxAttachmentCreator,\n    RxAttachmentWriteData\n} from '../types';\nimport { hashAttachmentData, writeSingle } from '../rx-storage-helper';\nimport { runAsyncPluginHooks } from '../hooks';\n\nfunction ensureSchemaSupportsAttachments(doc: any) {\n    const schemaJson = doc.collection.schema.jsonSchema;\n    if (!schemaJson.attachments) {\n        throw newRxError('AT1', {\n            link: 'https://pubkey.github.io/rxdb/rx-attachment.html'\n        });\n    }\n}\n\nconst _assignMethodsToAttachment = function (attachment: any) {\n    Object\n        .entries(attachment.doc.collection.attachments)\n        .forEach(([funName, fun]) => {\n            Object.defineProperty(attachment, funName, {\n                get: () => (fun as any).bind(attachment)\n            });\n        });\n};\n\n/**\n * an RxAttachment is basically just the attachment-stub\n * wrapped so that you can access the attachment-data\n */\nexport class RxAttachment {\n    public doc: RxDocument;\n    public id: string;\n    public type: string;\n    public length: number;\n    public digest: string;\n    constructor({\n        doc,\n        id,\n        type,\n        length,\n        digest\n    }: any) {\n        this.doc = doc;\n        this.id = id;\n        this.type = type;\n        this.length = length;\n        this.digest = digest;\n\n        _assignMethodsToAttachment(this);\n    }\n\n    async remove(): Promise<void> {\n        this.doc._atomicQueue = this.doc._atomicQueue\n            .then(async () => {\n                const docWriteData: RxDocumentWriteData<{}> = flatClone(this.doc._data);\n                docWriteData._attachments = flatClone(docWriteData._attachments);\n                delete docWriteData._attachments[this.id];\n\n                const writeResult: RxDocumentData<any> = await writeSingle(\n                    this.doc.collection.storageInstance,\n                    {\n                        previous: flatClone(this.doc._data),\n                        document: docWriteData\n                    }\n                );\n\n                const newData = flatClone(this.doc._data);\n                newData._rev = writeResult._rev;\n                newData._attachments = writeResult._attachments;\n                this.doc._dataSync$.next(newData);\n\n            });\n        return this.doc._atomicQueue;\n    }\n\n    /**\n     * returns the data for the attachment\n     */\n    async getData(): Promise<BlobBuffer> {\n        const plainDataBase64 = await this.doc.collection.storageInstance.getAttachmentData(\n            this.doc.primary,\n            this.id\n        );\n        const hookInput = {\n            database: this.doc.collection.database,\n            schema: this.doc.collection.schema.jsonSchema,\n            type: this.type,\n            plainData: plainDataBase64\n        };\n        await runAsyncPluginHooks('postReadAttachment', hookInput);\n        const ret = await blobBufferUtil.createBlobBufferFromBase64(\n            hookInput.plainData,\n            this.type as any\n        );\n        return ret;\n    }\n\n    async getStringData(): Promise<string> {\n        const data = await this.getData();\n        const asString = await blobBufferUtil.toString(data);\n        return asString;\n    }\n}\n\nexport function fromStorageInstanceResult(\n    id: string,\n    attachmentData: RxAttachmentData,\n    rxDocument: RxDocument\n) {\n    return new RxAttachment({\n        doc: rxDocument,\n        id,\n        type: attachmentData.type,\n        length: attachmentData.length,\n        digest: attachmentData.digest\n    });\n}\n\nexport async function putAttachment(\n    this: RxDocument,\n    attachmentData: RxAttachmentCreator,\n    /**\n     * If set to true, the write will be skipped\n     * when the attachment already contains the same data.\n     */\n    skipIfSame: boolean = true\n): Promise<RxAttachment> {\n    ensureSchemaSupportsAttachments(this);\n\n\n    const dataSize = blobBufferUtil.size(attachmentData.data);\n    const storageStatics = this.collection.database.storage.statics;\n    const dataString = await blobBufferUtil.toBase64String(attachmentData.data);\n\n    const hookAttachmentData = {\n        id: attachmentData.id,\n        type: attachmentData.type,\n        data: dataString\n    };\n    await runAsyncPluginHooks('preWriteAttachment', {\n        database: this.collection.database,\n        schema: this.collection.schema.jsonSchema,\n        attachmentData: hookAttachmentData\n    });\n\n    const {\n        id, data, type\n    } = hookAttachmentData;\n\n    const newDigest = await hashAttachmentData(\n        dataString,\n        storageStatics\n    ).then(hash => storageStatics.hashKey + '-' + hash);\n\n    this._atomicQueue = this._atomicQueue\n        .then(async () => {\n            if (skipIfSame && this._data._attachments && this._data._attachments[id]) {\n                const currentMeta = this._data._attachments[id];\n                if (currentMeta.type === type && currentMeta.digest === newDigest) {\n                    // skip because same data and same type\n                    return this.getAttachment(id);\n                }\n            }\n\n            const docWriteData: RxDocumentWriteData<{}> = flatClone(this._data);\n            docWriteData._attachments = flatClone(docWriteData._attachments);\n\n            docWriteData._attachments[id] = {\n                digest: newDigest,\n                length: dataSize,\n                type,\n                data\n            };\n\n            const writeRow = {\n                previous: flatClone(this._data),\n                document: flatClone(docWriteData)\n            };\n\n            const writeResult = await writeSingle(\n                this.collection.storageInstance,\n                writeRow\n            );\n\n            const attachmentData = writeResult._attachments[id];\n            const attachment = fromStorageInstanceResult(\n                id,\n                attachmentData,\n                this\n            );\n\n            const newData = flatClone(this._data);\n            newData._rev = writeResult._rev;\n            newData._attachments = writeResult._attachments;\n            this._dataSync$.next(newData);\n\n            return attachment;\n        });\n    return this._atomicQueue;\n}\n\n/**\n * get an attachment of the document by its id\n */\nexport function getAttachment(\n    this: RxDocument,\n    id: string\n): RxAttachment | null {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._dataSync$.getValue();\n    if (!docData._attachments || !docData._attachments[id])\n        return null;\n\n    const attachmentData = docData._attachments[id];\n    const attachment = fromStorageInstanceResult(\n        id,\n        attachmentData,\n        this\n    );\n    return attachment;\n}\n\n/**\n * returns all attachments of the document\n */\nexport function allAttachments(\n    this: RxDocument\n): RxAttachment[] {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._dataSync$.getValue();\n\n    // if there are no attachments, the field is missing\n    if (!docData._attachments) {\n        return [];\n    }\n    return Object.keys(docData._attachments)\n        .map(id => {\n            return fromStorageInstanceResult(\n                id,\n                docData._attachments[id],\n                this\n            );\n        });\n}\n\nexport async function preMigrateDocument<RxDocType>(\n    data: {\n        docData: RxDocumentData<RxDocType>;\n        oldCollection: OldRxCollection\n    }\n): Promise<void> {\n    const attachments = data.docData._attachments;\n    if (attachments) {\n        const newAttachments: { [attachmentId: string]: RxAttachmentWriteData } = {};\n        await Promise.all(\n            Object.keys(attachments).map(async (attachmentId) => {\n                const attachment: RxAttachmentData = attachments[attachmentId];\n                const docPrimary: string = (data.docData as any)[data.oldCollection.schema.primaryPath];\n\n                let rawAttachmentData = await data.oldCollection.storageInstance.getAttachmentData(docPrimary, attachmentId);\n\n                const hookInput = {\n                    database: data.oldCollection.database,\n                    schema: data.oldCollection.schema.jsonSchema,\n                    type: attachment.type,\n                    plainData: rawAttachmentData\n                };\n                await runAsyncPluginHooks('postReadAttachment', hookInput);\n                rawAttachmentData = hookInput.plainData;\n\n                newAttachments[attachmentId] = {\n                    digest: attachment.digest,\n                    length: attachment.length,\n                    type: attachment.type,\n                    data: rawAttachmentData\n                };\n            })\n        );\n\n        /**\n         * Hooks mutate the input\n         * instead of returning stuff\n         */\n        (data.docData as RxDocumentWriteData<RxDocType>)._attachments = newAttachments;\n    }\n}\n\nexport async function postMigrateDocument(_action: any): Promise<void> {\n    /**\n     * No longer needed because\n     * we store the attachemnts data buffers directly in the document.\n     */\n    return;\n}\n\nexport const RxDBAttachmentsPlugin: RxPlugin = {\n    name: 'attachments',\n    rxdb: true,\n    prototypes: {\n        RxDocument: (proto: any) => {\n            proto.putAttachment = putAttachment;\n            proto.getAttachment = getAttachment;\n            proto.allAttachments = allAttachments;\n            Object.defineProperty(proto, 'allAttachments$', {\n                get: function allAttachments$() {\n                    return this._dataSync$\n                        .pipe(\n                            map((data: any) => {\n                                if (!data['_attachments']) {\n                                    return {};\n                                }\n                                return data['_attachments'];\n                            }),\n                            map((attachmentsData: any) => Object.entries(\n                                attachmentsData\n                            )),\n                            map(entries => {\n                                return (entries as any)\n                                    .map(([id, attachmentData]: any) => {\n                                        return fromStorageInstanceResult(\n                                            id,\n                                            attachmentData,\n                                            this\n                                        );\n                                    });\n                            })\n                        );\n                }\n            });\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preMigrateDocument: {\n            after: preMigrateDocument\n        },\n        postMigrateDocument: {\n            after: postMigrateDocument\n        }\n    }\n};\n"],"file":"attachments.js"}