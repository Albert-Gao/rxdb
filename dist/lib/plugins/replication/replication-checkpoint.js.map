{"version":3,"sources":["../../../../src/plugins/replication/replication-checkpoint.ts"],"names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","setLastPullDocument","collection","replicationIdentifierHash","lastPulledDoc","pullCheckpointId","pullLastDocumentKey","INTERNAL_CONTEXT_REPLICATION_PRIMITIVES","database","internalStore","lastPullCheckpointDoc","insertData","id","key","context","data","_meta","lwt","_rev","_deleted","_attachments","document","newDoc","previous","getChangesSinceLastPushCheckpoint","isStopped","batchSize","primaryPath","schema","getLastPushCheckpoint","lastPushCheckpoint","changedDocIds","changedDocs","checkpoint","lastCheckpoint","retry","Map","Set","storageInstance","getChangedDocumentsSince","changesResults","length","forEach","row","docData","docId","has","add","set","doc","size","setLastPushCheckpoint","pushSequenceDocumentKey","undefined","getLastPullDocument","lastPullCheckpoint"],"mappings":"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","sourcesContent":["import type {\n    RxCollection,\n    RxDocumentData,\n    InternalStoreReplicationPullDocType,\n    InternalStoreReplicationPushDocType,\n    DeepReadonlyObject\n} from '../../types';\nimport {\n    getSingleDocument,\n    writeSingle\n} from '../../rx-storage-helper';\nimport {\n    createRevision,\n    flatClone,\n    getDefaultRevision,\n    lastOfArray,\n    now\n} from '../../util';\nimport { wasLastWriteFromPullReplication } from './revision-flag';\nimport {\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_REPLICATION_PRIMITIVES\n} from '../../rx-database-internal-store';\n\n//\n// things for the push-checkpoint\n//\n\nconst pushSequenceDocumentKey = (replicationIdentifierHash: string) => 'replication-checkpoint-push-' + replicationIdentifierHash;\nconst pullLastDocumentKey = (replicationIdentifierHash: string) => 'replication-checkpoint-pull-' + replicationIdentifierHash;\n\n/**\n * Get the last push checkpoint\n */\nexport function getLastPushCheckpoint(\n    collection: RxCollection,\n    replicationIdentifierHash: string\n): Promise<any | undefined> {\n    return getSingleDocument<InternalStoreReplicationPushDocType>(\n        collection.database.internalStore,\n        getPrimaryKeyOfInternalDocument(\n            pushSequenceDocumentKey(replicationIdentifierHash),\n            INTERNAL_CONTEXT_REPLICATION_PRIMITIVES\n        )\n    ).then(doc => {\n        if (!doc) {\n            return undefined;\n        } else {\n            return doc.data.checkpoint;\n        }\n    });\n}\n\nexport async function setLastPushCheckpoint(\n    collection: RxCollection,\n    replicationIdentifierHash: string,\n    checkpoint: any\n): Promise<RxDocumentData<InternalStoreReplicationPushDocType>> {\n    const docId = getPrimaryKeyOfInternalDocument(\n        pushSequenceDocumentKey(replicationIdentifierHash),\n        INTERNAL_CONTEXT_REPLICATION_PRIMITIVES\n    );\n\n    const doc = await getSingleDocument<InternalStoreReplicationPushDocType>(\n        collection.database.internalStore,\n        docId\n    );\n    if (!doc) {\n        const insertData = {\n            id: docId,\n            key: pushSequenceDocumentKey(replicationIdentifierHash),\n            context: INTERNAL_CONTEXT_REPLICATION_PRIMITIVES,\n            data: {\n                checkpoint\n            },\n            _deleted: false,\n            _meta: {\n                lwt: now()\n            },\n            _rev: getDefaultRevision(),\n            _attachments: {}\n        };\n        insertData._rev = createRevision(insertData);\n        const res = await writeSingle(\n            collection.database.internalStore,\n            {\n                document: insertData\n            }\n        );\n        return res;\n    } else {\n        const docData = {\n            id: docId,\n            key: pushSequenceDocumentKey(replicationIdentifierHash),\n            context: INTERNAL_CONTEXT_REPLICATION_PRIMITIVES,\n            data: {\n                checkpoint\n            },\n            _meta: {\n                lwt: now()\n            },\n            _rev: getDefaultRevision(),\n            _deleted: false,\n            _attachments: {}\n        };\n        docData._rev = createRevision(docData, doc);\n        const res = await writeSingle<InternalStoreReplicationPushDocType>(\n            collection.database.internalStore,\n            {\n                previous: doc,\n                document: docData\n            }\n        );\n        return res;\n    }\n}\n\nexport async function getChangesSinceLastPushCheckpoint<RxDocType>(\n    collection: RxCollection<RxDocType, any>,\n    replicationIdentifierHash: string,\n    /**\n     * A function that returns true\n     * when the underlaying RxReplication is stopped.\n     * So that we do not run requests against a close RxStorageInstance.\n     */\n    isStopped: () => boolean,\n    batchSize = 10\n): Promise<{\n    // for better performance we also store the ids of the changed docs.\n    changedDocIds: Set<string>,\n    changedDocs: Map<string, {\n        id: string;\n        doc: RxDocumentData<RxDocType>;\n    }>;\n    checkpoint: any;\n}> {\n    const primaryPath = collection.schema.primaryPath;\n    let lastPushCheckpoint = await getLastPushCheckpoint(\n        collection,\n        replicationIdentifierHash\n    );\n    let retry = true;\n    let lastCheckpoint: any = lastPushCheckpoint;\n    const changedDocs: Map<string, {\n        id: string;\n        doc: RxDocumentData<RxDocType>;\n    }> = new Map();\n    const changedDocIds: Set<string> = new Set();\n\n    /**\n     * it can happen that all docs in the batch\n     * do not have to be replicated.\n     * Then we have to continue grapping the feed\n     * until we reach the end of it\n     */\n    while (retry && !isStopped()) {\n        const changesResults = await collection.storageInstance.getChangedDocumentsSince(\n            batchSize,\n            lastPushCheckpoint\n        );\n\n        if (changesResults.length > 0) {\n            lastCheckpoint = lastOfArray(changesResults).checkpoint;\n        }\n\n        // optimisation shortcut, do not proceed if there are no changed documents\n        if (changesResults.length === 0) {\n            retry = false;\n            continue;\n        }\n\n\n        if (isStopped()) {\n            break;\n        }\n\n\n        changesResults.forEach(row => {\n            const docData = row.document;\n            const docId: string = docData[primaryPath] as any;\n            if (changedDocs.has(docId)) {\n                return;\n            }\n\n            /**\n             * filter out changes with revisions resulting from the pull-stream\n             * so that they will not be upstreamed again\n             */\n            if (\n                wasLastWriteFromPullReplication(\n                    replicationIdentifierHash,\n                    docData\n                )\n            ) {\n                return false;\n            }\n            changedDocIds.add(docId);\n            changedDocs.set(docId, {\n                id: docId,\n                doc: docData\n            });\n        });\n\n        if (\n            changedDocs.size < batchSize &&\n            changesResults.length === batchSize\n        ) {\n            // no pushable docs found but also not reached the end -> re-run\n            lastPushCheckpoint = lastCheckpoint;\n            retry = true;\n        } else {\n            retry = false;\n        }\n    }\n    return {\n        changedDocIds,\n        changedDocs,\n        checkpoint: lastCheckpoint\n    };\n}\n\n\n\n//\n// things for pull-checkpoint\n//\n\nexport function getLastPullDocument<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    replicationIdentifierHash: string,\n): Promise<RxDocumentData<RxDocType> | null> {\n\n    return getSingleDocument<InternalStoreReplicationPullDocType<RxDocType>>(\n        collection.database.internalStore,\n        getPrimaryKeyOfInternalDocument(\n            pullLastDocumentKey(replicationIdentifierHash),\n            INTERNAL_CONTEXT_REPLICATION_PRIMITIVES\n        )\n    ).then(lastPullCheckpoint => {\n        if (!lastPullCheckpoint) {\n            return null;\n        } else {\n            return lastPullCheckpoint.data.lastPulledDoc;\n        }\n    });\n}\n\nexport async function setLastPullDocument<RxDocType>(\n    collection: RxCollection,\n    replicationIdentifierHash: string,\n    lastPulledDoc: RxDocumentData<RxDocType> | DeepReadonlyObject<RxDocumentData<RxDocType>>\n): Promise<RxDocumentData<InternalStoreReplicationPullDocType<RxDocType>>> {\n    const pullCheckpointId = getPrimaryKeyOfInternalDocument(\n        pullLastDocumentKey(replicationIdentifierHash),\n        INTERNAL_CONTEXT_REPLICATION_PRIMITIVES\n    );\n\n    const lastPullCheckpointDoc = await getSingleDocument<InternalStoreReplicationPullDocType<RxDocType>>(\n        collection.database.internalStore,\n        pullCheckpointId\n    );\n\n    if (!lastPullCheckpointDoc) {\n        const insertData = {\n            id: pullCheckpointId,\n            key: pullLastDocumentKey(replicationIdentifierHash),\n            context: INTERNAL_CONTEXT_REPLICATION_PRIMITIVES,\n            data: {\n                lastPulledDoc: lastPulledDoc as any\n            },\n            _meta: {\n                lwt: now()\n            },\n            _rev: getDefaultRevision(),\n            _deleted: false,\n            _attachments: {}\n        };\n        insertData._rev = createRevision(insertData);\n        return writeSingle<InternalStoreReplicationPullDocType<RxDocType>>(\n            collection.database.internalStore,\n            {\n                document: insertData\n            }\n        );\n    } else {\n        const newDoc = flatClone(lastPullCheckpointDoc);\n        newDoc.data = { lastPulledDoc: lastPulledDoc as any };\n        newDoc._rev = createRevision(newDoc, lastPullCheckpointDoc);\n        newDoc._meta = { lwt: now() };\n        return writeSingle<InternalStoreReplicationPullDocType<RxDocType>>(\n            collection.database.internalStore,\n            {\n                previous: lastPullCheckpointDoc,\n                document: newDoc\n            }\n        );\n    }\n}\n"],"file":"replication-checkpoint.js"}