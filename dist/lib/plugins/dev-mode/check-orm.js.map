{"version":3,"sources":["../../../../src/plugins/dev-mode/check-orm.ts"],"names":["checkOrmMethods","statics","Object","entries","forEach","k","v","name","startsWith","type","includes","checkOrmDocumentMethods","schema","methods","topLevelFields","keys","properties","filter","funName"],"mappings":";;;;;;;;AAAA;;AAKA;;AAEA;AACA;AACA;AACA;AACO,SAASA,eAAT,CAAyBC,OAAzB,EAAmD;AACtD,MAAI,CAACA,OAAL,EAAc;AACV;AACH;;AACDC,EAAAA,MAAM,CACDC,OADL,CACaF,OADb,EAEKG,OAFL,CAEa,gBAAY;AAAA,QAAVC,CAAU;AAAA,QAAPC,CAAO;;AACjB,QAAI,OAAOD,CAAP,KAAa,QAAjB,EAA2B;AACvB,YAAM,6BAAe,OAAf,EAAwB;AAC1BE,QAAAA,IAAI,EAAEF;AADoB,OAAxB,CAAN;AAGH;;AAED,QAAIA,CAAC,CAACG,UAAF,CAAa,GAAb,CAAJ,EAAuB;AACnB,YAAM,6BAAe,OAAf,EAAwB;AAC1BD,QAAAA,IAAI,EAAEF;AADoB,OAAxB,CAAN;AAGH;;AAED,QAAI,OAAOC,CAAP,KAAa,UAAjB,EAA6B;AACzB,YAAM,6BAAe,OAAf,EAAwB;AAC1BC,QAAAA,IAAI,EAAEF,CADoB;AAE1BI,QAAAA,IAAI,EAAE,OAAOJ;AAFa,OAAxB,CAAN;AAIH;;AAED,QACI,gDAAyBK,QAAzB,CAAkCL,CAAlC,KACA,8CAAuBK,QAAvB,CAAgCL,CAAhC,CAFJ,EAGE;AACE,YAAM,yBAAW,OAAX,EAAoB;AACtBE,QAAAA,IAAI,EAAEF;AADgB,OAApB,CAAN;AAGH;AACJ,GA9BL;AA+BH;;AAGM,SAASM,uBAAT,CACHC,MADG,EAEHC,OAFG,EAGL;AACE,MAAMC,cAAc,GAAGZ,MAAM,CAACa,IAAP,CAAYH,MAAM,CAACI,UAAnB,CAAvB;;AACA,MAAI,CAACH,OAAL,EAAc;AACV;AACH;;AACDX,EAAAA,MAAM,CAACa,IAAP,CAAYF,OAAZ,EACKI,MADL,CACY,UAAAC,OAAO;AAAA,WAAIJ,cAAc,CAACJ,QAAf,CAAwBQ,OAAxB,CAAJ;AAAA,GADnB,EAEKd,OAFL,CAEa,UAAAc,OAAO,EAAI;AAChB,UAAM,yBAAW,OAAX,EAAoB;AACtBA,MAAAA,OAAO,EAAPA;AADsB,KAApB,CAAN;AAGH,GANL;AAOH","sourcesContent":["import {\n    newRxError,\n    newRxTypeError\n} from '../../rx-error';\nimport type { KeyFunctionMap, RxJsonSchema } from '../../types';\nimport { rxCollectionProperties, rxDocumentProperties } from './entity-properties';\n\n/**\n * checks if the given static methods are allowed\n * @throws if not allowed\n */\nexport function checkOrmMethods(statics?: KeyFunctionMap) {\n    if (!statics) {\n        return;\n    }\n    Object\n        .entries(statics)\n        .forEach(([k, v]) => {\n            if (typeof k !== 'string') {\n                throw newRxTypeError('COL14', {\n                    name: k\n                });\n            }\n\n            if (k.startsWith('_')) {\n                throw newRxTypeError('COL15', {\n                    name: k\n                });\n            }\n\n            if (typeof v !== 'function') {\n                throw newRxTypeError('COL16', {\n                    name: k,\n                    type: typeof k\n                });\n            }\n\n            if (\n                rxCollectionProperties().includes(k) ||\n                rxDocumentProperties().includes(k)\n            ) {\n                throw newRxError('COL17', {\n                    name: k\n                });\n            }\n        });\n}\n\n\nexport function checkOrmDocumentMethods<RxDocType>(\n    schema: RxJsonSchema<RxDocType>,\n    methods?: any,\n) {\n    const topLevelFields = Object.keys(schema.properties) as (keyof RxDocType)[];\n    if (!methods) {\n        return;\n    }\n    Object.keys(methods)\n        .filter(funName => topLevelFields.includes(funName as any))\n        .forEach(funName => {\n            throw newRxError('COL18', {\n                funName\n            });\n        });\n}\n"],"file":"check-orm.js"}