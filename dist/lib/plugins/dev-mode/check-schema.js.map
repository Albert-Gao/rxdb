{"version":3,"sources":["../../../../src/plugins/dev-mode/check-schema.ts"],"names":["checkFieldNameRegex","fieldName","includes","regexStr","regex","RegExp","match","validateFieldsDeep","rxJsonSchema","primaryPath","primaryKey","checkField","schemaObj","path","Array","isArray","hasOwnProperty","type","required","length","items","isNested","split","primary","charAt","traverse","currentObj","currentPath","Object","keys","forEach","attributeName","properties","nextPath","checkPrimaryKey","jsonSchema","schema","validatePrimarySchemaPart","schemaPart","args","key","compositePrimaryKey","keySchemaPart","fields","field","primaryPathSchemaPart","maxLength","getSchemaPropertyRealPath","shortPath","pathParts","realPath","i","concat","checkSchema","_rev","version","value","indexes","unique","encrypted","index","indexAsArray","multipleOf","maximum","minimum","parentPath","lastPathPart","partParts","pop","join","parentSchemaPart","map","splitted","filter","elem","pos","arr","indexOf","objectPath","get","replace","reduce","indexPaths","currentIndex","push","indexPath","propPath"],"mappings":"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","sourcesContent":["/**\n * does additional checks over the schema-json\n * to ensure nothing is broken or not supported\n */\n\nimport objectPath from 'object-path';\nimport {\n    newRxError\n} from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey, getSchemaByObjectPath } from '../../rx-schema-helper';\nimport type {\n    CompositePrimaryKey,\n    JsonSchema,\n    JsonSchemaTypes,\n    RxJsonSchema,\n    TopLevelProperty\n} from '../../types';\nimport {\n    flattenObject, isMaybeReadonlyArray,\n    trimDots\n} from '../../util';\nimport { rxDocumentProperties } from './entity-properties';\n\n/**\n * checks if the fieldname is allowed\n * this makes sure that the fieldnames can be transformed into javascript-vars\n * and does not conquer the observe$ and populate_ fields\n * @throws {Error}\n */\nexport function checkFieldNameRegex(fieldName: string) {\n    if (fieldName === '_deleted') {\n        return;\n    }\n\n    if (['properties', 'language'].includes(fieldName)) {\n        throw newRxError('SC23', {\n            fieldName\n        });\n    }\n\n    const regexStr = '^[a-zA-Z](?:[[a-zA-Z0-9_]*]?[a-zA-Z0-9])?$';\n    const regex = new RegExp(regexStr);\n    if (\n        /**\n         * It must be allowed to set _id as primaryKey.\n         * This makes it sometimes easier to work with RxDB+CouchDB\n         * @link https://github.com/pubkey/rxdb/issues/681\n         */\n        fieldName !== '_id' &&\n        !fieldName.match(regex)\n    ) {\n        throw newRxError('SC1', {\n            regex: regexStr,\n            fieldName\n        });\n    }\n}\n\n/**\n * validate that all schema-related things are ok\n */\nexport function validateFieldsDeep(rxJsonSchema: RxJsonSchema<any>): true {\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function checkField(\n        fieldName: string,\n        schemaObj: any,\n        path: string\n    ) {\n        if (\n            typeof fieldName === 'string' &&\n            typeof schemaObj === 'object' &&\n            !Array.isArray(schemaObj)\n        ) checkFieldNameRegex(fieldName);\n\n        // 'item' only allowed it type=='array'\n        if (schemaObj.hasOwnProperty('item') && schemaObj.type !== 'array') {\n            throw newRxError('SC2', {\n                fieldName\n            });\n        }\n\n        /**\n         * required fields cannot be set via 'required: true',\n         * but must be set via required: []\n         */\n        if (schemaObj.hasOwnProperty('required') && typeof schemaObj.required === 'boolean') {\n            throw newRxError('SC24', {\n                fieldName\n            });\n        }\n\n\n        // if ref given, must be type=='string', type=='array' with string-items or type==['string','null']\n        if (schemaObj.hasOwnProperty('ref')) {\n            if (Array.isArray(schemaObj.type)) {\n                if (schemaObj.type.length > 2 || !schemaObj.type.includes('string') || !schemaObj.type.includes('null')) {\n                    throw newRxError('SC4', {\n                        fieldName\n                    });\n                }\n            } else {\n                switch (schemaObj.type) {\n                    case 'string':\n                        break;\n                    case 'array':\n                        if (!schemaObj.items || !schemaObj.items.type || schemaObj.items.type !== 'string') {\n                            throw newRxError('SC3', {\n                                fieldName\n                            });\n                        }\n                        break;\n                    default:\n                        throw newRxError('SC4', {\n                            fieldName\n                        });\n                }\n            }\n        }\n\n        const isNested = path.split('.').length >= 2;\n\n        // nested only\n        if (isNested) {\n            if (schemaObj.primary) {\n                throw newRxError('SC6', {\n                    path,\n                    primary: schemaObj.primary\n                });\n            }\n\n            if (schemaObj.default) {\n                throw newRxError('SC7', {\n                    path\n                });\n            }\n        }\n\n        // first level\n        if (!isNested) {\n\n            // if _id is used, it must be primaryKey\n            if (\n                fieldName === '_id' &&\n                primaryPath !== '_id'\n            ) {\n                throw newRxError('COL2', {\n                    fieldName\n                });\n            }\n\n            // check underscore fields\n            if (fieldName.charAt(0) === '_') {\n                if (\n                    // exceptional allow underscore on these fields.\n                    fieldName === '_id' ||\n                    fieldName === '_deleted'\n                ) {\n                    return;\n                }\n                throw newRxError('SC8', {\n                    fieldName\n                });\n            }\n        }\n    }\n\n    function traverse(currentObj: any, currentPath: any) {\n        if (typeof currentObj !== 'object') return;\n        Object.keys(currentObj).forEach(attributeName => {\n            if (!currentObj.properties) {\n                checkField(\n                    attributeName,\n                    currentObj[attributeName],\n                    currentPath\n                );\n            }\n            let nextPath = currentPath;\n            if (attributeName !== 'properties') nextPath = nextPath + '.' + attributeName;\n            traverse(currentObj[attributeName], nextPath);\n        });\n    }\n    traverse(rxJsonSchema, '');\n    return true;\n}\n\nexport function checkPrimaryKey(\n    jsonSchema: RxJsonSchema<any>\n) {\n    if (!jsonSchema.primaryKey) {\n        throw newRxError('SC30', { schema: jsonSchema });\n    }\n\n\n\n    function validatePrimarySchemaPart(\n        schemaPart: JsonSchema | TopLevelProperty\n    ) {\n        if (!schemaPart) {\n            throw newRxError('SC33', { schema: jsonSchema });\n        }\n\n        const type: string = schemaPart.type as any;\n        if (\n            !type ||\n            !['string', 'number', 'integer'].includes(type)\n        ) {\n            throw newRxError('SC32', { schema: jsonSchema, args: { schemaPart } });\n        }\n    }\n\n    if (typeof jsonSchema.primaryKey === 'string') {\n        const key = jsonSchema.primaryKey;\n        const schemaPart = jsonSchema.properties[key];\n        validatePrimarySchemaPart(schemaPart);\n    } else {\n        const compositePrimaryKey: CompositePrimaryKey<any> = jsonSchema.primaryKey as any;\n\n        const keySchemaPart = getSchemaByObjectPath(jsonSchema, compositePrimaryKey.key);\n        validatePrimarySchemaPart(keySchemaPart);\n\n        compositePrimaryKey.fields.forEach(field => {\n            const schemaPart = getSchemaByObjectPath(jsonSchema, field);\n            validatePrimarySchemaPart(schemaPart);\n        });\n    }\n\n\n    /**\n     * The primary key must have a maxLength set\n     * which is required by some RxStorage implementations\n     * to ensure we can craft custom index strings.\n     */\n    const primaryPath = getPrimaryFieldOfPrimaryKey(jsonSchema.primaryKey);\n    const primaryPathSchemaPart = jsonSchema.properties[primaryPath as any];\n    if (!primaryPathSchemaPart.maxLength) {\n        throw newRxError('SC39', { schema: jsonSchema, args: { primaryPathSchemaPart } });\n    }\n}\n\n/**\n * computes real path of the object path in the collection schema\n */\nfunction getSchemaPropertyRealPath(shortPath: string) {\n    const pathParts = shortPath.split('.');\n    let realPath = '';\n    for (let i = 0; i < pathParts.length; i += 1) {\n        if (pathParts[i] !== '[]') {\n            realPath = realPath.concat('.properties.'.concat(pathParts[i]));\n        } else {\n            realPath = realPath.concat('.items');\n        }\n    }\n    return trimDots(realPath);\n}\n\n/**\n * does the checking\n * @throws {Error} if something is not ok\n */\nexport function checkSchema(jsonSchema: RxJsonSchema<any>) {\n\n    if (!jsonSchema.primaryKey) {\n        throw newRxError('SC30', {\n            schema: jsonSchema\n        });\n    }\n\n    if (!jsonSchema.hasOwnProperty('properties')) {\n        throw newRxError('SC29', {\n            schema: jsonSchema\n        });\n    }\n\n    // _rev MUST NOT exist, it is added by RxDB\n    if (jsonSchema.properties._rev) {\n        throw newRxError('SC10', {\n            schema: jsonSchema\n        });\n    }\n\n    // check version\n    if (!jsonSchema.hasOwnProperty('version') ||\n        typeof jsonSchema.version !== 'number' ||\n        jsonSchema.version < 0\n    ) {\n        throw newRxError('SC11', {\n            version: jsonSchema.version\n        });\n    }\n\n    validateFieldsDeep(jsonSchema);\n    checkPrimaryKey(jsonSchema);\n\n    Object.keys(jsonSchema.properties).forEach(key => {\n        const value: any = jsonSchema.properties[key];\n        // check primary\n        if (key === jsonSchema.primaryKey) {\n            if (jsonSchema.indexes && jsonSchema.indexes.includes(key)) {\n                throw newRxError('SC13', {\n                    value,\n                    schema: jsonSchema\n                });\n            }\n            if (value.unique) {\n                throw newRxError('SC14', {\n                    value,\n                    schema: jsonSchema\n                });\n            }\n            if (jsonSchema.encrypted && jsonSchema.encrypted.includes(key)) {\n                throw newRxError('SC15', {\n                    value,\n                    schema: jsonSchema\n                });\n            }\n            if (value.type !== 'string') {\n                throw newRxError('SC16', {\n                    value,\n                    schema: jsonSchema\n                });\n            }\n        }\n\n        // check if RxDocument-property\n        if (rxDocumentProperties().includes(key)) {\n            throw newRxError('SC17', {\n                key,\n                schema: jsonSchema\n            });\n        }\n    });\n\n    // check format of jsonSchema.indexes\n    if (jsonSchema.indexes) {\n        // should be an array\n        if (!isMaybeReadonlyArray(jsonSchema.indexes)) {\n            throw newRxError('SC18', {\n                indexes: jsonSchema.indexes,\n                schema: jsonSchema\n            });\n        }\n\n        jsonSchema.indexes.forEach(index => {\n            // should contain strings or array of strings\n            if (!(typeof index === 'string' || Array.isArray(index))) {\n                throw newRxError('SC19', { index, schema: jsonSchema });\n            }\n            // if is a compound index it must contain strings\n            if (Array.isArray(index)) {\n                for (let i = 0; i < index.length; i += 1) {\n                    if (typeof index[i] !== 'string') {\n                        throw newRxError('SC20', { index, schema: jsonSchema });\n                    }\n                }\n            }\n\n            /**\n             * To be able to craft custom indexable string with compound fields,\n             * we need to know the maximum fieldlength of the fields values\n             * when they are transformed to strings.\n             * Therefore we need to enforce some properties inside of the schema.\n             */\n            const indexAsArray = isMaybeReadonlyArray(index) ? index : [index];\n            indexAsArray.forEach(fieldName => {\n                const schemaPart = getSchemaByObjectPath(\n                    jsonSchema,\n                    fieldName\n                );\n\n\n                const type: JsonSchemaTypes = schemaPart.type as any;\n                switch (type) {\n                    case 'string':\n                        const maxLength = schemaPart.maxLength;\n                        if (!maxLength) {\n                            throw newRxError('SC34', {\n                                index,\n                                field: fieldName,\n                                schema: jsonSchema\n                            });\n                        }\n                        break;\n                    case 'number':\n                    case 'integer':\n                        const multipleOf = schemaPart.multipleOf;\n                        if (!multipleOf) {\n                            throw newRxError('SC35', {\n                                index,\n                                field: fieldName,\n                                schema: jsonSchema\n                            });\n                        }\n                        const maximum = schemaPart.maximum;\n                        const minimum = schemaPart.minimum;\n                        if (\n                            typeof maximum === 'undefined' ||\n                            typeof minimum === 'undefined'\n                        ) {\n                            throw newRxError('SC37', {\n                                index,\n                                field: fieldName,\n                                schema: jsonSchema\n                            });\n                        }\n                        break;\n                    case 'boolean':\n                        /**\n                         * If a boolean field is used as an index,\n                         * it must be required.\n                         */\n                        let parentPath = '';\n                        let lastPathPart = fieldName;\n                        if (fieldName.includes('.')) {\n                            const partParts = fieldName.split('.');\n                            lastPathPart = partParts.pop();\n                            parentPath = partParts.join('.');\n                        }\n                        const parentSchemaPart = getSchemaByObjectPath(\n                            jsonSchema,\n                            parentPath\n                        );\n                        if (\n                            !parentSchemaPart.required ||\n                            !parentSchemaPart.required.includes(lastPathPart)\n                        ) {\n                            throw newRxError('SC38', {\n                                index,\n                                field: fieldName,\n                                schema: jsonSchema\n                            });\n                        }\n                        break;\n\n                    default:\n                        throw newRxError('SC36', {\n                            fieldName,\n                            type: schemaPart.type as any,\n                            schema: jsonSchema,\n                        });\n                }\n            });\n\n        });\n    }\n\n    // remove backward-compatibility for index: true\n    Object.keys(flattenObject(jsonSchema))\n        .map(key => {\n            // flattenObject returns only ending paths, we need all paths pointing to an object\n            const splitted = key.split('.');\n            splitted.pop(); // all but last\n            return splitted.join('.');\n        })\n        .filter(key => key !== '')\n        .filter((elem, pos, arr) => arr.indexOf(elem) === pos) // unique\n        .filter(key => { // check if this path defines an index\n            const value = objectPath.get(jsonSchema, key);\n            return !!value.index;\n        })\n        .forEach(key => { // replace inner properties\n            key = key.replace('properties.', ''); // first\n            key = key.replace(/\\.properties\\./g, '.'); // middle\n            throw newRxError('SC26', {\n                index: trimDots(key),\n                schema: jsonSchema\n            });\n        });\n\n    /* check types of the indexes */\n    (jsonSchema.indexes || [])\n        .reduce((indexPaths: string[], currentIndex) => {\n            if (isMaybeReadonlyArray(currentIndex)) {\n                indexPaths.concat(currentIndex);\n            } else {\n                indexPaths.push(currentIndex);\n            }\n            return indexPaths;\n        }, [])\n        .filter((elem, pos, arr) => arr.indexOf(elem) === pos) // from now on working only with unique indexes\n        .map(indexPath => {\n            const realPath = getSchemaPropertyRealPath(indexPath); // real path in the collection schema\n            const schemaObj = objectPath.get(jsonSchema, realPath); // get the schema of the indexed property\n            if (!schemaObj || typeof schemaObj !== 'object') {\n                throw newRxError('SC21', {\n                    index: indexPath,\n                    schema: jsonSchema\n                });\n            }\n            return { indexPath, schemaObj };\n        })\n        .filter(index =>\n            index.schemaObj.type !== 'string' &&\n            index.schemaObj.type !== 'integer' &&\n            index.schemaObj.type !== 'number'\n        )\n        .forEach(index => {\n            throw newRxError('SC22', {\n                key: index.indexPath,\n                type: index.schemaObj.type,\n                schema: jsonSchema\n            });\n        });\n\n\n    /**\n     * TODO\n     * in 9.0.0 we changed the way encrypted fields are defined\n     * This check ensures people do not oversee the breaking change\n     * Remove this check in the future\n     */\n    Object.keys(flattenObject(jsonSchema))\n        .map(key => {\n            // flattenObject returns only ending paths, we need all paths pointing to an object\n            const splitted = key.split('.');\n            splitted.pop(); // all but last\n            return splitted.join('.');\n        })\n        .filter(key => key !== '' && key !== 'attachments')\n        .filter((elem, pos, arr) => arr.indexOf(elem) === pos) // unique\n        .filter(key => {\n            // check if this path defines an encrypted field\n            const value = objectPath.get(jsonSchema, key);\n            return !!value.encrypted;\n        })\n        .forEach(key => { // replace inner properties\n            key = key.replace('properties.', ''); // first\n            key = key.replace(/\\.properties\\./g, '.'); // middle\n            throw newRxError('SC27', {\n                index: trimDots(key),\n                schema: jsonSchema\n            });\n        });\n\n    /* ensure encrypted fields exist in the schema */\n    if (jsonSchema.encrypted) {\n        jsonSchema.encrypted\n            .forEach(propPath => {\n                // real path in the collection schema\n                const realPath = getSchemaPropertyRealPath(propPath);\n                // get the schema of the indexed property\n                const schemaObj = objectPath.get(jsonSchema, realPath);\n                if (!schemaObj || typeof schemaObj !== 'object') {\n                    throw newRxError('SC28', {\n                        field: propPath,\n                        schema: jsonSchema\n                    });\n                }\n            });\n    }\n}\n"],"file":"check-schema.js"}