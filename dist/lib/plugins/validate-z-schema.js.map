{"version":3,"sources":["../../../src/plugins/validate-z-schema.ts"],"names":["VALIDATOR_CACHE","Map","_getValidator","rxSchema","hash","has","validator","ZSchema","validatorFun","obj","validate","jsonSchema","set","get","validateFullDocumentData","useValidator","errors","getLastErrors","formattedZSchemaErrors","map","title","description","message","schema","runAfterSchemaCreated","bind","RxDBValidateZSchemaPlugin","name","rxdb","prototypes","RxSchema","proto","hooks","createRxSchema","after"],"mappings":";;;;;;;;;AAKA;;AACA;;AAGA;;AATA;AACA;AACA;AACA;AACA;;AAaA;AACA;AACA;AACA;AACA,IAAMA,eAAiC,GAAG,IAAIC,GAAJ,EAA1C;AAGA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CACIC,QADJ,EAEE;AACE,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;;AACA,MAAI,CAACJ,eAAe,CAACK,GAAhB,CAAoBD,IAApB,CAAL,EAAgC;AAC5B,QAAME,SAAS,GAAG,IAAKC,mBAAL,EAAlB;;AACA,QAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAc;AAC/BH,MAAAA,SAAS,CAACI,QAAV,CAAmBD,GAAnB,EAAwBN,QAAQ,CAACQ,UAAjC;AACA,aAAOL,SAAP;AACH,KAHD;;AAIAN,IAAAA,eAAe,CAACY,GAAhB,CAAoBR,IAApB,EAA0BI,YAA1B;AACH;;AACD,SAAOR,eAAe,CAACa,GAAhB,CAAoBT,IAApB,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASU,wBAAT,CAEIL,GAFJ,EAGO;AACH,MAAMH,SAAS,GAAGJ,aAAa,CAAC,IAAD,CAA/B;;AACA,MAAMa,YAAY,GAAGT,SAAS,CAACG,GAAD,CAA9B;AACA,MAAMO,MAAmC,GAAGD,YAAY,CAACE,aAAb,EAA5C;AACA,MAAI,CAACD,MAAL,EAAa,OAAOP,GAAP,CAAb,KACK;AACD,QAAMS,sBAAsB,GAAIF,MAAD,CAAgBG,GAAhB,CAAoB;AAAA,UAC/CC,KAD+C,QAC/CA,KAD+C;AAAA,UAE/CC,WAF+C,QAE/CA,WAF+C;AAAA,UAG/CC,OAH+C,QAG/CA,OAH+C;AAAA,aAIvC;AACRF,QAAAA,KAAK,EAALA,KADQ;AAERC,QAAAA,WAAW,EAAXA,WAFQ;AAGRC,QAAAA,OAAO,EAAPA;AAHQ,OAJuC;AAAA,KAApB,CAA/B;AASA,UAAM,yBAAW,KAAX,EAAkB;AACpBN,MAAAA,MAAM,EAAEE,sBADY;AAEpBT,MAAAA,GAAG,EAAHA,GAFoB;AAGpBc,MAAAA,MAAM,EAAE,KAAKZ;AAHO,KAAlB,CAAN;AAKH;AACJ;;AAED,IAAMa,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACrB,QAAD,EAAwB;AAClD;AACA,4CAA+B;AAAA,WAAMD,aAAa,CAACuB,IAAd,CAAmBtB,QAAnB,EAA6BA,QAA7B,CAAN;AAAA,GAA/B;AACH,CAHD;;AAKO,IAAMuB,yBAAmC,GAAG;AAC/CC,EAAAA,IAAI,EAAE,mBADyC;AAE/CC,EAAAA,IAAI,EAAE,IAFyC;AAG/CC,EAAAA,UAAU,EAAE;AACR;AACR;AACA;AACQC,IAAAA,QAAQ,EAAE,kBAACC,KAAD,EAAgB;AACtBA,MAAAA,KAAK,CAAC7B,aAAN,GAAsBA,aAAtB;AACA6B,MAAAA,KAAK,CAACjB,wBAAN,GAAiCA,wBAAjC;AACH;AAPO,GAHmC;AAY/CkB,EAAAA,KAAK,EAAE;AACHC,IAAAA,cAAc,EAAE;AACZC,MAAAA,KAAK,EAAEV;AADK;AADb;AAZwC,CAA5C","sourcesContent":["/**\n * this plugin validates documents before they can be inserted into the RxCollection.\n * It's using z-schema as jsonschema-validator\n * @link https://github.com/zaggino/z-schema\n */\nimport ZSchema from 'z-schema';\nimport {\n    newRxError\n} from '../rx-error';\nimport {\n    requestIdleCallbackIfAvailable\n} from '../util';\nimport {\n    RxSchema\n} from '../rx-schema';\nimport type { RxPlugin } from '../types';\n\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n */\nconst VALIDATOR_CACHE: Map<string, any> = new Map();\n\n\n/**\n * returns the parsed validator from z-schema\n * @param schemaPath if given, the schema for the sub-path is used\n * @\n */\nfunction _getValidator(\n    rxSchema: RxSchema\n) {\n    const hash = rxSchema.hash;\n    if (!VALIDATOR_CACHE.has(hash)) {\n        const validator = new (ZSchema as any)();\n        const validatorFun = (obj: any) => {\n            validator.validate(obj, rxSchema.jsonSchema);\n            return validator;\n        };\n        VALIDATOR_CACHE.set(hash, validatorFun);\n    }\n    return VALIDATOR_CACHE.get(hash);\n}\n\n/**\n * validates the given object against the schema\n * @param  schemaPath if given, the sub-schema will be validated\n * @throws {RxError} if not valid\n */\nfunction validateFullDocumentData(\n    this: RxSchema,\n    obj: any\n): any {\n    const validator = _getValidator(this);\n    const useValidator = validator(obj);\n    const errors: ZSchema.SchemaErrorDetail[] = useValidator.getLastErrors();\n    if (!errors) return obj;\n    else {\n        const formattedZSchemaErrors = (errors as any).map(({\n            title,\n            description,\n            message\n        }: any) => ({\n            title,\n            description,\n            message\n        }));\n        throw newRxError('VD2', {\n            errors: formattedZSchemaErrors,\n            obj,\n            schema: this.jsonSchema\n        });\n    }\n}\n\nconst runAfterSchemaCreated = (rxSchema: RxSchema) => {\n    // pre-generate the validator-z-schema from the schema\n    requestIdleCallbackIfAvailable(() => _getValidator.bind(rxSchema, rxSchema));\n};\n\nexport const RxDBValidateZSchemaPlugin: RxPlugin = {\n    name: 'validate-z-schema',\n    rxdb: true,\n    prototypes: {\n        /**\n         * set validate-function for the RxSchema.prototype\n         */\n        RxSchema: (proto: any) => {\n            proto._getValidator = _getValidator;\n            proto.validateFullDocumentData = validateFullDocumentData;\n        }\n    },\n    hooks: {\n        createRxSchema: {\n            after: runAfterSchemaCreated\n        }\n    }\n};\n"],"file":"validate-z-schema.js"}