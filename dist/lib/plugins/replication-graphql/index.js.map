{"version":3,"sources":["../../../../src/plugins/replication-graphql/index.ts"],"names":["RxGraphQLReplicationState","replicationState","collection","url","clientState","send$","undefined","error$","canceled$","active$","received$","subjects","received","asObservable","send","error","canceled","active","initialReplicationComplete$","isStopped","awaitInitialReplication","run","retryOnFail","cancel","setHeaders","headers","client","syncGraphQL","waitForLeadership","pull","push","deletedFlag","live","liveInterval","retryTime","pullModifier","modifier","DEFAULT_MODIFIER","pushModifier","mutateableClientState","replicationPrimitivesPull","handler","latestPulledDocument","queryBuilder","pullGraphQL","query","variables","result","errors","RxReplicationPullError","overwritable","tunnelErrorMessage","dataPath","Object","keys","data","docsData","objectPath","get","length","documents","hasMoreDocuments","batchSize","args","Promise","all","map","doc","isDeleted","_deleted","modified","filter","replicationPrimitivesPush","docs","changedDoc","modifiedPushDocs","pushObj","RxReplicationPushError","replicationIdentifier","GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX","graphqlReplicationState","RxDBReplicationGraphQLPlugin","name","init","RxDBLeaderElectionPlugin","rxdb","prototypes","RxCollection","proto"],"mappings":"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","sourcesContent":["/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with remote graphql endpoint\n */\n\nimport type {\n    Observable\n} from 'rxjs';\nimport GraphQLClient from 'graphql-client';\nimport objectPath from 'object-path';\nimport {\n    flatClone\n} from '../../util';\n\nimport {\n    hash\n} from '../../util';\n\nimport {\n    DEFAULT_MODIFIER,\n    GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX\n} from './helper';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport {\n    overwritable\n} from '../../overwritable';\nimport type {\n    RxCollection,\n    RxPlugin,\n    RxDocumentData,\n    ReplicationPullOptions,\n    ReplicationPushOptions\n} from '../../types';\nimport { replicateRxCollection, RxReplicationStateBase } from '../replication';\nimport {\n    RxReplicationError,\n    RxReplicationPullError,\n    RxReplicationPushError\n} from '../replication/rx-replication-error';\nimport { newRxError } from '../../rx-error';\nimport { addRxPlugin, SyncOptionsGraphQL } from '../../index';\n\nexport class RxGraphQLReplicationState<RxDocType> {\n\n    public received$: Observable<RxDocumentData<RxDocType>>;\n    public send$: Observable<any> = undefined as any;\n    public error$: Observable<RxReplicationError<RxDocType>> = undefined as any;\n    public canceled$: Observable<boolean> = undefined as any;\n    public active$: Observable<boolean> = undefined as any;\n    public initialReplicationComplete$: Observable<true>;\n\n    constructor(\n        /**\n         * The GraphQL replication uses the replication primitives plugin\n         * internally. So we need that replicationState.\n         */\n        public readonly replicationState: RxReplicationStateBase<RxDocType>,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly url: string,\n        public readonly clientState: { client: any }\n    ) {\n        // map observables from replicationState to this\n        this.received$ = replicationState.subjects.received.asObservable();\n        this.send$ = replicationState.subjects.send.asObservable();\n        this.error$ = replicationState.subjects.error.asObservable();\n        this.canceled$ = replicationState.subjects.canceled.asObservable();\n        this.active$ = replicationState.subjects.active.asObservable();\n        this.initialReplicationComplete$ = replicationState.initialReplicationComplete$;\n    }\n\n\n    isStopped(): boolean {\n        return this.replicationState.isStopped();\n    }\n\n    awaitInitialReplication(): Promise<true> {\n        return this.replicationState.awaitInitialReplication();\n    }\n\n    run(retryOnFail = true): Promise<void> {\n        return this.replicationState.run(retryOnFail);\n    }\n\n    cancel(): Promise<any> {\n        return this.replicationState.cancel();\n    }\n\n    setHeaders(headers: { [k: string]: string }): void {\n        this.clientState.client = GraphQLClient({\n            url: this.url,\n            headers\n        });\n    }\n}\n\nexport function syncGraphQL<RxDocType>(\n    this: RxCollection,\n    {\n        url,\n        headers = {},\n        waitForLeadership = true,\n        pull,\n        push,\n        deletedFlag = '_deleted',\n        live = false,\n        liveInterval = 1000 * 10, // in ms\n        retryTime = 1000 * 5, // in ms\n    }: SyncOptionsGraphQL<RxDocType>\n): RxGraphQLReplicationState<RxDocType> {\n    const collection = this;\n\n    // fill in defaults for pull & push\n    const pullModifier = pull && pull.modifier ? pull.modifier : DEFAULT_MODIFIER;\n    const pushModifier = push && push.modifier ? push.modifier : DEFAULT_MODIFIER;\n\n    /**\n     * We use this object to store the GraphQL client\n     * so we can later swap out the client inside of the replication handlers.\n     */\n    const mutateableClientState = {\n        client: GraphQLClient({\n            url,\n            headers\n        })\n    }\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType> | undefined;\n    if (pull) {\n        replicationPrimitivesPull = {\n            async handler(latestPulledDocument) {\n                const pullGraphQL = await pull.queryBuilder(latestPulledDocument);\n                const result = await mutateableClientState.client.query(pullGraphQL.query, pullGraphQL.variables);\n                if (result.errors) {\n                    if (typeof result.errors === 'string') {\n                        throw new RxReplicationPullError(\n                            result.errors,\n                            latestPulledDocument,\n                        );\n                    } else {\n                        throw new RxReplicationPullError(\n                            overwritable.tunnelErrorMessage('GQL2'),\n                            latestPulledDocument,\n                            result.errors\n                        );\n                    }\n                }\n\n                const dataPath = pull.dataPath || ['data', Object.keys(result.data)[0]];\n                const docsData: any[] = objectPath.get(result, dataPath);\n\n                // optimization shortcut, do not proceed if there are no documents.\n                if (docsData.length === 0) {\n                    return {\n                        documents: [],\n                        hasMoreDocuments: false\n                    };\n                }\n\n                let hasMoreDocuments: boolean = false;\n                if (docsData.length > pull.batchSize) {\n                    throw newRxError('GQL3', {\n                        args: {\n                            pull,\n                            documents: docsData\n                        }\n                    });\n                } else if (docsData.length === pull.batchSize) {\n                    hasMoreDocuments = true;\n                }\n\n                const modified: any[] = (await Promise.all(docsData\n                    .map(async (doc: any) => {\n                        // swap out deleted flag\n                        if (deletedFlag !== '_deleted') {\n                            const isDeleted = !!doc[deletedFlag];\n                            doc._deleted = isDeleted;\n                            delete doc[deletedFlag];\n                        }\n\n                        return await pullModifier(doc);\n                    })\n                )).filter(doc => !!doc);\n                return {\n                    documents: modified,\n                    hasMoreDocuments\n                }\n            }\n        }\n    }\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (push) {\n        replicationPrimitivesPush = {\n            batchSize: push.batchSize,\n            async handler(docs: RxDocumentData<RxDocType>[]) {\n                let modifiedPushDocs: RxDocumentData<RxDocType>[] = await Promise.all(\n                    docs.map(async (doc) => {\n                        let changedDoc: any = flatClone(doc);\n\n                        // swap out deleted flag\n                        if (deletedFlag !== '_deleted') {\n                            const isDeleted = !!doc._deleted;\n                            changedDoc[deletedFlag] = isDeleted;\n                            delete changedDoc._deleted;\n                        }\n\n                        changedDoc = await pushModifier(changedDoc);\n                        return changedDoc ? changedDoc : null;\n                    })\n                );\n                /**\n                 * The push modifier might have returned null instead of a document\n                 * which means that these documents must not be pushed and filtered out.\n                 */\n                modifiedPushDocs = modifiedPushDocs.filter(doc => !!doc) as any;\n\n                /**\n                 * Optimization shortcut.\n                 * If we have no more documents to push,\n                 * because all were filtered out by the modifier,\n                 * we can quit here.\n                 */\n                if (modifiedPushDocs.length === 0) {\n                    return;\n                }\n\n                const pushObj = await push.queryBuilder(modifiedPushDocs);\n                const result = await mutateableClientState.client.query(pushObj.query, pushObj.variables);\n                if (result.errors) {\n                    if (typeof result.errors === 'string') {\n                        throw new RxReplicationPushError(\n                            result.errors,\n                            docs\n                        );\n                    } else {\n                        throw new RxReplicationPushError(\n                            overwritable.tunnelErrorMessage('GQL4'),\n                            docs,\n                            result.errors\n                        );\n                    }\n                }\n            }\n        };\n    }\n\n    const replicationState = replicateRxCollection<RxDocType>({\n        replicationIdentifier: GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX + hash(url),\n        collection,\n        deletedFlag,\n        pull: replicationPrimitivesPull,\n        push: replicationPrimitivesPush,\n        waitForLeadership,\n        live,\n        liveInterval,\n        retryTime\n    });\n\n    const graphqlReplicationState = new RxGraphQLReplicationState(\n        replicationState,\n        collection,\n        url,\n        mutateableClientState\n    );\n\n    return graphqlReplicationState;\n}\n\nexport * from './helper';\nexport * from './graphql-schema-from-rx-schema';\nexport * from './query-builder-from-rx-schema';\n\nexport const RxDBReplicationGraphQLPlugin: RxPlugin = {\n    name: 'replication-graphql',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncGraphQL = syncGraphQL;\n        }\n    }\n};\n"],"file":"index.js"}