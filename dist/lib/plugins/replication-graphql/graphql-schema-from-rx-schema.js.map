{"version":3,"sources":["../../../../src/plugins/replication-graphql/graphql-schema-from-rx-schema.ts"],"names":["SPACING","graphQLSchemaFromRxSchema","input","ret","asString","queries","mutations","subscriptions","inputs","types","Object","entries","forEach","collectionName","collectionSettings","fillUpOptionals","schema","prefixes","ucCollectionName","collectionNameInput","inputSchema","stripKeysFromSchema","ignoreInputKeys","inputGraphQL","rootName","direction","concat","typeDefinitions","map","str","replaceTopLevelTypeName","outputSchema","ignoreOutputKeys","outputGraphQL","queryName","feed","queryKeys","feedKeys","key","subSchema","properties","graphqlType","scalarTypes","type","keyString","push","queryString","join","mutationName","set","mutationString","subscriptionParamsString","subscriptionParams","keys","length","name","subscriptionName","changed","subscriptionString","fullQueryString","fullMutationString","fullSubscriptionString","fullTypeString","fullInputString","fullSchemaString","startsWith","deletedFlag","required","withRevisions","strip","cloned","replace"],"mappings":"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","sourcesContent":["import { getGraphqlSchemaFromJsonSchema } from 'get-graphql-from-jsonschema';\n\nimport { scalarTypes } from 'get-graphql-from-jsonschema/build/lib/scalarTypes';\nimport { fillWithDefaultSettings } from '../../rx-schema-helper';\n\nimport { RxJsonSchema } from '../../types';\nimport { clone, ucfirst } from '../../util';\n\nexport type Prefixes = {\n    set?: string;\n    feed?: string;\n    changed?: string;\n};\n\n/**\n * just type some common types\n * to have better IDE autocomplete,\n * all strings are allowed\n */\nexport type GraphQLParamType = 'ID' | 'ID!' | 'String' | 'String!' | 'Int' | 'Int!' | string;\n\nexport type GraphQLSchemaFromRxSchemaInputSingleCollection = {\n    schema: RxJsonSchema<any>;\n    deletedFlag: string;\n    // which keys must be send to the feed-query to get the newer documents?\n    feedKeys: string[];\n    ignoreInputKeys?: string[];\n    ignoreOutputKeys?: string[];\n    withRevisions?: boolean;\n    prefixes?: Prefixes;\n    subscriptionParams?: { [k: string]: GraphQLParamType }\n};\n\nexport type GraphQLSchemaFromRxSchemaInput = {\n    [collectionName: string]: GraphQLSchemaFromRxSchemaInputSingleCollection\n};\nexport type GraphQLSchemaFromRxSchemaOutput = {\n    asString: string;\n    queries: string[];\n    mutations: string[];\n    subscriptions: string[];\n    inputs: string[];\n    types: string[];\n};\n\n// we use two spaces because get-graphql-from-jsonschema does also\nexport const SPACING = '  ';\n\n/**\n * Create a GraphQL schema from a given RxJsonSchema\n */\nexport function graphQLSchemaFromRxSchema(\n    input: GraphQLSchemaFromRxSchemaInput\n): GraphQLSchemaFromRxSchemaOutput {\n    const ret: GraphQLSchemaFromRxSchemaOutput = {\n        asString: '',\n        queries: [],\n        mutations: [],\n        subscriptions: [],\n        inputs: [],\n        types: []\n    };\n\n\n    Object.entries(input).forEach(([collectionName, collectionSettings]) => {\n        collectionSettings = fillUpOptionals(collectionSettings);\n\n        const schema = collectionSettings.schema;\n        const prefixes: Prefixes = collectionSettings.prefixes as any;\n        const ucCollectionName = ucfirst(collectionName);\n        const collectionNameInput = ucfirst(collectionName) + 'Input';\n\n        // input\n        const inputSchema = stripKeysFromSchema(schema, collectionSettings.ignoreInputKeys as string[]);\n\n        const inputGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: collectionNameInput,\n            schema: inputSchema as any,\n            direction: 'input'\n        });\n\n        ret.inputs = ret.inputs.concat(\n            inputGraphQL\n                .typeDefinitions\n                .map(str => replaceTopLevelTypeName(str, collectionNameInput))\n        );\n\n        // output\n        const outputSchema = stripKeysFromSchema(schema, collectionSettings.ignoreOutputKeys as string[]);\n        const outputGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: collectionName,\n            schema: outputSchema as any,\n            direction: 'output'\n        });\n        ret.types = ret.types.concat(\n            outputGraphQL.typeDefinitions\n                .map(str => replaceTopLevelTypeName(str, ucCollectionName))\n        );\n\n        // query\n        const queryName = prefixes.feed + ucCollectionName;\n        const queryKeys = collectionSettings.feedKeys.map(key => {\n            const subSchema: any = schema.properties[key];\n            const graphqlType = (scalarTypes as any)[subSchema.type];\n            const keyString = key + ': ' + graphqlType + '';\n            return keyString;\n        });\n        queryKeys.push('limit: Int!');\n        const queryString = queryName + '(' + queryKeys.join(', ') + '): [' + ucCollectionName + '!]!';\n        ret.queries.push(SPACING + queryString);\n\n        // mutation\n        const mutationName = prefixes.set + ucCollectionName;\n        const mutationString = mutationName + '(' + collectionName + ': [' + collectionNameInput + ']): ' + ucCollectionName;\n        ret.mutations.push(SPACING + mutationString);\n\n        // subscription\n        let subscriptionParamsString = '';\n        if (collectionSettings.subscriptionParams && Object.keys(collectionSettings.subscriptionParams).length > 0) {\n            subscriptionParamsString = '(' +\n                Object\n                    .entries(collectionSettings.subscriptionParams)\n                    .map(([name, type]) => name + ': ' + type)\n                    .join(', ') +\n                ')';\n        }\n        const subscriptionName = prefixes.changed + ucCollectionName;\n        const subscriptionString = subscriptionName + subscriptionParamsString + ': ' + ucCollectionName;\n        ret.subscriptions.push(SPACING + subscriptionString);\n    });\n\n    // build full string\n    const fullQueryString = 'type Query {\\n' + ret.queries.join('\\n') + '\\n}\\n';\n    const fullMutationString = 'type Mutation {\\n' + ret.mutations.join('\\n') + '\\n}\\n';\n    const fullSubscriptionString = 'type Subscription {\\n' + ret.subscriptions.join('\\n') + '\\n}\\n';\n\n    const fullTypeString = ret.types.join('\\n');\n    const fullInputString = ret.inputs.join('\\n');\n\n    const fullSchemaString = '' +\n        'schema {\\n' +\n        SPACING + 'query: Query\\n' +\n        SPACING + 'mutation: Mutation\\n' +\n        SPACING + 'subscription: Subscription\\n' +\n        '}\\n';\n\n    ret.asString = '' +\n        fullQueryString + '\\n' +\n        fullMutationString + '\\n' +\n        fullSubscriptionString + '\\n' +\n        fullTypeString + '\\n' +\n        fullInputString + '\\n' +\n        fullSchemaString;\n\n    return ret;\n}\n\n\nexport function fillUpOptionals(\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection\n): GraphQLSchemaFromRxSchemaInputSingleCollection {\n\n    const schema = fillWithDefaultSettings(input.schema);\n    // strip internal attributes\n    Object.keys(schema.properties).forEach(key => {\n        if (key.startsWith('_')) {\n            delete schema.properties[key];\n        }\n    });\n    input.schema = schema;\n\n    // add deleted flag to schema\n    schema.properties[input.deletedFlag] = {\n        type: 'boolean'\n    };\n    (schema.required as string[]).push(input.deletedFlag);\n\n    // fill up prefixes\n    if (!input.prefixes) {\n        input.prefixes = {} as any;\n    }\n    const prefixes: Prefixes = input.prefixes as any;\n    if (!prefixes.set) {\n        prefixes.set = 'set';\n    }\n    if (!prefixes.feed) {\n        prefixes.feed = 'feed';\n    }\n    if (!prefixes.changed) {\n        prefixes.changed = 'changed';\n    }\n\n    if (!input.withRevisions) {\n        input.withRevisions = false;\n    }\n\n    if (!input.ignoreInputKeys) {\n        input.ignoreInputKeys = [];\n    }\n    if (!input.ignoreOutputKeys) {\n        input.ignoreOutputKeys = [];\n    }\n\n    return input;\n}\n\nfunction stripKeysFromSchema<T>(schema: RxJsonSchema<T>, strip: string[]): RxJsonSchema<Partial<T>> {\n    const cloned: any = clone(schema);\n    strip.forEach(key => {\n        delete cloned.properties[key];\n    });\n    return cloned;\n}\n\n/**\n * get-graphql-from-jsonschema add a T0-suffix\n * that we do not want for the top level type\n */\nfunction replaceTopLevelTypeName(str: string, ucCollectionName: string): string {\n    return str.replace(' ' + ucCollectionName + 'T0 ', ' ' + ucCollectionName + ' ');\n}\n"],"file":"graphql-schema-from-rx-schema.js"}