{"version":3,"sources":["../../../../../src/plugins/dexie/query/dexie-query.ts"],"names":["dexieQuery","instance","preparedQuery","internals","state","queryMatcher","RxStorageDexieStatics","getQueryMatcher","schema","sortComparator","getSortComparator","skip","limit","Infinity","skipPlusLimit","queryPlan","pouchQueryPlan","keyRange","getDexieKeyRange","Number","NEGATIVE_INFINITY","dexieDb","_maxKey","_options","IDBKeyRange","queryPlanFields","index","def","fields","map","fieldObj","Object","keys","field","primaryPath","sortFields","sort","sortPart","sortFieldsSameAsIndexFields","join","isOneSortDescending","find","values","mustManuallyResort","rows","transaction","dexieTable","dexieTx","tx","idbtrans","store","objectStore","DEXIE_DOCS_TABLE_NAME","length","indexName","cursorReq","openCursor","Promise","res","onsuccess","e","cursor","target","result","docData","value","push","slice","documents","getPouchQueryPlan","query","primaryKey","pouchCompatibleIndexes","ddoc","name","type","indexes","forEach","Array","isArray","pouchIndex","indexPart","POUCHDB_DESIGN_PREFIX","useKey","pouchdbCompatibleQuery","entries","fieldName","low","height","window","Error","queryOpts"],"mappings":"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","sourcesContent":["import { getPrimaryFieldOfPrimaryKey } from '../../../rx-schema-helper';\nimport type { MangoQuery, PreparedQuery, RxDocumentData, RxJsonSchema, RxStorageQueryResult } from '../../../types';\nimport { clone, ensureNotFalsy } from '../../../util';\nimport { getPouchIndexDesignDocNameByIndex, POUCHDB_DESIGN_PREFIX, pouchSwapIdToPrimaryString } from '../../pouchdb';\nimport { preparePouchDbQuery } from '../../pouchdb/pouch-statics';\nimport { DEXIE_DOCS_TABLE_NAME } from '../dexie-helper';\nimport { RxStorageDexieStatics } from '../rx-storage-dexie';\nimport type { RxStorageInstanceDexie } from '../rx-storage-instance-dexie';\nimport { generateKeyRange } from './pouchdb-find-query-planer/indexeddb-find';\nimport { planQuery } from './pouchdb-find-query-planer/query-planner';\n\n\n/**\n * Use the pouchdb query planner to determine which index\n * must be used to get the correct documents.\n * @link https://www.bennadel.com/blog/3258-understanding-the-query-plan-explained-by-the-find-plugin-in-pouchdb-6-2-0.htm\n * \n * \n * TODO use batched cursor\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\nexport function getPouchQueryPlan<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: MangoQuery<RxDocType>\n) {\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n\n    /**\n     * Store the query plan together with the prepared query\n     * to improve performance\n     * We use the query planner of pouchdb-find.\n     */\n    const pouchCompatibleIndexes = [\n        // the primary key is always a free index\n        {\n            ddoc: null as any,\n            name: '_all_docs',\n            type: 'special',\n            def: {\n                fields: [\n                    {\n                        '_id': 'asc'\n                    }\n                ] as any[]\n            }\n        }\n    ];\n    if (schema.indexes) {\n        schema.indexes.forEach(index => {\n            index = Array.isArray(index) ? index : [index];\n            const pouchIndex = index.map(indexPart => {\n                if (indexPart === primaryKey) {\n                    return '_id';\n                } else {\n                    return indexPart;\n                }\n            });\n            const indexName = getPouchIndexDesignDocNameByIndex(pouchIndex);\n            pouchCompatibleIndexes.push({\n                ddoc: POUCHDB_DESIGN_PREFIX + indexName,\n                name: indexName,\n                type: 'json',\n                def: {\n                    fields: index.map(indexPart => {\n                        const useKey = indexPart === primaryKey ? '_id' : indexPart;\n                        return { [useKey]: 'asc' };\n                    })\n                }\n            });\n        })\n    }\n\n    /**\n     * Because pouchdb-find is buggy AF,\n     * we have to apply the same hacks to the query\n     * as we do with the PouchDB RxStorage.\n     * Only then we can use that monkeypatched\n     * query with the query planner.\n     */\n    const pouchdbCompatibleQuery = preparePouchDbQuery(\n        schema,\n        clone(query)\n    );\n\n    const pouchQueryPlan = planQuery(\n        pouchdbCompatibleQuery,\n        pouchCompatibleIndexes\n    );\n\n    // transform back _id to primaryKey\n    pouchQueryPlan.index.def.fields = pouchQueryPlan.index.def.fields.map((field: any) => {\n        const [fieldName, value] = Object.entries(field)[0];\n        if (fieldName === '_id') {\n            return { [primaryKey]: value };\n        } else {\n            return { [fieldName]: value };\n        }\n    });\n\n    return pouchQueryPlan;\n}\n\n\nexport function getDexieKeyRange(\n    queryPlan: any,\n    low: any,\n    height: any,\n    /**\n     * The window.IDBKeyRange object.\n     * Can be swapped out in other environments\n     */\n    IDBKeyRange?: any\n): any {\n\n    if (!IDBKeyRange) {\n        if (typeof window === 'undefined') {\n            throw new Error('IDBKeyRange missing');\n        } else {\n            IDBKeyRange = window.IDBKeyRange;\n        }\n    }\n\n    return generateKeyRange(queryPlan.queryOpts, IDBKeyRange, low, height);\n}\n\n\n/**\n * Runs mango queries over the Dexie.js database.\n */\nexport async function dexieQuery<RxDocType>(\n    instance: RxStorageInstanceDexie<RxDocType>,\n    preparedQuery: PreparedQuery<RxDocType>\n): Promise<RxStorageQueryResult<RxDocType>> {\n    const state = await instance.internals;\n    const queryMatcher = RxStorageDexieStatics.getQueryMatcher(\n        instance.schema,\n        preparedQuery\n    );\n    const sortComparator = RxStorageDexieStatics.getSortComparator(instance.schema, preparedQuery);\n\n    const skip = preparedQuery.skip ? preparedQuery.skip : 0;\n    const limit = preparedQuery.limit ? preparedQuery.limit : Infinity;\n    const skipPlusLimit = skip + limit;\n    const queryPlan = (preparedQuery as any).pouchQueryPlan;\n\n    const keyRange = getDexieKeyRange(\n        queryPlan,\n        Number.NEGATIVE_INFINITY,\n        (state.dexieDb as any)._maxKey,\n        (state.dexieDb as any)._options.IDBKeyRange\n    );\n\n    const queryPlanFields: string[] = queryPlan.index.def.fields\n        .map((fieldObj: any) => Object.keys(fieldObj)[0])\n        .map((field: any) => pouchSwapIdToPrimaryString(instance.primaryPath, field));\n\n    const sortFields = ensureNotFalsy((preparedQuery as MangoQuery<RxDocType>).sort)\n        .map(sortPart => Object.keys(sortPart)[0]);\n\n    /**\n     * If the cursor iterated over the same index that\n     * would be used for sorting, we do not have to sort the results.\n     */\n    const sortFieldsSameAsIndexFields = queryPlanFields.join(',') === sortFields.join(',');\n    /**\n     * Also manually sort if one part of the sort is in descending order\n     * because all our indexes are ascending.\n     * TODO should we be able to define descending indexes?\n     */\n    const isOneSortDescending = preparedQuery.sort.find((sortPart: any) => Object.values(sortPart)[0] === 'desc');\n    const mustManuallyResort = isOneSortDescending || !sortFieldsSameAsIndexFields;\n\n\n    let rows: any[] = [];\n    await state.dexieDb.transaction(\n        'r',\n        state.dexieTable,\n        async (dexieTx) => {\n            /**\n             * TODO here we use the native IndexedDB transaction\n             * to get the cursor.\n             * Instead we should not leave Dexie.js API and find\n             * a way to create the cursor with Dexie.js.\n             */\n            const tx = (dexieTx as any).idbtrans;\n\n            // const nativeIndexedDB = state.dexieDb.backendDB();\n            // const trans = nativeIndexedDB.transaction([DEXIE_DOCS_TABLE_NAME], 'readonly');\n\n            const store = tx.objectStore(DEXIE_DOCS_TABLE_NAME);\n            let index: any;\n            if (\n                queryPlanFields.length === 1 &&\n                queryPlanFields[0] === instance.primaryPath\n            ) {\n                index = store;\n            } else {\n                let indexName: string;\n                if (queryPlanFields.length === 1) {\n                    indexName = queryPlanFields[0];\n                } else {\n                    indexName = '[' + queryPlanFields.join('+') + ']';\n                }\n                index = store.index(indexName);\n            }\n\n            const cursorReq = index.openCursor(keyRange);\n            await new Promise<void>(res => {\n                cursorReq.onsuccess = function (e: any) {\n                    const cursor = e.target.result;\n                    if (cursor) {\n                        // We have a record in cursor.value\n                        const docData = cursor.value;\n                        if (\n                            queryMatcher(docData)\n                        ) {\n                            rows.push(cursor.value);\n                        }\n\n                        /**\n                         * If we do not have to manually sort\n                         * and have enough documents,\n                         * we can abort iterating over the cursor\n                         * because we already have every relevant document.\n                         */\n                        if (\n                            !mustManuallyResort &&\n                            rows.length === skipPlusLimit\n                        ) {\n                            res();\n                        } else {\n                            cursor.continue();\n                        }\n                    } else {\n                        // Iteration complete\n                        res();\n                    }\n                };\n            });\n\n\n        }\n    );\n\n    if (mustManuallyResort) {\n        rows = rows.sort(sortComparator);\n    }\n\n    // apply skip and limit boundaries.\n    rows = rows.slice(skip, skipPlusLimit);\n\n    /**\n     * Comment this in for debugging to check all fields in the database.\n     */\n    // const docsInDb = await state.dexieTable.filter(queryMatcher).toArray();\n    // let documents = docsInDb\n    //     .map(docData => stripDexieKey(docData))\n    //     .sort(sortComparator);\n    // if (preparedQuery.skip) {\n    //     documents = documents.slice(preparedQuery.skip);\n    // }\n    // if (preparedQuery.limit && documents.length > preparedQuery.limit) {\n    //     documents = documents.slice(0, preparedQuery.limit);\n    // }\n\n\n    return {\n        documents: rows\n    };\n}\n"],"file":"dexie-query.js"}