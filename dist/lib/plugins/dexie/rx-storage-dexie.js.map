{"version":3,"file":"rx-storage-dexie.js","names":["RxStorageDexieStatics","hash","data","Promise","res","binaryMd5","digest","hashKey","doesBroadcastChangestream","prepareQuery","schema","mutateableQuery","sort","newRxError","query","queryPlan","getQueryPlan","getSortComparator","preparedQuery","getDexieSortComparator","getQueryMatcher","_schema","mingoQuery","MingoQuery","selector","fun","doc","_deleted","cursor","find","next","RxStorageDexie","settings","name","statics","createStorageInstance","params","createDexieStorageInstance","getRxStorageDexie","storage"],"sources":["../../../../src/plugins/dexie/rx-storage-dexie.ts"],"sourcesContent":["import type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport type {\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageStatics,\n    DexiePreparedQuery,\n    FilledMangoQuery\n} from '../../types';\nimport {\n    Query as MingoQuery\n} from 'mingo';\nimport { binaryMd5 } from 'pouchdb-md5';\nimport { getDexieSortComparator } from './dexie-helper';\nimport type {\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport {\n    createDexieStorageInstance,\n    RxStorageInstanceDexie\n} from './rx-storage-instance-dexie';\nimport { newRxError } from '../../rx-error';\nimport { getQueryPlan } from '../../query-planner';\n\n\nexport const RxStorageDexieStatics: RxStorageStatics = {\n    hash(data: Buffer | Blob | string): Promise<string> {\n        return new Promise(res => {\n            binaryMd5(data, (digest: string) => {\n                res(digest);\n            });\n        });\n    },\n    hashKey: 'md5',\n    doesBroadcastChangestream() {\n        return false;\n    },\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        mutateableQuery: FilledMangoQuery<RxDocType>\n    ): DexiePreparedQuery<RxDocType> {\n\n        if (!mutateableQuery.sort) {\n            throw newRxError('SNH', {\n                query: mutateableQuery\n            });\n        }\n\n        /**\n         * Store the query plan together with the\n         * prepared query to save performance.\n         */\n        const queryPlan = getQueryPlan(\n            schema,\n            mutateableQuery\n        );\n\n        return {\n            query: mutateableQuery,\n            queryPlan\n        };\n    },\n\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        preparedQuery: DexiePreparedQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        return getDexieSortComparator(schema, preparedQuery.query);\n    },\n\n    getQueryMatcher<RxDocType>(\n        _schema: RxJsonSchema<RxDocType>,\n        preparedQuery: DexiePreparedQuery<RxDocType>\n    ): QueryMatcher<RxDocumentData<RxDocType>> {\n        const query = preparedQuery.query;\n        const mingoQuery = new MingoQuery(query.selector);\n        const fun: QueryMatcher<RxDocumentData<RxDocType>> = (doc: RxDocumentData<RxDocType>) => {\n            if (doc._deleted) {\n                return false;\n            }\n            const cursor = mingoQuery.find([doc]);\n            const next = cursor.next();\n            if (next) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return fun;\n    }\n\n}\n\n\nexport class RxStorageDexie implements RxStorage<DexieStorageInternals, DexieSettings> {\n    public name = 'dexie';\n    public statics = RxStorageDexieStatics;\n\n    constructor(\n        public settings: DexieSettings\n    ) { }\n\n    public createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>\n    ): Promise<RxStorageInstanceDexie<RxDocType>> {\n        return createDexieStorageInstance(this, params, this.settings);\n    }\n}\n\n\nexport function getRxStorageDexie(\n    settings: DexieSettings = {}\n): RxStorageDexie {\n    const storage = new RxStorageDexie(settings);\n    return storage;\n}\n"],"mappings":";;;;;;;;AAaA;;AAGA;;AACA;;AAKA;;AAIA;;AACA;;AAGO,IAAMA,qBAAuC,GAAG;EACnDC,IADmD,gBAC9CC,IAD8C,EACC;IAChD,OAAO,IAAIC,OAAJ,CAAY,UAAAC,GAAG,EAAI;MACtB,IAAAC,oBAAA,EAAUH,IAAV,EAAgB,UAACI,MAAD,EAAoB;QAChCF,GAAG,CAACE,MAAD,CAAH;MACH,CAFD;IAGH,CAJM,CAAP;EAKH,CAPkD;EAQnDC,OAAO,EAAE,KAR0C;EASnDC,yBATmD,uCASvB;IACxB,OAAO,KAAP;EACH,CAXkD;EAYnDC,YAZmD,wBAa/CC,MAb+C,EAc/CC,eAd+C,EAelB;IAE7B,IAAI,CAACA,eAAe,CAACC,IAArB,EAA2B;MACvB,MAAM,IAAAC,mBAAA,EAAW,KAAX,EAAkB;QACpBC,KAAK,EAAEH;MADa,CAAlB,CAAN;IAGH;IAED;AACR;AACA;AACA;;;IACQ,IAAMI,SAAS,GAAG,IAAAC,0BAAA,EACdN,MADc,EAEdC,eAFc,CAAlB;IAKA,OAAO;MACHG,KAAK,EAAEH,eADJ;MAEHI,SAAS,EAATA;IAFG,CAAP;EAIH,CApCkD;EAsCnDE,iBAtCmD,6BAuC/CP,MAvC+C,EAwC/CQ,aAxC+C,EAyCT;IACtC,OAAO,IAAAC,mCAAA,EAAuBT,MAAvB,EAA+BQ,aAAa,CAACJ,KAA7C,CAAP;EACH,CA3CkD;EA6CnDM,eA7CmD,2BA8C/CC,OA9C+C,EA+C/CH,aA/C+C,EAgDR;IACvC,IAAMJ,KAAK,GAAGI,aAAa,CAACJ,KAA5B;IACA,IAAMQ,UAAU,GAAG,IAAIC,YAAJ,CAAeT,KAAK,CAACU,QAArB,CAAnB;;IACA,IAAMC,GAA4C,GAAG,SAA/CA,GAA+C,CAACC,GAAD,EAAoC;MACrF,IAAIA,GAAG,CAACC,QAAR,EAAkB;QACd,OAAO,KAAP;MACH;;MACD,IAAMC,MAAM,GAAGN,UAAU,CAACO,IAAX,CAAgB,CAACH,GAAD,CAAhB,CAAf;MACA,IAAMI,IAAI,GAAGF,MAAM,CAACE,IAAP,EAAb;;MACA,IAAIA,IAAJ,EAAU;QACN,OAAO,IAAP;MACH,CAFD,MAEO;QACH,OAAO,KAAP;MACH;IACJ,CAXD;;IAYA,OAAOL,GAAP;EACH;AAhEkD,CAAhD;;;IAqEMM,c;EAIT,wBACWC,QADX,EAEE;IAAA,KALKC,IAKL,GALY,OAKZ;IAAA,KAJKC,OAIL,GAJelC,qBAIf;IAAA,KADSgC,QACT,GADSA,QACT;EAAG;;;;SAEEG,qB,GAAP,+BACIC,MADJ,EAE8C;IAC1C,OAAO,IAAAC,kDAAA,EAA2B,IAA3B,EAAiCD,MAAjC,EAAyC,KAAKJ,QAA9C,CAAP;EACH,C;;;;;;;AAIE,SAASM,iBAAT,GAEW;EAAA,IADdN,QACc,uEADY,EACZ;EACd,IAAMO,OAAO,GAAG,IAAIR,cAAJ,CAAmBC,QAAnB,CAAhB;EACA,OAAOO,OAAP;AACH"}