{"version":3,"sources":["../../../src/plugins/leader-election.ts"],"names":["LEADER_ELECTORS_OF_DB","WeakMap","LEADER_ELECTOR_BY_BROADCAST_CHANNEL","getLeaderElectorByBroadcastChannel","broadcastChannel","elector","get","set","getForDatabase","isLeader","multiInstance","leaderElector","waitForLeadership","PROMISE_RESOLVE_TRUE","awaitLeadership","then","onDestroy","db","has","die","rxdb","prototypes","RxDatabase","proto","RxDBLeaderElectionPlugin","name","hooks","preDestroyRxDatabase","after"],"mappings":";;;;;;;;;;;;;AAIA;;AAUA;;AAdA;AACA;AACA;AAiBA,IAAMA,qBAAyD,GAAG,IAAIC,OAAJ,EAAlE;AACA,IAAMC,mCAA6E,GAAG,IAAID,OAAJ,EAAtF;AAEA;AACA;AACA;AACA;;AACO,SAASE,kCAAT,CAA4CC,gBAA5C,EAA+F;AAClG,MAAIC,OAAO,GAAGH,mCAAmC,CAACI,GAApC,CAAwCF,gBAAxC,CAAd;;AACA,MAAI,CAACC,OAAL,EAAc;AACVA,IAAAA,OAAO,GAAG,4CAAqBD,gBAArB,CAAV;AACAF,IAAAA,mCAAmC,CAACK,GAApC,CAAwCH,gBAAxC,EAA0DC,OAA1D;AACH;;AACD,SAAOA,OAAP;AACH;;AAGM,SAASG,cAAT,GAAyD;AAC5D,MAAMJ,gBAAgB,GAAG,0BAAe,KAAKA,gBAApB,CAAzB;AACA,MAAIC,OAAO,GAAGF,kCAAkC,CAACC,gBAAD,CAAhD;;AACA,MAAI,CAACC,OAAL,EAAc;AACVA,IAAAA,OAAO,GAAGF,kCAAkC,CAACC,gBAAD,CAA5C;AACAJ,IAAAA,qBAAqB,CAACO,GAAtB,CACI,IADJ,EAEIF,OAFJ;AAIH;;AACD,SAAOA,OAAP;AACH;;AAEM,SAASI,QAAT,GAA6C;AAChD,MAAI,CAAC,KAAKC,aAAV,EAAyB;AACrB,WAAO,IAAP;AACH;;AACD,SAAO,KAAKC,aAAL,GAAqBF,QAA5B;AACH;;AAEM,SAASG,iBAAT,GAA+D;AAClE,MAAI,CAAC,KAAKF,aAAV,EAAyB;AACrB,WAAOG,0BAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAKF,aAAL,GACFG,eADE,GAEFC,IAFE,CAEG;AAAA,aAAM,IAAN;AAAA,KAFH,CAAP;AAGH;AACJ;AAED;AACA;AACA;;;AACO,SAASC,SAAT,CAAmBC,EAAnB,EAAmC;AACtC,MAAMC,GAAG,GAAGlB,qBAAqB,CAACM,GAAtB,CAA0BW,EAA1B,CAAZ;;AACA,MAAIC,GAAJ,EAAS;AACLA,IAAAA,GAAG,CAACC,GAAJ;AACH;AACJ;;AAEM,IAAMC,IAAI,GAAG,IAAb;;AACA,IAAMC,UAAU,GAAG;AACtBC,EAAAA,UAAU,EAAE,oBAACC,KAAD,EAAgB;AACxBA,IAAAA,KAAK,CAACZ,aAAN,GAAsBH,cAAtB;AACAe,IAAAA,KAAK,CAACd,QAAN,GAAiBA,QAAjB;AACAc,IAAAA,KAAK,CAACX,iBAAN,GAA0BA,iBAA1B;AACH;AALqB,CAAnB;;AAQA,IAAMY,wBAAkC,GAAG;AAC9CC,EAAAA,IAAI,EAAE,iBADwC;AAE9CL,EAAAA,IAAI,EAAJA,IAF8C;AAG9CC,EAAAA,UAAU,EAAVA,UAH8C;AAI9CK,EAAAA,KAAK,EAAE;AACHC,IAAAA,oBAAoB,EAAE;AAClBC,MAAAA,KAAK,EAAEZ;AADW;AADnB;AAJuC,CAA3C","sourcesContent":["/**\n * this plugin adds the leader-election-capabilities to rxdb\n */\n\nimport {\n    createLeaderElection,\n    LeaderElector,\n    BroadcastChannel\n} from 'broadcast-channel';\n\nimport type {\n    RxDatabase,\n    RxPlugin\n} from '../types';\nimport {\n    ensureNotFalsy,\n    PROMISE_RESOLVE_TRUE\n} from '../util';\n\nconst LEADER_ELECTORS_OF_DB: WeakMap<RxDatabase, LeaderElector> = new WeakMap();\nconst LEADER_ELECTOR_BY_BROADCAST_CHANNEL: WeakMap<BroadcastChannel, LeaderElector> = new WeakMap();\n\n/**\n * Returns the leader elector of a broadcast channel.\n * Used to ensure we reuse the same elector for the channel each time.\n */\nexport function getLeaderElectorByBroadcastChannel(broadcastChannel: BroadcastChannel): LeaderElector {\n    let elector = LEADER_ELECTOR_BY_BROADCAST_CHANNEL.get(broadcastChannel);\n    if (!elector) {\n        elector = createLeaderElection(broadcastChannel);\n        LEADER_ELECTOR_BY_BROADCAST_CHANNEL.set(broadcastChannel, elector);\n    }\n    return elector;\n}\n\n\nexport function getForDatabase(this: RxDatabase): LeaderElector {\n    const broadcastChannel = ensureNotFalsy(this.broadcastChannel);\n    let elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n    if (!elector) {\n        elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n        LEADER_ELECTORS_OF_DB.set(\n            this,\n            elector\n        );\n    }\n    return elector;\n}\n\nexport function isLeader(this: RxDatabase): boolean {\n    if (!this.multiInstance) {\n        return true;\n    }\n    return this.leaderElector().isLeader;\n}\n\nexport function waitForLeadership(this: RxDatabase): Promise<boolean> {\n    if (!this.multiInstance) {\n        return PROMISE_RESOLVE_TRUE;\n    } else {\n        return this.leaderElector()\n            .awaitLeadership()\n            .then(() => true);\n    }\n}\n\n/**\n * runs when the database gets destroyed\n */\nexport function onDestroy(db: RxDatabase) {\n    const has = LEADER_ELECTORS_OF_DB.get(db);\n    if (has) {\n        has.die();\n    }\n}\n\nexport const rxdb = true;\nexport const prototypes = {\n    RxDatabase: (proto: any) => {\n        proto.leaderElector = getForDatabase;\n        proto.isLeader = isLeader;\n        proto.waitForLeadership = waitForLeadership;\n    }\n};\n\nexport const RxDBLeaderElectionPlugin: RxPlugin = {\n    name: 'leader-election',\n    rxdb,\n    prototypes,\n    hooks: {\n        preDestroyRxDatabase: {\n            after: onDestroy\n        }\n    }\n};\n"],"file":"leader-election.js"}