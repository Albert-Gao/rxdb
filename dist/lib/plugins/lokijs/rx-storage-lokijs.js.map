{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-lokijs.ts"],"names":["RxStorageLokiStatics","hash","data","Promise","res","digest","hashKey","doesBroadcastChangestream","prepareQuery","_schema","mutateableQuery","Object","keys","selector","length","$and","_deleted","getSortComparator","schema","query","getQueryMatcher","fun","doc","docWithResetDeleted","fakeCollection","binaryIndices","setPrototypeOf","lokijs","Collection","prototype","fakeResultSet","collection","Resultset","find","ret","filteredrows","RxStorageLoki","databaseSettings","name","statics","leaderElectorByLokiDbName","Map","createStorageInstance","params","getRxStorageLoki","storage"],"mappings":"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","sourcesContent":["import type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport lokijs from 'lokijs';\nimport type {\n    LokiDatabaseSettings,\n    LokiSettings,\n    LokiStorageInternals,\n    MangoQuery,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageStatics\n} from '../../types';\nimport {\n    ensureNotFalsy,\n    flatClone\n} from '../../util';\nimport {\n    createLokiStorageInstance,\n    RxStorageInstanceLoki\n} from './rx-storage-instance-loki';\nimport { getLokiSortComparator } from './lokijs-helper';\nimport type { LeaderElector } from 'broadcast-channel';\n\nimport { binaryMd5 } from 'pouchdb-md5';\n\nexport const RxStorageLokiStatics: RxStorageStatics = {\n\n    hash(data: Buffer | Blob | string): Promise<string> {\n        return new Promise(res => {\n            binaryMd5(data, (digest: string) => {\n                res(digest);\n            });\n        });\n    },\n    hashKey: 'md5',\n    doesBroadcastChangestream() {\n        return false;\n    },\n    prepareQuery<RxDocType>(\n        _schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        mutateableQuery: MangoQuery<RxDocType>\n    ) {\n        if (Object.keys(ensureNotFalsy(mutateableQuery.selector)).length > 0) {\n            mutateableQuery.selector = {\n                $and: [\n                    {\n                        _deleted: false\n                    },\n                    mutateableQuery.selector\n                ]\n            };\n        } else {\n            mutateableQuery.selector = {\n                _deleted: false\n            };\n        }\n\n        return mutateableQuery;\n    },\n\n\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        query: MangoQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        return getLokiSortComparator(schema, query);\n    },\n\n    /**\n     * Returns a function that determines if a document matches a query selector.\n     * It is important to have the exact same logix as lokijs uses, to be sure\n     * that the event-reduce algorithm works correct.\n     * But LokisJS does not export such a function, the query logic is deep inside of\n     * the Resultset prototype.\n     * Because I am lazy, I do not copy paste and maintain that code.\n     * Instead we create a fake Resultset and apply the prototype method Resultset.prototype.find(),\n     * same with Collection.\n     */\n    getQueryMatcher<RxDocType>(\n        _schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocumentWriteData<RxDocType>) => {\n            if (doc._deleted) {\n                return false;\n            }\n            const docWithResetDeleted = flatClone(doc);\n            docWithResetDeleted._deleted = !!docWithResetDeleted._deleted;\n\n            const fakeCollection = {\n                data: [docWithResetDeleted],\n                binaryIndices: {}\n            };\n            Object.setPrototypeOf(fakeCollection, (lokijs as any).Collection.prototype);\n            const fakeResultSet: any = {\n                collection: fakeCollection\n            };\n            Object.setPrototypeOf(fakeResultSet, (lokijs as any).Resultset.prototype);\n            fakeResultSet.find(query.selector, true);\n\n            const ret = fakeResultSet.filteredrows.length > 0;\n            return ret;\n        }\n        return fun;\n    }\n\n}\n\nexport class RxStorageLoki implements RxStorage<LokiStorageInternals, LokiSettings> {\n    public name = 'lokijs';\n    public statics = RxStorageLokiStatics;\n\n    /**\n     * Create one leader elector by db name.\n     * This is done inside of the storage, not globally\n     * to make it easier to test multi-tab behavior.\n     */\n    public leaderElectorByLokiDbName: Map<string, {\n        leaderElector: LeaderElector,\n        /**\n         * Count the instances that currently use the elector.\n         * If is goes to zero again, the elector can be closed.\n         */\n        intancesCount: number;\n    }> = new Map();\n\n    constructor(\n        public databaseSettings: LokiDatabaseSettings\n    ) { }\n\n    public createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>\n    ): Promise<RxStorageInstanceLoki<RxDocType>> {\n        return createLokiStorageInstance(this, params, this.databaseSettings);\n    }\n}\n\nexport function getRxStorageLoki(\n    databaseSettings: LokiDatabaseSettings = {}\n): RxStorageLoki {\n    const storage = new RxStorageLoki(databaseSettings);\n    return storage;\n}\n"],"file":"rx-storage-lokijs.js"}