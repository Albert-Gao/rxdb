{"version":3,"sources":["../../src/rx-query.ts"],"names":["queryCollection","rxQuery","docs","collection","isFindOneByIdQuery","docId","storageInstance","findDocumentsById","docsMap","docData","push","preparedQuery","getPreparedQuery","query","queryResult","documents","_queryCount","newQueryID","RxQueryBase","op","mangoQuery","id","_execOverDatabaseCount","_creationTime","_lastEnsureEqual","other","uncached","refCount$","BehaviorSubject","_result","_latestChangeEvent","_lastExecStart","_lastExecEnd","_ensureEqualQueue","PROMISE_RESOLVE_FALSE","_getDefaultQuery","schema","primaryPath","_setResultData","newResultData","primPath","docsDataMap","Map","docsData","map","doc","_dataSync$","getValue","set","time","_execOverDatabase","docsPromise","then","exec","throwIfMissing","name","_ensureEqual","$","result","toString","stringObj","value","JSON","stringify","stringifyFilter","hookInput","jsonSchema","database","storage","statics","prepareQuery","doesDocumentDataMatch","_deleted","queryMatcher","remove","ret","Array","isArray","Promise","all","update","_updateObj","where","_queryObj","sort","_params","skip","_amount","limit","_$","results$","pipe","changeEvent","isLocal","RXJS_SHARE_REPLAY_DEFAULTS","prev","curr","useResult","length","slice","usePreparedQuery","getQueryMatcher","selector","tunnelQueryCache","_queryCache","getByQuery","createRxQuery","queryObj","_isResultsInSync","currentLatestEventNumber","asRxQuery","_changeEventBuffer","counter","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","eventReduceResult","runFullQueryAgain","changed","newResults","latestAfter","resolve","Object","keys","$eq","isInstanceOf","obj"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AAMA;;AAQA;;AAWA;;AAGA;;AAiBA;;AAGA;;AACA;;AAEA;;AAwgBA;AACA;AACA;AACA;AACA;AACA;IACsBA,e,YAAAA,e,CAClBC,O;MACoC;AACpC,QAAIC,IAAiC,GAAG,EAAxC;AACA,QAAMC,WAAU,GAAGF,OAAO,CAACE,UAA3B;AAEA;AACJ;AACA;AACA;AACA;AACA;;AATwC;AAAA,UAUhCF,OAAO,CAACG,kBAVwB;AAWhC,YAAMC,KAAK,GAAGJ,OAAO,CAACG,kBAAtB;AAXgC,+BAYVD,WAAU,CAACG,eAAX,CAA2BC,iBAA3B,CAA6C,CAACF,KAAD,CAA7C,EAAsD,KAAtD,CAZU,iBAY1BG,OAZ0B;AAahC,cAAMC,OAAO,GAAGD,OAAO,CAACH,KAAD,CAAvB;;AAbgC,cAc5BI,OAd4B;AAe5BP,YAAAA,IAAI,CAACQ,IAAL,CAAUD,OAAV;AAf4B;AAAA;AAAA;AAkBhC,YAAME,aAAa,GAAGV,OAAO,CAACW,gBAAR,EAAtB;AAlBgC,+BAmBNT,WAAU,CAACG,eAAX,CAA2BO,KAA3B,CAAiCF,aAAjC,CAnBM,iBAmB1BG,WAnB0B;AAoBhCZ,UAAAA,IAAI,GAAGY,WAAW,CAACC,SAAnB;AApBgC;AAAA;AAAA;;AAAA;AAsBpC,aAAOb,IAAP;AAtBoC,SAsB7BA,IAtB6B;AAwBvC,G;;;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AA/iBA,IAAIc,WAAW,GAAG,CAAlB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAoB;AACnC,SAAO,EAAED,WAAT;AACH,CAFD;;IAIaE,W;AAQT;AACJ;AACA;AAII;AAGA;AAKA;;AAMA;AACJ;AACA;AACA;AAeI,uBACWC,EADX,EAEWC,UAFX,EAGWjB,UAHX,EAIE;AAAA,SA5CKkB,EA4CL,GA5CkBJ,UAAU,EA4C5B;AAAA,SAvCKK,sBAuCL,GAvCsC,CAuCtC;AAAA,SAtCKC,aAsCL,GAtCqB,gBAsCrB;AAAA,SAnCKC,gBAmCL,GAnCwB,CAmCxB;AAAA,SAhCKC,KAgCL,GAhCkB,EAgClB;AAAA,SA9BKC,QA8BL,GA9BgB,KA8BhB;AAAA,SA3BKC,SA2BL,GA3BiB,IAAIC,qBAAJ,CAAoB,IAApB,CA2BjB;AAAA,SAlBKC,OAkBL,GAPS,IAOT;AAAA,SAuEKC,kBAvEL,GAuEuC,CAAC,CAvExC;AAAA,SA2EKC,cA3EL,GA2E8B,CA3E9B;AAAA,SA4EKC,YA5EL,GA4E4B,CA5E5B;AAAA,SAkFKC,iBAlFL,GAkF2CC,2BAlF3C;AAAA,SAHSf,EAGT,GAHSA,EAGT;AAAA,SAFSC,UAET,GAFSA,UAET;AAAA,SADSjB,UACT,GADSA,UACT;;AACE,QAAI,CAACiB,UAAL,EAAiB;AACb,WAAKA,UAAL,GAAkBe,gBAAgB,EAAlC;AACH;;AAED,SAAK/B,kBAAL,GAA0BA,kBAAkB,CACxC,KAAKD,UAAL,CAAgBiC,MAAhB,CAAuBC,WADiB,EAExCjB,UAFwC,CAA5C;AAIH;;;;AAoFD;AACJ;AACA;AACA;SACIkB,c,GAAA,wBAAeC,aAAf,EAAsE;AAClE,QAAMrC,IAAI,GAAG,iDACT,KAAKC,UADI,EAEToC,aAFS,CAAb;AAKA;AACR;AACA;AACA;AACA;;AACQ,QAAMC,QAAQ,GAAG,KAAKrC,UAAL,CAAgBiC,MAAhB,CAAuBC,WAAxC;AACA,QAAMI,WAAW,GAAG,IAAIC,GAAJ,EAApB;AACA,QAAMC,QAAQ,GAAGzC,IAAI,CAAC0C,GAAL,CAAS,UAAAC,GAAG,EAAI;AAC7B,UAAMpC,OAAuB,GAAGoC,GAAG,CAACC,UAAJ,CAAeC,QAAf,EAAhC;;AACA,UAAM1B,EAAU,GAAGZ,OAAO,CAAC+B,QAAD,CAA1B;AACAC,MAAAA,WAAW,CAACO,GAAZ,CAAgB3B,EAAhB,EAAoBZ,OAApB;AACA,aAAOA,OAAP;AACH,KALgB,CAAjB;AAOA,SAAKoB,OAAL,GAAe;AACXc,MAAAA,QAAQ,EAARA,QADW;AAEXF,MAAAA,WAAW,EAAXA,WAFW;AAGXvC,MAAAA,IAAI,EAAJA,IAHW;AAIX+C,MAAAA,IAAI,EAAE;AAJK,KAAf;AAMH;AAED;AACJ;AACA;AACA;;;SACIC,iB,GAAA,6BAA+D;AAAA;;AAC3D,SAAK5B,sBAAL,GAA8B,KAAKA,sBAAL,GAA8B,CAA5D;AACA,SAAKS,cAAL,GAAsB,gBAAtB;AAEA,QAAMoB,WAAW,GAAGnD,eAAe,CAAiB,IAAjB,CAAnC;AACA,WAAOmD,WAAW,CAACC,IAAZ,CAAiB,UAAAlD,IAAI,EAAI;AAC5B,MAAA,KAAI,CAAC8B,YAAL,GAAoB,gBAApB;AACA,aAAO9B,IAAP;AACH,KAHM,CAAP;AAIH;AAED;AACJ;AACA;AACA;AACA;;;SAGWmD,I,GAAP,cAAYC,cAAZ,EAAoD;AAAA;;AAChD,QAAIA,cAAc,IAAI,KAAKnC,EAAL,KAAY,SAAlC,EAA6C;AACzC,YAAM,yBAAW,KAAX,EAAkB;AACpBhB,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBoD,IADR;AAEpB1C,QAAAA,KAAK,EAAE,KAAKO,UAFQ;AAGpBD,QAAAA,EAAE,EAAE,KAAKA;AAHW,OAAlB,CAAN;AAKH;AAGD;AACR;AACA;AACA;AACA;;;AACQ,WAAOqC,YAAY,CAAC,IAAD,CAAZ,CACFJ,IADE,CACG;AAAA,aAAM,0BAAe,MAAI,CAACK,CAApB,CAAN;AAAA,KADH,EAEFL,IAFE,CAEG,UAAAM,MAAM,EAAI;AACZ,UAAI,CAACA,MAAD,IAAWJ,cAAf,EAA+B;AAC3B,cAAM,yBAAW,MAAX,EAAmB;AACrBnD,UAAAA,UAAU,EAAE,MAAI,CAACA,UAAL,CAAgBoD,IADP;AAErB1C,UAAAA,KAAK,EAAE,MAAI,CAACO,UAFS;AAGrBD,UAAAA,EAAE,EAAE,MAAI,CAACA;AAHY,SAAnB,CAAN;AAKH,OAND,MAMO;AACH,eAAOuC,MAAP;AACH;AACJ,KAZE,CAAP;AAaH;AAID;AACJ;AACA;AACA;;;AA6BI;AACJ;AACA;AACA;SACIC,Q,GAAA,oBAAmB;AACf,QAAMC,SAAS,GAAG,sBAAW;AACzBzC,MAAAA,EAAE,EAAE,KAAKA,EADgB;AAEzBN,MAAAA,KAAK,EAAE,KAAKO,UAFa;AAGzBK,MAAAA,KAAK,EAAE,KAAKA;AAHa,KAAX,EAIf,IAJe,CAAlB;AAKA,QAAMoC,KAAK,GAAGC,IAAI,CAACC,SAAL,CAAeH,SAAf,EAA0BI,qBAA1B,CAAd;;AACA,SAAKL,QAAL,GAAgB;AAAA,aAAME,KAAN;AAAA,KAAhB;;AACA,WAAOA,KAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;SACIjD,gB,GAAA,4BAAkD;AAC9C,QAAMqD,SAAS,GAAG;AACdhE,MAAAA,OAAO,EAAE,IADK;AAEd;AACAmB,MAAAA,UAAU,EAAE,wCACR,KAAKjB,UAAL,CAAgBiC,MAAhB,CAAuB8B,UADf,EAER,iBAAM,KAAK9C,UAAX,CAFQ;AAHE,KAAlB;AAQA,+BAAe,iBAAf,EAAkC6C,SAAlC;AAEA,QAAMJ,KAAK,GAAG,KAAK1D,UAAL,CAAgBgE,QAAhB,CAAyBC,OAAzB,CAAiCC,OAAjC,CAAyCC,YAAzC,CACV,KAAKnE,UAAL,CAAgBG,eAAhB,CAAgC8B,MADtB,EAEV6B,SAAS,CAAC7C,UAFA,CAAd;;AAKA,SAAKR,gBAAL,GAAwB;AAAA,aAAMiD,KAAN;AAAA,KAAxB;;AACA,WAAOA,KAAP;AACH;AAED;AACJ;AACA;AACA;;;SACIU,qB,GAAA,+BAAsB9D,OAAtB,EAA8D;AAC1D;AACA,QAAIA,OAAO,CAAC+D,QAAZ,EAAsB;AAClB,aAAO,KAAP;AACH;;AAED,WAAO,KAAKC,YAAL,CAAkBhE,OAAlB,CAAP;AACH;AAED;AACJ;AACA;AACA;;;SACIiE,M,GAAA,kBAAiC;AAC7B,QAAIC,GAAJ;AACA,WAAO,KACFtB,IADE,GAEFD,IAFE,CAEG,UAAAlD,IAAI,EAAI;AACVyE,MAAAA,GAAG,GAAGzE,IAAN;;AACA,UAAI0E,KAAK,CAACC,OAAN,CAAc3E,IAAd,CAAJ,EAAyB;AACrB,eAAO4E,OAAO,CAACC,GAAR,CAAY7E,IAAI,CAAC0C,GAAL,CAAS,UAAAC,GAAG;AAAA,iBAAIA,GAAG,CAAC6B,MAAJ,EAAJ;AAAA,SAAZ,CAAZ,CAAP;AACH,OAFD,MAEO;AACH,eAAQxE,IAAD,CAAcwE,MAAd,EAAP;AACH;AACJ,KATE,EAUFtB,IAVE,CAUG;AAAA,aAAMuB,GAAN;AAAA,KAVH,CAAP;AAWH;AAGD;AACJ;AACA;;;AAKI;AACJ;AACA;AACA;SACIK,M,GAAA,gBAAOC,UAAP,EAAgD;AAC5C,UAAM,yBAAc,QAAd,CAAN;AACH,G,CAGD;AACA;;;SACAC,K,GAAA,eAAMC,SAAN,EAA6H;AACzH,UAAM,yBAAc,eAAd,CAAN;AACH,G;;SACDC,I,GAAA,cAAKC,OAAL,EAAmG;AAC/F,UAAM,yBAAc,eAAd,CAAN;AACH,G;;SACDC,I,GAAA,cAAKC,OAAL,EAAqE;AACjE,UAAM,yBAAc,eAAd,CAAN;AACH,G;;SACDC,K,GAAA,eAAMD,OAAN,EAAsE;AAClE,UAAM,yBAAc,eAAd,CAAN;AACH,G;;;;SA/SD,eAAwC;AAAA;;AACpC,UAAI,CAAC,KAAKE,EAAV,EAAc;AAEV,YAAMC,QAAQ,GAAG,KAAKvF,UAAL,CAAgBsD,CAAhB,CAAkBkC,IAAlB;AACb;AAChB;AACA;AACA;AACgB,+BAAO,UAAAC,WAAW;AAAA,iBAAI,CAACA,WAAW,CAACC,OAAjB;AAAA,SAAlB,CALa;AAMb;AAChB;AACA;AACA;AACgB,kCAAU,IAAV,CAVa,EAWb;AACA,iCAAS;AAAA,iBAAMrC,YAAY,CAAC,MAAD,CAAlB;AAAA,SAAT,CAZa,EAab;AACA,4BAAI;AAAA,iBAAM,MAAI,CAAC3B,OAAX;AAAA,SAAJ,CAda,EAeb;AACA,oCAAYiE,gCAAZ,CAhBa,EAiBb;AACA,6CAAqB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACjC,cAAID,IAAI,IAAIA,IAAI,CAAC9C,IAAL,KAAc,0BAAe+C,IAAf,EAAqB/C,IAA/C,EAAqD;AACjD,mBAAO,IAAP;AACH,WAFD,MAEO;AACH,mBAAO,KAAP;AACH;AACJ,SAND,CAlBa;AAyBb;AAChB;AACA;AACA;AACgB,4BAAI,UAACS,MAAD,EAAY;AACZ,cAAMuC,SAAS,GAAG,0BAAevC,MAAf,CAAlB;;AACA,cAAI,MAAI,CAACvC,EAAL,KAAY,SAAhB,EAA2B;AACvB;AACA,mBAAO8E,SAAS,CAAC/F,IAAV,CAAegG,MAAf,KAA0B,CAA1B,GAA8B,IAA9B,GAAqCD,SAAS,CAAC/F,IAAV,CAAe,CAAf,CAA5C;AACH,WAHD,MAGO;AACH;AACA;AACA,mBAAO+F,SAAS,CAAC/F,IAAV,CAAeiG,KAAf,CAAqB,CAArB,CAAP;AACH;AACJ,SAVD,CA7Ba,CAAjB;AA0CA,aAAKV,EAAL,GAAU,iBACNC,QADM;AAEN;AAChB;AACA;AACA;AACgB,aAAK/D,SAAL,CAAegE,IAAf,CACI,uBAAO;AAAA,iBAAM,KAAN;AAAA,SAAP,CADJ,CANM,CAAV;AAUH;;AACD,aAAO,KAAKF,EAAZ;AACH,K,CAGD;;;;SAiHA,eAAsE;AAClE,UAAMrD,MAAM,GAAG,KAAKjC,UAAL,CAAgBiC,MAAhB,CAAuB8B,UAAtC;AAGA;AACR;AACA;AACA;AACA;AACA;;AACQ,UAAMkC,gBAAgB,GAAG,KAAKjG,UAAL,CAAgBgE,QAAhB,CAAyBC,OAAzB,CAAiCC,OAAjC,CAAyCC,YAAzC,CACrBlC,MADqB,EAErB,wCACI,KAAKjC,UAAL,CAAgBiC,MAAhB,CAAuB8B,UAD3B,EAEI,iBAAM,KAAK9C,UAAX,CAFJ,CAFqB,CAAzB;AAQA,aAAO,qCACH,IADG,EAEH,cAFG,EAGH,KAAKjB,UAAL,CAAgBgE,QAAhB,CAAyBC,OAAzB,CAAiCC,OAAjC,CAAyCgC,eAAzC,CACIjE,MADJ,EAEIgE,gBAFJ,CAHG,CAAP;AAQH;;;SA8ED,eAAwD;AACpD,aAAO,IAAP;AACH;;;;;;;AA2BE,SAASjE,gBAAT,GAAwC;AAC3C,SAAO;AACHmE,IAAAA,QAAQ,EAAE;AADP,GAAP;AAGH;AAED;AACA;AACA;;;AACO,SAASC,gBAAT,CACHtG,OADG,EAEmC;AACtC,SAAOA,OAAO,CAACE,UAAR,CAAmBqG,WAAnB,CAA+BC,UAA/B,CAA0CxG,OAA1C,CAAP;AACH;;AAEM,SAASyG,aAAT,CACHvF,EADG,EAEHwF,QAFG,EAGHxG,UAHG,EAIL;AACE,6BAAe,kBAAf,EAAmC;AAC/BgB,IAAAA,EAAE,EAAFA,EAD+B;AAE/BwF,IAAAA,QAAQ,EAARA,QAF+B;AAG/BxG,IAAAA,UAAU,EAAVA;AAH+B,GAAnC;AAMA,MAAIwE,GAAG,GAAG,IAAIzD,WAAJ,CAAgBC,EAAhB,EAAoBwF,QAApB,EAA8BxG,UAA9B,CAAV,CAPF,CASE;;AACAwE,EAAAA,GAAG,GAAG4B,gBAAgB,CAAC5B,GAAD,CAAtB;AAEA,6BAAe,eAAf,EAAgCA,GAAhC;AAEA,2CAAwBxE,UAAxB;AAEA,SAAOwE,GAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASiC,gBAAT,CAA0B3G,OAA1B,EAAyD;AACrD,MAAM4G,wBAAwB,GAAG5G,OAAO,CAAC6G,SAAR,CAAkB3G,UAAlB,CAA6B4G,kBAA7B,CAAgDC,OAAjF;;AACA,MAAI/G,OAAO,CAAC6B,kBAAR,IAA8B+E,wBAAlC,EAA4D;AACxD,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ;AAGD;AACA;AACA;AACA;AACA;;;AACA,SAASrD,YAAT,CAAsBvD,OAAtB,EAA8D;AAC1D;AACA,MACIA,OAAO,CAACE,UAAR,CAAmBgE,QAAnB,CAA4B8C,SAA5B,IACAL,gBAAgB,CAAC3G,OAAD,CAFpB,EAGE;AACE,WAAOiC,2BAAP;AACH;;AAEDjC,EAAAA,OAAO,CAACgC,iBAAR,GAA4BhC,OAAO,CAACgC,iBAAR,CACvBmB,IADuB,CAClB;AAAA,WAAM8D,aAAa,CAACjH,OAAD,CAAnB;AAAA,GADkB,CAA5B;AAEA,SAAOA,OAAO,CAACgC,iBAAf;AACH;AAED;AACA;AACA;AACA;;;AACA,SAASiF,aAAT,CAAuBjH,OAAvB,EAA+D;AAC3DA,EAAAA,OAAO,CAACuB,gBAAR,GAA2B,gBAA3B;AAEA;AACJ;AACA;;AACI,OACI;AACAvB,EAAAA,OAAO,CAACE,UAAR,CAAmBgE,QAAnB,CAA4B8C,SAA5B,IACA;AACAL,EAAAA,gBAAgB,CAAC3G,OAAD,CAJpB,EAKE;AACE,WAAOiC,2BAAP;AACH;;AAED,MAAIyC,GAAG,GAAG,KAAV;AACA,MAAIwC,UAAU,GAAG,KAAjB,CAhB2D,CAgBnC;;AACxB,MAAIlH,OAAO,CAAC6B,kBAAR,KAA+B,CAAC,CAApC,EAAuC;AACnC;AACAqF,IAAAA,UAAU,GAAG,IAAb;AACH;AAED;AACJ;AACA;;;AACI,MAAI,CAACA,UAAL,EAAiB;AACb,QAAMC,kBAAkB,GAAGnH,OAAO,CAAC6G,SAAR,CAAkB3G,UAAlB,CAA6B4G,kBAA7B,CAAgDM,OAAhD,CAAwDpH,OAAO,CAAC6B,kBAAR,GAA6B,CAArF,CAA3B;;AACA,QAAIsF,kBAAkB,KAAK,IAA3B,EAAiC;AAC7B;AACAD,MAAAA,UAAU,GAAG,IAAb;AACH,KAHD,MAGO;AACHlH,MAAAA,OAAO,CAAC6B,kBAAR,GAA6B7B,OAAO,CAAC6G,SAAR,CAAkB3G,UAAlB,CAA6B4G,kBAA7B,CAAgDC,OAA7E;;AAEA,UAAMM,eAAqC,GAAGrH,OAAO,CAAC6G,SAAR,CAAkB3G,UAAlB,CACzC4G,kBADyC,CAEzCQ,iBAFyC,CAEvBH,kBAFuB,CAA9C;;AAIA,UAAMI,iBAAiB,GAAG,sCACtBvH,OADsB,EAEtBqH,eAFsB,CAA1B;;AAIA,UAAIE,iBAAiB,CAACC,iBAAtB,EAAyC;AACrC;AACAN,QAAAA,UAAU,GAAG,IAAb;AACH,OAHD,MAGO,IAAIK,iBAAiB,CAACE,OAAtB,EAA+B;AAClC;AACA/C,QAAAA,GAAG,GAAG,IAAN,CAFkC,CAEtB;;AACZ1E,QAAAA,OAAO,CAACqC,cAAR,CAAuBkF,iBAAiB,CAACG,UAAzC;AACH;AACJ;AACJ,GAlD0D,CAsD3D;;;AACA,MAAIR,UAAJ,EAAgB;AACZ;AACA,QAAMS,WAAmB,GAAI3H,OAAD,CAAiBE,UAAjB,CAA4B4G,kBAA5B,CAA+CC,OAA3E;AACA,WAAO/G,OAAO,CAACiD,iBAAR,GACFE,IADE,CACG,UAAAb,aAAa,EAAI;AACnBtC,MAAAA,OAAO,CAAC6B,kBAAR,GAA6B8F,WAA7B;;AACA,UAAI,CAAC3H,OAAO,CAAC4B,OAAT,IAAoB,CAAC,+BAAUU,aAAV,EAAyBtC,OAAO,CAAC4B,OAAR,CAAgBc,QAAzC,CAAzB,EAA6E;AACzEgC,QAAAA,GAAG,GAAG,IAAN,CADyE,CAC7D;;AACZ1E,QAAAA,OAAO,CAACqC,cAAR,CAAuBC,aAAvB;AACH;;AACD,aAAOoC,GAAP;AACH,KARE,CAAP;AASH;;AACD,SAAOG,OAAO,CAAC+C,OAAR,CAAgBlD,GAAhB,CAAP,CApE2D,CAoE9B;AAChC;;AA4CM,SAASvE,kBAAT,CACHiC,WADG,EAEHxB,KAFG,EAGW;AACd,MACIA,KAAK,CAAC2E,KAAN,KAAgB,CAAhB,IACA,CAAC3E,KAAK,CAACyE,IADP,IAEAzE,KAAK,CAACyF,QAFN,IAGAwB,MAAM,CAACC,IAAP,CAAYlH,KAAK,CAACyF,QAAlB,EAA4BJ,MAA5B,KAAuC,CAHvC,IAIArF,KAAK,CAACyF,QAAN,CAAejE,WAAf,CALJ,EAME;AACE,QAAI,OAAOxB,KAAK,CAACyF,QAAN,CAAejE,WAAf,CAAP,KAAuC,QAA3C,EAAqD;AACjD,aAAOxB,KAAK,CAACyF,QAAN,CAAejE,WAAf,CAAP;AACH,KAFD,MAEO,IACHyF,MAAM,CAACC,IAAP,CAAYlH,KAAK,CAACyF,QAAN,CAAejE,WAAf,CAAZ,EAAyC6D,MAAzC,KAAoD,CAApD,IACA,OAAOrF,KAAK,CAACyF,QAAN,CAAejE,WAAf,EAA4B2F,GAAnC,KAA2C,QAFxC,EAGL;AACE,aAAOnH,KAAK,CAACyF,QAAN,CAAejE,WAAf,EAA4B2F,GAAnC;AACH;AACJ;;AACD,SAAO,KAAP;AACH;;AAIM,SAASC,YAAT,CAAsBC,GAAtB,EAAyC;AAC5C,SAAOA,GAAG,YAAYhH,WAAtB;AACH","sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport {\n    BehaviorSubject,\n    firstValueFrom,\n    Observable,\n    merge\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    startWith,\n    distinctUntilChanged,\n    shareReplay\n} from 'rxjs/operators';\nimport {\n    sortObject,\n    stringifyFilter,\n    pluginMissing,\n    clone,\n    overwriteGetterForCaching,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    ensureNotFalsy\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxQueryOP,\n    RxQuery,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxChangeEvent,\n    RxDocumentWriteData,\n    RxDocumentData\n} from './types';\n\nimport {\n    createRxDocuments\n} from './rx-document-prototype-merge';\nimport { calculateNewResults } from './event-reduce';\nimport { triggerCacheReplacement } from './query-cache';\nimport type { QueryMatcher } from 'event-reduce-js';\nimport { normalizeMangoQuery } from './rx-query-helper';\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\nexport class RxQueryBase<\n    RxDocumentType = any,\n    // TODO also pass DocMethods here\n    RxQueryResult = RxDocument<RxDocumentType[]> | RxDocument<RxDocumentType>\n    > {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n\n    // used in the query-cache to determine if the RxQuery can be cleaned up.\n    public _lastEnsureEqual = 0;\n\n    // used by some plugins\n    public other: any = {};\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    public isFindOneByIdQuery: false | string;\n\n\n    /**\n     * Contains the current result state\n     * or null if query has not run yet.\n     */\n    public _result: {\n        docsData: RxDocumentType[];\n        // A key->document map, used in the event reduce optimization.\n        docsDataMap: Map<string, RxDocumentType>;\n        docs: RxDocument<RxDocumentType>[];\n        /**\n         * Time at which the current _result state was created.\n         * Used to determine if the result set has changed since X\n         * so that we do not emit the same result multiple times on subscription.\n         */\n        time: number;\n    } | null = null;\n\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery>,\n        public collection: RxCollection<RxDocumentType>\n    ) {\n        if (!mangoQuery) {\n            this.mangoQuery = _getDefaultQuery();\n        }\n\n        this.isFindOneByIdQuery = isFindOneByIdQuery(\n            this.collection.schema.primaryPath as string,\n            mangoQuery\n        );\n    }\n    get $(): BehaviorSubject<RxQueryResult> {\n        if (!this._$) {\n\n            const results$ = this.collection.$.pipe(\n                /**\n                 * Performance shortcut.\n                 * Changes to local documents are not relevant for the query.\n                 */\n                filter(changeEvent => !changeEvent.isLocal),\n                /**\n                 * Start once to ensure the querying also starts\n                 * when there where no changes.\n                 */\n                startWith(null),\n                // ensure query results are up to date.\n                mergeMap(() => _ensureEqual(this as any)),\n                // use the current result set, written by _ensureEqual().\n                map(() => this._result),\n                // do not run stuff above for each new subscriber, only once.\n                shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n                // do not proceed if result set has not changed.\n                distinctUntilChanged((prev, curr) => {\n                    if (prev && prev.time === ensureNotFalsy(curr).time) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n                /**\n                 * Map the result set to a single RxDocument or an array,\n                 * depending on query type\n                 */\n                map((result) => {\n                    const useResult = ensureNotFalsy(result);\n                    if (this.op === 'findOne') {\n                        // findOne()-queries emit RxDocument or null\n                        return useResult.docs.length === 0 ? null : useResult.docs[0];\n                    } else {\n                        // find()-queries emit RxDocument[]\n                        // Flat copy the array so it wont matter if the user modifies it.\n                        return useResult.docs.slice(0);\n                    }\n                })\n            );\n\n            this._$ = merge<any>(\n                results$,\n                /**\n                 * Also add the refCount$ to the query observable\n                 * to allow us to count the amount of subscribers.\n                 */\n                this.refCount$.pipe(\n                    filter(() => false)\n                )\n            );\n        }\n        return this._$ as any;\n    }\n\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: Observable<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from pouchdb\n     */\n    _setResultData(newResultData: RxDocumentData<RxDocumentType[]>): void {\n        const docs = createRxDocuments<RxDocumentType, {}>(\n            this.collection,\n            newResultData\n        );\n\n        /**\n         * Instead of using the newResultData in the result cache,\n         * we directly use the objects that are stored in the RxDocument\n         * to ensure we do not store the same data twice and fill up the memory.\n         */\n        const primPath = this.collection.schema.primaryPath;\n        const docsDataMap = new Map();\n        const docsData = docs.map(doc => {\n            const docData: RxDocumentType = doc._dataSync$.getValue() as any;\n            const id: string = docData[primPath] as any;\n            docsDataMap.set(id, docData);\n            return docData;\n        });\n\n        this._result = {\n            docsData,\n            docsDataMap,\n            docs,\n            time: now()\n        }\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    _execOverDatabase(): Promise<RxDocumentData<RxDocumentType>[]> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n        const docsPromise = queryCollection<RxDocumentType>(this as any);\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocumentType>>;\n    public exec(): Promise<RxQueryResult>;\n    public exec(throwIfMissing?: boolean): Promise<any> {\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of the RxStorage,\n         * will be thrown at this execution context and not in the background.\n         */\n        return _ensureEqual(this)\n            .then(() => firstValueFrom(this.$))\n            .then(result => {\n                if (!result && throwIfMissing) {\n                    throw newRxError('QU10', {\n                        collection: this.collection.name,\n                        query: this.mangoQuery,\n                        op: this.op\n                    });\n                } else {\n                    return result;\n                }\n            });\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocumentType>> {\n        const schema = this.collection.schema.jsonSchema;\n\n\n        /**\n         * Instead of calling this.getPreparedQuery(),\n         * we have to prepare the query for the query matcher\n         * so that it does not contain modifications from the hooks\n         * like the key compression.\n         */\n        const usePreparedQuery = this.collection.database.storage.statics.prepareQuery(\n            schema,\n            normalizeMangoQuery(\n                this.collection.schema.jsonSchema,\n                clone(this.mangoQuery)\n            )\n        );\n\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            this.collection.database.storage.statics.getQueryMatcher(\n                schema,\n                usePreparedQuery\n            )\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj, stringifyFilter);\n        this.toString = () => value;\n        return value;\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocumentType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: normalizeMangoQuery<RxDocumentType>(\n                this.collection.schema.jsonSchema,\n                clone(this.mangoQuery)\n            )\n        };\n        runPluginHooks('prePrepareQuery', hookInput);\n\n        const value = this.collection.database.storage.statics.prepareQuery(\n            this.collection.storageInstance.schema,\n            hookInput.mangoQuery\n        );\n\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     */\n    doesDocumentDataMatch(docData: RxDocumentType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(docData);\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        let ret: any;\n        return this\n            .exec()\n            .then(docs => {\n                ret = docs;\n                if (Array.isArray(docs)) {\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            })\n            .then(() => ret);\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocumentType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocumentType> | keyof RxDocumentType | string): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocumentType>): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n}\n\nexport function _getDefaultQuery(): MangoQuery {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery(\n    op: RxQueryOP,\n    queryObj: MangoQuery,\n    collection: RxCollection\n) {\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection\n    });\n\n    let ret = new RxQueryBase(op, queryObj, collection);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n\n    runPluginHooks('createRxQuery', ret);\n\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery: RxQueryBase): Promise<boolean> {\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual(rxQuery: RxQueryBase): Promise<boolean> {\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happend since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use EventReduce to calculate the new results\n     */\n    if (!mustReExec) {\n        const missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n\n            const runChangeEvents: RxChangeEvent<any>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            const eventReduceResult = calculateNewResults(\n                rxQuery as any,\n                runChangeEvents\n            );\n            if (eventReduceResult.runFullQueryAgain) {\n                // could not calculate the new results, execute must be done\n                mustReExec = true;\n            } else if (eventReduceResult.changed) {\n                // we got the new results, we do not have to re-execute, mustReExec stays false\n                ret = true; // true because results changed\n                rxQuery._setResultData(eventReduceResult.newResults as any);\n            }\n        }\n    }\n\n\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        // counter can change while _execOverDatabase() is running so we save it here\n        const latestAfter: number = (rxQuery as any).collection._changeEventBuffer.counter;\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n                rxQuery._latestChangeEvent = latestAfter;\n                if (!rxQuery._result || !deepEqual(newResultData, rxQuery._result.docsData)) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData as any);\n                }\n                return ret;\n            });\n    }\n    return Promise.resolve(ret); // true if results have changed\n}\n\n/**\n * Runs the query over the storage instance\n * of the collection.\n * Does some optimizations to ensuer findById is used\n * when specific queries are used.\n */\nexport async function queryCollection<RxDocType>(\n    rxQuery: RxQuery<RxDocType> | RxQueryBase<RxDocType>\n): Promise<RxDocumentData<RxDocType>[]> {\n    let docs: RxDocumentData<RxDocType>[] = [];\n    const collection = rxQuery.collection;\n\n    /**\n     * Optimizations shortcut.\n     * If query is find-one-document-by-id,\n     * then we do not have to use the slow query() method\n     * but instead can use findDocumentsById()\n     */\n    if (rxQuery.isFindOneByIdQuery) {\n        const docId = rxQuery.isFindOneByIdQuery;\n        const docsMap = await collection.storageInstance.findDocumentsById([docId], false);\n        const docData = docsMap[docId];\n        if (docData) {\n            docs.push(docData);\n        }\n    } else {\n        const preparedQuery = rxQuery.getPreparedQuery();\n        const queryResult = await collection.storageInstance.query(preparedQuery);\n        docs = queryResult.documents;\n    }\n    return docs;\n\n}\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(\n    primaryPath: string,\n    query: MangoQuery<any>\n): false | string {\n    if (\n        query.limit === 1 &&\n        !query.skip &&\n        query.selector &&\n        Object.keys(query.selector).length === 1 &&\n        query.selector[primaryPath]\n    ) {\n        if (typeof query.selector[primaryPath] === 'string') {\n            return query.selector[primaryPath];\n        } else if (\n            Object.keys(query.selector[primaryPath]).length === 1 &&\n            typeof query.selector[primaryPath].$eq === 'string'\n        ) {\n            return query.selector[primaryPath].$eq;\n        }\n    }\n    return false;\n}\n\n\n\nexport function isInstanceOf(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"file":"rx-query.js"}