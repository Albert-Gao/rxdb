{"version":3,"sources":["../../src/rx-database.ts"],"names":["removeRxDatabase","databaseName","storage","createRxDatabaseStorageInstance","storageInstance","collectionDocs","Promise","all","map","colDoc","key","schema","data","split","collectionName","createStorageInstance","options","multiInstance","remove","prepare","rxDatabase","_prepareBroadcastChannel","INTERNAL_STORAGE_NAME","INTERNAL_STORE_SCHEMA","_removeAllOfCollection","internalStore","docs","relevantDocs","filter","doc","name","writeRows","writeDoc","_deleted","_rev","_meta","lwt","previous","document","bulkWrite","then","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","instanceCreationOptions","password","eventReduce","idleQueue","broadcastChannel","cleanupPolicy","token","_subs","destroyed","collections","eventBulks$","Subject","observable$","pipe","changeEventBulk","events","storageToken","PROMISE_RESOLVE_FALSE","emittedEventBulkIds","ObliviousSet","asRxDatabase","$emit","has","id","add","next","writeToSocket","removeCollectionDoc","_collectionNamePrimary","INTERNAL_CONTEXT_COLLECTION","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Object","entries","forEach","args","rxJsonSchema","crypt","collectionNameWithVersion","collectionDocData","context","schemaHash","hash","jsonSchema","version","_attachments","push","useArgs","assign","database","hookData","putDocsResult","error","_id","docInDb","documentInDb","previousSchemaHash","previousSchema","ret","keys","collection","defineProperty","get","removeCollection","destroyPromise","PROMISE_RESOLVE_VOID","destroy","knownVersions","knownVersionDoc","storageInstances","instance","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","importJSON","_exportedJSON","server","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","complete","sub","unsubscribe","col","close","throwIfDatabaseNameUsed","link","statics","doesBroadcastChangestream","internal","databaseToken","postMessage","addEventListener","databaseStorageToken","createRxDatabase","ignoreDuplicate","localDocuments","overwritable","validatePassword","BroadcastChannel","IdleQueue","creator","isRxDatabase","obj","dbCount"],"mappings":"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","sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\n\nimport type { LeaderElector } from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    ServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    ServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID,\n    getDefaultRevision,\n    createRevision,\n    now\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema, RxSchema\n} from './rx-schema';\nimport { overwritable } from './overwritable';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport {\n    createRxCollectionStorageInstance\n} from './rx-collection-helper';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    InternalStoreCollectionDocType,\n    InternalStoreDocType,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA\n} from './rx-database-internal-store';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals, InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n    constructor(\n        public readonly name: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        public readonly idleQueue: IdleQueue,\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        /**\n         * Set if multiInstance: true\n         * This broadcast channel is used to send events to other instances like\n         * other browser tabs or nodejs processes.\n         * We transfer everything in EventBulks because sending many small events has been shown\n         * to be performance expensive.\n         */\n        public readonly broadcastChannel?: BroadcastChannel<RxChangeEventBulk<any>>,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             */\n            this.storageToken = ensureStorageTokenExists(this.asRxDatabase);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public readonly token: string = randomCouchString(10);\n    public _subs: Subscription[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     * \n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n\n        // write to socket to inform other instances about the change\n        writeToSocket(this as any, changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        writeDoc._rev = createRevision(writeDoc, doc);\n        writeDoc._meta = { lwt: now() };\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }]);\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        Object.entries(collectionCreators).forEach(([name, args]) => {\n            const collectionName: keyof CreatedCollections = name as any;\n            const rxJsonSchema = (args as RxCollectionCreator).schema;\n            jsonSchemas[collectionName] = rxJsonSchema;\n            const schema = createRxSchema(rxJsonSchema);\n            schemas[collectionName] = schema;\n\n            // crypt=true but no password given\n            if (\n                schema.crypt &&\n                !this.password\n            ) {\n                throw newRxError('DB7', {\n                    name: name as string\n                });\n            }\n\n            // collection already exists\n            if ((this.collections as any)[name]) {\n                throw newRxError('DB3', {\n                    name\n                });\n            }\n\n            const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n            const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                id: getPrimaryKeyOfInternalDocument(\n                    collectionNameWithVersion,\n                    INTERNAL_CONTEXT_COLLECTION\n                ),\n                key: collectionNameWithVersion,\n                context: INTERNAL_CONTEXT_COLLECTION,\n                data: {\n                    name: collectionName as any,\n                    schemaHash: schema.hash,\n                    schema: schema.jsonSchema,\n                    version: schema.version,\n                },\n                _deleted: false,\n                _meta: {\n                    lwt: now()\n                },\n                _rev: getDefaultRevision(),\n                _attachments: {}\n            };\n            collectionDocData._rev = createRevision(collectionDocData);\n            bulkPutDocs.push({\n                document: collectionDocData\n            });\n\n            const useArgs = Object.assign(\n                {},\n                args,\n                {\n                    name: collectionName,\n                    schema,\n                    database: this,\n\n                }\n            );\n\n            // run hooks\n            const hookData: RxCollectionCreator & { name: string; } = flatClone(args) as any;\n            (hookData as any).database = this;\n            hookData.name = name;\n            runPluginHooks('preCreateRxCollection', hookData);\n\n            useArgsByCollectionName[collectionName] = useArgs;\n        });\n\n        const putDocsResult = await this.internalStore.bulkWrite(bulkPutDocs);\n\n        Object.entries(putDocsResult.error).forEach(([_id, error]) => {\n            const docInDb: RxDocumentData<InternalStoreCollectionDocType> = error.documentInDb;\n            const collectionName = docInDb.data.name;\n            const schema = (schemas as any)[collectionName];\n            // collection already exists but has different schema\n            if (docInDb.data.schemaHash !== schema.hash) {\n                throw newRxError('DB6', {\n                    name: collectionName,\n                    previousSchemaHash: docInDb.data.schemaHash,\n                    schemaHash: schema.hash,\n                    previousSchema: docInDb.data.schema,\n                    schema: (jsonSchemas as any)[collectionName].schema\n                });\n            }\n        });\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        let destroyPromise = PROMISE_RESOLVE_VOID;\n        if ((this.collections as any)[collectionName]) {\n            destroyPromise = (this.collections as any)[collectionName].destroy();\n        }\n\n        // remove schemas from internal db\n        return destroyPromise\n            .then(() => _removeAllOfCollection(this as any, collectionName))\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(knownVersionDoc => {\n                            return createRxCollectionStorageInstance(\n                                this.asRxDatabase,\n                                {\n                                    databaseName: this.name,\n                                    collectionName,\n                                    schema: knownVersionDoc.data.schema,\n                                    options: this.instanceCreationOptions,\n                                    multiInstance: this.multiInstance\n                                }\n                            );\n                        })\n                );\n            })\n            // remove the storage instance\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => instance.remove()\n                    )\n                );\n            })\n            .then(() => runAsyncPluginHooks('postRemoveRxCollection', {\n                storage: this.storage,\n                databaseName: this.name,\n                collectionName\n            }))\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * spawn server\n     */\n    server(_options?: ServerOptions): Promise<ServerResponse> {\n        throw pluginMissing('server');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // close broadcastChannel if exists\n            .then(() => this.broadcastChannel ? this.broadcastChannel.close() : null)\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data\n     */\n    remove(): Promise<void> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * writes the changeEvent to the broadcastChannel\n */\nexport function writeToSocket(\n    rxDatabase: RxDatabase,\n    changeEventBulk: RxChangeEventBulk<any>\n): Promise<boolean> {\n    if (rxDatabase.destroyed) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    return rxDatabase.storageToken\n        .then(storageToken => {\n            if (\n                !rxDatabase.storage.statics.doesBroadcastChangestream() &&\n                rxDatabase.multiInstance &&\n                rxDatabase.broadcastChannel &&\n                !changeEventBulk.internal &&\n                rxDatabase.token === changeEventBulk.databaseToken &&\n                storageToken === changeEventBulk.storageToken\n\n            ) {\n                return rxDatabase.broadcastChannel\n                    .postMessage(changeEventBulk)\n                    .then(() => true);\n            } else {\n                return PROMISE_RESOLVE_FALSE;\n            }\n        });\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const docs = await getAllCollectionDocuments(rxDatabase.internalStore, rxDatabase.storage);\n    const relevantDocs = docs\n        .filter((doc) => {\n            const name = doc.key.split('-')[0];\n            return name === collectionName;\n        });\n    const writeRows = relevantDocs.map(doc => {\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        writeDoc._rev = createRevision(writeDoc, doc);\n        writeDoc._meta = { lwt: now() };\n        return {\n            previous: doc,\n            document: writeDoc\n        };\n    });\n    return rxDatabase.internalStore\n        .bulkWrite(writeRows)\n        .then(() => relevantDocs);\n}\n\nfunction _prepareBroadcastChannel<Collections>(rxDatabase: RxDatabase<Collections>): void {\n    // listen to changes from other instances that come over the BroadcastChannel\n    ensureNotFalsy(rxDatabase.broadcastChannel)\n        .addEventListener('message', async (changeEventBulk: RxChangeEventBulk<any>) => {\n            const databaseStorageToken = await rxDatabase.storageToken;\n            if (\n                // not same storage-state\n                changeEventBulk.storageToken !== databaseStorageToken ||\n                // this db instance was sender\n                changeEventBulk.databaseToken === rxDatabase.token\n            ) {\n                return;\n            }\n            rxDatabase.$emit(changeEventBulk);\n        });\n}\n\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nasync function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance\n        }\n    );\n    return internalStore;\n}\n\n/**\n * do the async things for this database\n */\nasync function prepare<Internals, InstanceCreationOptions, Collections>(\n    rxDatabase: RxDatabaseBase<Internals, InstanceCreationOptions, Collections>\n): Promise<void> {\n    if (rxDatabase.multiInstance) {\n        _prepareBroadcastChannel<Collections>(rxDatabase as any);\n    }\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        localDocuments = false\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n\n    if (password) {\n        overwritable.validatePassword(password);\n    }\n\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    let broadcastChannel: BroadcastChannel | undefined;\n    if (multiInstance) {\n        broadcastChannel = new BroadcastChannel(\n            'RxDB:' +\n            name + ':' +\n            'socket'\n        );\n    }\n\n    const idleQueue = new IdleQueue();\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance\n    ).then(storageInstance => {\n        const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n            name,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            idleQueue,\n            storageInstance,\n            broadcastChannel,\n            cleanupPolicy\n        ) as any;\n        return prepare(rxDatabase)\n            .then(() => runAsyncPluginHooks('createRxDatabase', {\n                database: rxDatabase,\n                creator: {\n                    storage,\n                    instanceCreationOptions,\n                    name,\n                    password,\n                    multiInstance,\n                    eventReduce,\n                    ignoreDuplicate,\n                    options,\n                    localDocuments\n                }\n            }))\n            .then(() => rxDatabase);\n    });\n}\n\n/**\n * removes the database and all its known data\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<any> {\n    const storageInstance = await createRxDatabaseStorageInstance(\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        storageInstance,\n        storage\n    );\n\n    await Promise.all(\n        collectionDocs\n            .map(async (colDoc) => {\n                const key = colDoc.key;\n                const schema = colDoc.data.schema;\n                const split = key.split('-');\n                const collectionName = split[0];\n                const storageInstance = storage.createStorageInstance<any>(\n                    {\n                        databaseName,\n                        collectionName,\n                        schema,\n                        options: {},\n                        multiInstance: false\n                    }\n                );\n                await (await storageInstance).remove();\n            })\n    );\n\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    return storageInstance.remove();\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n"],"file":"rx-database.js"}