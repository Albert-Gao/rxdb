{"version":3,"sources":["../../src/event-reduce.ts"],"names":["getSortFieldsOfQuery","primaryKey","query","sort","length","map","part","Object","keys","RXQUERY_QUERY_PARAMS_CACHE","WeakMap","getQueryParams","rxQuery","has","collection","preparedQuery","getPreparedQuery","normalizedMangoQuery","storageInstance","schema","mangoQuery","primaryPath","sortComparator","database","storage","statics","getSortComparator","useSortComparator","docA","docB","sortComparatorData","queryMatcher","getQueryMatcher","useQueryMatcher","doc","queryMatcherData","ret","skip","limit","sortFields","set","get","calculateNewResults","rxChangeEvents","eventReduce","runFullQueryAgain","queryParams","previousResults","_result","docsData","slice","previousResultsMap","docsDataMap","changed","foundNonOptimizeable","find","cE","eventReduceEvent","stateResolveFunctionInput","changeEvent","keyDocumentMap","actionName","newResults"],"mappings":"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","sourcesContent":["import {\n    ActionName,\n    calculateActionName,\n    runAction,\n    QueryParams,\n    QueryMatcher,\n    DeterministicSortComparator,\n    StateResolveFunctionInput\n} from 'event-reduce-js';\nimport type { RxQuery, MangoQuery, RxChangeEvent, RxDocumentWriteData, PreparedQuery } from './types';\nimport { runPluginHooks } from './hooks';\nimport { rxChangeEventToEventReduceChangeEvent } from './rx-change-event';\nimport { clone, ensureNotFalsy } from './util';\nimport { normalizeMangoQuery } from './rx-query-helper';\n\nexport type EventReduceResultNeg = {\n    runFullQueryAgain: true,\n};\nexport type EventReduceResultPos<RxDocumentType> = {\n    runFullQueryAgain: false,\n    changed: boolean,\n    newResults: RxDocumentType[];\n};\nexport type EventReduceResult<RxDocumentType> = EventReduceResultNeg | EventReduceResultPos<RxDocumentType>;\n\n\nexport function getSortFieldsOfQuery<RxDocType>(\n    primaryKey: keyof RxDocType,\n    query: MangoQuery<RxDocType>\n): (string | keyof RxDocType)[] {\n    if (!query.sort || query.sort.length === 0) {\n        return [primaryKey];\n    } else {\n        return query.sort.map(part => Object.keys(part)[0]);\n    }\n}\n\n\n\nexport const RXQUERY_QUERY_PARAMS_CACHE: WeakMap<RxQuery, QueryParams<any>> = new WeakMap();\nexport function getQueryParams<RxDocType>(\n    rxQuery: RxQuery<RxDocType>\n): QueryParams<RxDocType> {\n    if (!RXQUERY_QUERY_PARAMS_CACHE.has(rxQuery)) {\n        const collection = rxQuery.collection;\n        const preparedQuery: PreparedQuery<RxDocType> = rxQuery.getPreparedQuery();\n        const normalizedMangoQuery = normalizeMangoQuery(\n            collection.storageInstance.schema,\n            clone(rxQuery.mangoQuery)\n        );\n        const primaryKey = collection.schema.primaryPath;\n\n        /**\n         * Create a custom sort comparator\n         * that uses the hooks to ensure\n         * we send for example compressed documents to be sorted by compressed queries.\n         */\n        const sortComparator = collection.database.storage.statics.getSortComparator(\n            collection.storageInstance.schema,\n            preparedQuery\n        );\n\n        const useSortComparator: DeterministicSortComparator<RxDocType> = (docA: RxDocType, docB: RxDocType) => {\n            const sortComparatorData = {\n                docA,\n                docB,\n                rxQuery\n            };\n            runPluginHooks('preSortComparator', sortComparatorData);\n            return sortComparator(sortComparatorData.docA, sortComparatorData.docB);\n        };\n\n        /**\n         * Create a custom query matcher\n         * that uses the hooks to ensure\n         * we send for example compressed documents to match compressed queries.\n         */\n        const queryMatcher = collection.database.storage.statics.getQueryMatcher(\n            collection.storageInstance.schema,\n            preparedQuery\n        );\n        const useQueryMatcher: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocumentWriteData<RxDocType>) => {\n            const queryMatcherData = {\n                doc,\n                rxQuery\n            };\n            runPluginHooks('preQueryMatcher', queryMatcherData);\n\n            return queryMatcher(queryMatcherData.doc);\n        };\n\n\n        const ret: QueryParams<any> = {\n            primaryKey: rxQuery.collection.schema.primaryPath as any,\n            skip: normalizedMangoQuery.skip,\n            limit: normalizedMangoQuery.limit,\n            sortFields: getSortFieldsOfQuery(primaryKey, normalizedMangoQuery) as string[],\n            sortComparator: useSortComparator,\n            queryMatcher: useQueryMatcher\n        };\n        RXQUERY_QUERY_PARAMS_CACHE.set(rxQuery, ret);\n        return ret;\n    } else {\n        return RXQUERY_QUERY_PARAMS_CACHE.get(rxQuery) as QueryParams<RxDocType>;\n    }\n}\n\n\nexport function calculateNewResults<RxDocumentType>(\n    rxQuery: RxQuery<RxDocumentType>,\n    rxChangeEvents: RxChangeEvent<RxDocumentType>[]\n): EventReduceResult<RxDocumentType> {\n    if (!rxQuery.collection.database.eventReduce) {\n        return {\n            runFullQueryAgain: true\n        };\n    }\n    const queryParams = getQueryParams(rxQuery);\n    const previousResults: RxDocumentType[] = ensureNotFalsy(rxQuery._result).docsData.slice(0);\n    const previousResultsMap: Map<string, RxDocumentType> = ensureNotFalsy(rxQuery._result).docsDataMap;\n    let changed: boolean = false;\n\n    const foundNonOptimizeable = rxChangeEvents.find(cE => {\n        const eventReduceEvent = rxChangeEventToEventReduceChangeEvent(cE);\n\n        const stateResolveFunctionInput: StateResolveFunctionInput<RxDocumentType> = {\n            queryParams,\n            changeEvent: eventReduceEvent,\n            previousResults,\n            keyDocumentMap: previousResultsMap\n        }\n\n        const actionName: ActionName = calculateActionName(stateResolveFunctionInput);\n        if (actionName === 'runFullQueryAgain') {\n            return true;\n        } else if (actionName !== 'doNothing') {\n            changed = true;\n            runAction(\n                actionName,\n                queryParams,\n                eventReduceEvent,\n                previousResults,\n                previousResultsMap\n            );\n            return false;\n        }\n    });\n    if (foundNonOptimizeable) {\n        return {\n            runFullQueryAgain: true,\n        };\n    } else {\n        return {\n            runFullQueryAgain: false,\n            changed,\n            newResults: previousResults\n        };\n    }\n}\n"],"file":"event-reduce.js"}