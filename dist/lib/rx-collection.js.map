{"version":3,"sources":["../../src/rx-collection.ts"],"names":["HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","defaultCacheReplacementPolicy","statics","storageInstance","timeouts","Set","destroyed","_atomicUpsertQueues","Map","synced","hooks","_subs","_docCache","DocCache","_queryCache","$","_changeEventBuffer","_applyHookFunctions","asRxCollection","prepare","jsonSchema","eventBulks$","pipe","changeEventBulk","collectionName","events","storageToken","databaseStorageToken","subDocs","changeStream","subscribe","eventBulk","id","internal","map","ev","databaseToken","token","$emit","push","cE","isLocal","doc","get","documentId","_handleChangeEvent","PROMISE_RESOLVE_VOID","migrationNeeded","getDataMigrator","migrate","batchSize","migratePromise","insert","json","tempDoc","_isTemporary","data","toJSON","useJson","bulkInsert","writeResult","isError","error","primaryPath","insertResult","success","_dataSync$","next","_data","docsData","length","useDocs","docData","useDocData","Promise","all","_runHooks","then","validate","docs","docsMap","insertRows","set","row","document","Object","assign","_attachments","_meta","_rev","_deleted","bulkWrite","results","successEntries","entries","rxDocuments","key","writtenDocData","primary","values","bulkRemove","ids","findByIds","rxDocumentMap","Array","from","forEach","rxDocument","removeDocs","writeDoc","previous","successIds","keys","bulkUpsert","insertData","useJsonByDocId","ret","slice","writeData","docDataInDb","documentInDb","atomicUpdate","updatedDocs","concat","upsert","result","atomicUpsert","queue","_atomicUpsertEnsureRxDocumentExists","wasInserted","inserted","_atomicUpsertUpdate","find","queryObj","query","findOne","selector","limit","isArray","mustBeQueried","findDocumentsById","findByIds$","currentValue","lastChangeEvent","initialPromise","counter","firstEmitDone","changeEvent","includes","missedChangeEvents","getFrom","newResult","resultHasChanged","rxChangeEvent","docId","op","operation","documentData","has","x","RXJS_SHARE_REPLAY_DEFAULTS","exportJSON","importJSON","_exportedJSON","syncCouchDB","_syncOptions","syncGraphQL","_options","addHook","when","fun","parallel","boundFun","bind","runName","series","getHooks","e","instance","tasks","hook","_runHooksSync","newDocument","filledDocData","fillObjectWithDefaults","promiseWait","time","res","timeout","setTimeout","add","destroy","PROMISE_RESOLVE_FALSE","_onDestroyCall","clearTimeout","sub","unsubscribe","requestIdlePromise","close","collections","remove","removeCollection","_onDestroy","collection","colProto","getPrototypeOf","fnName","_innerDoc","rxCollection","docFromCache","resolve","exec","newDoc","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseName","multiInstance","funName","defineProperty","version","creator","err","reject","isRxCollection","obj"],"mappings":"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","sourcesContent":["import {\n    filter,\n    startWith,\n    mergeMap,\n    shareReplay\n} from 'rxjs/operators';\n\nimport {\n    ucfirst,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    clone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    getDefaultRxDocumentMeta,\n    getDefaultRevision,\n    nextTick\n} from './util';\nimport {\n    fillObjectDataBeforeInsert,\n    createRxCollectionStorageInstance\n} from './rx-collection-helper';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from './rx-query';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport type {\n    DataMigrator\n} from './plugins/migration';\nimport {\n    DocCache\n} from './doc-cache';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks';\n\nimport {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    RxCouchDBReplicationState,\n    MigrationState,\n    SyncOptions,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    SyncOptionsGraphQL,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageBulkWriteError,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxStorageInstanceCreationParams,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk,\n    RxLocalDocumentData,\n    RxDocumentBase\n} from './types';\nimport type {\n    RxGraphQLReplicationState\n} from './plugins/replication-graphql';\n\nimport {\n    RxSchema\n} from './rx-schema';\nimport {\n    createWithConstructor as createRxDocumentWithConstructor,\n    isRxDocument\n} from './rx-document';\n\nimport {\n    createRxDocument,\n    getRxDocumentConstructor\n} from './rx-document-prototype-merge';\nimport {\n    getWrappedStorageInstance,\n    storageChangeEventToRxChangeEvent,\n    throwIfIsStorageWriteError\n} from './rx-storage-helper';\n\nconst HOOKS_WHEN = ['pre', 'post'];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any }\n    > {\n\n\n    /**\n     * Stores all 'normal' documents\n     */\n    public storageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: KeyFunctionMap = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {}\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    get onDestroy() {\n        if (!this._onDestroy) {\n            this._onDestroy = new Promise(res => this._onDestroyCall = res);\n        }\n        return this._onDestroy;\n    }\n\n    public destroyed = false;\n    public _atomicUpsertQueues: Map<string, Promise<any>> = new Map();\n    // defaults\n    public synced: boolean = false;\n    public hooks: any = {};\n    public _subs: Subscription[] = [];\n\n    public _docCache: DocCache<\n        RxDocument<RxDocumentType, OrmMethods>\n    > = new DocCache();\n\n    public _queryCache: QueryCache = createQueryCache();\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer = {} as ChangeEventBuffer;\n\n    /**\n     * returns a promise that is resolved when the collection gets destroyed\n     */\n    private _onDestroy?: Promise<void>;\n\n    private _onDestroyCall?: () => void;\n    public async prepare(): Promise<void> {\n        this.storageInstance = getWrappedStorageInstance(\n            this.database,\n            this.internalStorageInstance,\n            this.schema.jsonSchema\n        );\n\n        this.$ = this.database.eventBulks$.pipe(\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\n            mergeMap(changeEventBulk => changeEventBulk.events),\n        );\n        this._changeEventBuffer = createChangeEventBuffer(this.asRxCollection);\n\n\n        /**\n         * Instead of resolving the EventBulk array here and spit it into\n         * single events, we should fully work with event bulks internally\n         * to save performance.\n         */\n        const databaseStorageToken = await this.database.storageToken;\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: databaseStorageToken,\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    false,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subDocs);\n\n        /**\n         * When a write happens to the collection\n         * we find the changed document in the docCache\n         * and tell it that it has to change its data.\n         */\n        this._subs.push(\n            this.$\n                .pipe(\n                    filter((cE: RxChangeEvent<RxDocumentType>) => !cE.isLocal)\n                )\n                .subscribe(cE => {\n                    // when data changes, send it to RxDocument in docCache\n                    const doc = this._docCache.get(cE.documentId);\n                    if (doc) {\n                        doc._handleChangeEvent(cE);\n                    }\n                })\n        );\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n\n    // overwritte by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration');\n    }\n    getDataMigrator(): DataMigrator {\n        throw pluginMissing('migration');\n    }\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        return this.getDataMigrator().migrate(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getDataMigrator().migratePromise(batchSize);\n    }\n\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        // inserting a temporary-document\n        let tempDoc: RxDocument | null = null;\n        if (isRxDocument(json)) {\n            tempDoc = json as RxDocument;\n            if (!tempDoc._isTemporary) {\n                throw newRxError('COL1', {\n                    data: json\n                });\n            }\n            json = tempDoc.toJSON() as any;\n        }\n\n        const useJson: RxDocumentWriteData<RxDocumentType> = fillObjectDataBeforeInsert(this.schema, json);\n        const writeResult = await this.bulkInsert([useJson]);\n\n        const isError = writeResult.error[0];\n        throwIfIsStorageWriteError(this as any, useJson[this.schema.primaryPath] as any, json, isError);\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\n\n        if (tempDoc) {\n            tempDoc._dataSync$.next(insertResult._data);\n            return tempDoc as any;\n        } else {\n            return insertResult;\n        }\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const useDocs: RxDocumentType[] = docsData.map(docData => {\n            const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n            return useDocData;\n        });\n        const docs = await Promise.all(\n            useDocs.map(doc => {\n                return this._runHooks('pre', 'insert', doc).then(() => {\n                    this.schema.validate(doc);\n                    return doc;\n                });\n            })\n        );\n\n        const docsMap: Map<string, RxDocumentType> = new Map();\n        const insertRows: BulkWriteRow<RxDocumentType>[] = docs.map(doc => {\n            docsMap.set((doc as any)[this.schema.primaryPath] as any, doc);\n            const row: BulkWriteRow<RxDocumentType> = {\n                document: Object.assign(doc, {\n                    _attachments: {},\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _deleted: false\n                })\n            };\n            return row;\n        });\n\n        const results = await this.storageInstance.bulkWrite(insertRows);\n\n        // create documents\n        const successEntries: [string, RxDocumentData<RxDocumentType>][] = Object.entries(results.success);\n        const rxDocuments: any[] = successEntries\n            .map(([key, writtenDocData]) => {\n                const docData: RxDocumentData<RxDocumentType> = getFromMapOrThrow(docsMap, key) as any;\n                docData._rev = writtenDocData._rev;\n\n                const doc = createRxDocument(this as any, docData);\n                return doc;\n            });\n\n\n        await Promise.all(\n            rxDocuments.map(doc => {\n                return this._runHooks(\n                    'post', 'insert',\n                    docsMap.get(doc.primary),\n                    doc\n                );\n            })\n        );\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids);\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = clone(rxDocument.toJSON(true)) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n\n\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        const results = await this.storageInstance.bulkWrite(removeDocs);\n\n        const successIds: string[] = Object.keys(results.success);\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments: any[] = successIds.map(id => {\n            return rxDocumentMap.get(id);\n        });\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    /**\n     * same as bulkInsert but overwrites existing document with same primary\n     */\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<RxDocument<RxDocumentType, OrmMethods>[]> {\n        const insertData: RxDocumentType[] = [];\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\n        docsData.forEach(docData => {\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\n            const primary: string = useJson[this.schema.primaryPath] as any;\n            if (!primary) {\n                throw newRxError('COL3', {\n                    primaryPath: this.schema.primaryPath as string,\n                    data: useJson,\n                    schema: this.schema.jsonSchema\n                });\n            }\n            useJsonByDocId.set(primary, useJson);\n            insertData.push(useJson);\n        });\n\n        const insertResult = await this.bulkInsert(insertData);\n        let ret = insertResult.success.slice(0);\n        const updatedDocs = await Promise.all(\n            insertResult.error.map(error => {\n                const id = error.documentId;\n                const writeData = getFromMapOrThrow(useJsonByDocId, id);\n                const docDataInDb = error.documentInDb;\n                const doc = createRxDocument(this.asRxCollection, docDataInDb);\n                return doc.atomicUpdate(() => writeData);\n            })\n        );\n        ret = ret.concat(updatedDocs);\n        return ret;\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        return this.bulkUpsert([json]).then(result => result[0]);\n    }\n\n    /**\n     * upserts to a RxDocument, uses atomicUpdate if document already exists\n     */\n    atomicUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\n        const primary: string = useJson[this.schema.primaryPath] as any;\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it wont try 2 parallel runs\n        let queue = this._atomicUpsertQueues.get(primary);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue\n            .then(() => _atomicUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted: any) => {\n                if (!wasInserted.inserted) {\n                    return _atomicUpsertUpdate(wasInserted.doc, useJson)\n                        .then(() => wasInserted.doc);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._atomicUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[]\n    > {\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(queryObj?: MangoQueryNoLimit<RxDocumentType> | string): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>\n        | null\n    > {\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries because it will be overwritte\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            (queryObj as any).limit = 1;\n            query = createRxQuery('findOne', queryObj, this as any);\n        }\n\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    async findByIds(\n        ids: string[]\n    ): Promise<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n\n        const ret = new Map();\n        const mustBeQueried: string[] = [];\n\n        // first try to fill from docCache\n        ids.forEach(id => {\n            const doc = this._docCache.get(id);\n            if (doc) {\n                ret.set(id, doc);\n            } else {\n                mustBeQueried.push(id);\n            }\n        });\n\n        // find everything which was not in docCache\n        if (mustBeQueried.length > 0) {\n            const docs = await this.storageInstance.findDocumentsById(mustBeQueried, false);\n            Object.values(docs).forEach(docData => {\n                const doc = createRxDocument<RxDocumentType, OrmMethods>(this as any, docData);\n                ret.set(doc.primary, doc);\n            });\n        }\n        return ret;\n    }\n\n    /**\n     * like this.findByIds but returns an observable\n     * that always emits the current state\n     */\n    findByIds$(\n        ids: string[]\n    ): Observable<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n        let currentValue: Map<string, RxDocument<RxDocumentType, OrmMethods>> | null = null;\n        let lastChangeEvent: number = -1;\n\n        /**\n         * Ensure we do not process events in parallel\n         */\n        let queue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n        const initialPromise = this.findByIds(ids).then(docsMap => {\n            lastChangeEvent = this._changeEventBuffer.counter;\n            currentValue = docsMap;\n        });\n        let firstEmitDone = false;\n\n        return this.$.pipe(\n            startWith(null),\n            /**\n             * Optimization shortcut.\n             * Do not proceed if the emited RxChangeEvent\n             * is not relevant for the query.\n             */\n            filter(changeEvent => {\n                if (\n                    // first emit has no event\n                    changeEvent &&\n                    (\n                        // local documents are not relevant for the query\n                        changeEvent.isLocal ||\n                        // document of the change is not in the ids list.\n                        !ids.includes(changeEvent.documentId)\n                    )\n                ) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }),\n            mergeMap(() => initialPromise),\n            /**\n             * Because shareReplay with refCount: true\n             * will often subscribe/unsusbscribe\n             * we always ensure that we handled all missed events\n             * since the last subscription.\n             */\n            mergeMap(() => {\n                queue = queue.then(async () => {\n                    /**\n                     * We first have to clone the Map\n                     * to ensure we do not create side effects by mutating\n                     * a Map that has already been returned before.\n                     */\n                    currentValue = new Map(ensureNotFalsy(currentValue));\n                    const missedChangeEvents = this._changeEventBuffer.getFrom(lastChangeEvent + 1);\n                    lastChangeEvent = this._changeEventBuffer.counter;\n                    if (missedChangeEvents === null) {\n                        /**\n                         * changeEventBuffer is of bounds -> we must re-execute over the database\n                         * because we cannot calculate the new results just from the events.\n                         */\n                        const newResult = await this.findByIds(ids);\n                        lastChangeEvent = this._changeEventBuffer.counter;\n                        return newResult;\n                    } else {\n                        let resultHasChanged = false;\n                        missedChangeEvents\n                            .forEach(rxChangeEvent => {\n                                const docId = rxChangeEvent.documentId;\n                                if (!ids.includes(docId)) {\n                                    // document is not relevant for the result set\n                                    return;\n                                }\n                                const op = rxChangeEvent.operation;\n                                if (op === 'INSERT' || op === 'UPDATE') {\n                                    resultHasChanged = true;\n                                    const rxDocument = createRxDocument(\n                                        this.asRxCollection,\n                                        rxChangeEvent.documentData\n                                    );\n                                    ensureNotFalsy(currentValue).set(docId, rxDocument);\n                                } else {\n                                    if (ensureNotFalsy(currentValue).has(docId)) {\n                                        resultHasChanged = true;\n                                        ensureNotFalsy(currentValue).delete(docId);\n                                    }\n                                }\n                            });\n\n                        // nothing happened that affects the result -> do not emit\n                        if (!resultHasChanged && firstEmitDone) {\n                            return false as any;\n                        }\n                    }\n                    firstEmitDone = true;\n                    return currentValue;\n                });\n                return queue;\n            }),\n            filter(x => !!x),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n        );\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     * When false or omitted and an interface or type is loaded in this collection,\n     * all base properties of the type are typed as `any` since data could be encrypted.\n     */\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * sync with a CouchDB endpoint\n     */\n    syncCouchDB(_syncOptions: SyncOptions): RxCouchDBReplicationState {\n        throw pluginMissing('replication');\n    }\n\n    /**\n     * sync with a GraphQL endpoint\n     */\n    syncGraphQL(_options: SyncOptionsGraphQL<RxDocumentType>): RxGraphQLReplicationState<RxDocumentType> {\n        throw pluginMissing('replication-graphql');\n    }\n\n    /**\n     * HOOKS\n     */\n    addHook(when: string, key: string, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n\n    getHooks(when: string, key: string) {\n        try {\n            return this.hooks[key][when];\n        } catch (e) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n    }\n\n    _runHooks(when: string, key: string, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: string, key: string, data: any, instance: any) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * creates a temporaryDocument which can be saved later\n     */\n    newDocument(docData: Partial<RxDocumentType> = {}): RxDocument<RxDocumentType, OrmMethods> {\n        const filledDocData: RxDocumentData<RxDocumentType> = this.schema.fillObjectWithDefaults(docData);\n        const doc: any = createRxDocumentWithConstructor(\n            getRxDocumentConstructor(this as any),\n            this as any,\n            filledDocData\n        );\n        doc._isTemporary = true;\n\n        this._runHooksSync('post', 'create', docData, doc);\n        return doc as any;\n    }\n\n    /**\n     * Returns a promise that resolves after the given time.\n     * Ensures that is properly cleans up when the collection is destroyed\n     * so that no running timeouts prevent the exit of the JavaScript process.\n     */\n    promiseWait(time: number): Promise<void> {\n        const ret = new Promise<void>(res => {\n            const timeout = setTimeout(() => {\n                this.timeouts.delete(timeout);\n                res();\n            }, time);\n            this.timeouts.add(timeout);\n        });\n        return ret;\n    }\n\n    async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * Settings destroyed = true\n         * must be the first thing to do,\n         * so for example the replication can directly stop\n         * instead of sending requests to a closed storage.\n         */\n        this.destroyed = true;\n\n        if (this._onDestroyCall) {\n            this._onDestroyCall();\n        }\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\n        this._subs.forEach(sub => sub.unsubscribe());\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        /**\n         * First wait until the whole database is idle.\n         * This ensures that the storage does not get closed\n         * while some operation is running.\n         * It is important that we do not intercept a running call\n         * because it might lead to undefined behavior like when a doc is written\n         * but the change is not added to the changes collection.\n         */\n        return this.database.requestIdlePromise()\n            .then(() => this.storageInstance.close())\n            .then(() => {\n                delete this.database.collections[this.name];\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    remove(): Promise<any> {\n        return this.database.removeCollection(this.name);\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _atomicUpsertUpdate<RxDocType>(\n    doc: RxDocumentBase<RxDocType>,\n    json: RxDocumentData<RxDocType>\n): Promise<RxDocumentBase<RxDocType>> {\n    return doc.atomicUpdate((_innerDoc: RxDocumentData<RxDocType>) => {\n        return json;\n    })\n        .then(() => nextTick())\n        .then(() => {\n            return doc;\n        });\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _atomicUpsertEnsureRxDocumentExists(\n    rxCollection: RxCollection,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument,\n        inserted: boolean\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docFromCache = rxCollection._docCache.get(primary);\n    if (docFromCache) {\n        return Promise.resolve({\n            doc: docFromCache,\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        localDocuments = false,\n        cacheReplacementPolicy = defaultCacheReplacementPolicy\n    }: any\n): Promise<RxCollection> {\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstance(\n        database,\n        storageInstanceCreationParams\n    ).then(storageInstance => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstance,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics\n        );\n\n        return collection\n            .prepare()\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', {\n                    collection,\n                    creator: {\n                        name,\n                        schema,\n                        storageInstance,\n                        instanceCreationOptions,\n                        migrationStrategies,\n                        methods,\n                        attachments,\n                        options,\n                        cacheReplacementPolicy,\n                        localDocuments,\n                        statics\n                    }\n                });\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return storageInstance.close()\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"file":"rx-collection.js"}