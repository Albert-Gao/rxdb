{"version":3,"sources":["../../src/rx-query-helper.ts"],"names":["getPrimaryFieldOfPrimaryKey","firstPropertyNameOfObject","flatClone","normalizeMangoQuery","schema","mangoQuery","primaryKey","skip","sort","isPrimaryInSort","find","p","slice","push","index","indexAr","Array","isArray","includes"],"mappings":"AAAA,SAASA,2BAAT,QAA4C,oBAA5C;AAEA,SAASC,yBAAT,EAAoCC,SAApC,QAAqD,QAArD;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CACHC,MADG,EAEHC,UAFG,EAGwB;AAC3B,MAAMC,UAAkB,GAAGN,2BAA2B,CAACI,MAAM,CAACE,UAAR,CAAtD;AACAD,EAAAA,UAAU,GAAGH,SAAS,CAACG,UAAD,CAAtB;;AAEA,MAAI,OAAOA,UAAU,CAACE,IAAlB,KAA2B,QAA/B,EAAyC;AACrCF,IAAAA,UAAU,CAACE,IAAX,GAAkB,CAAlB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,MAAI,CAACF,UAAU,CAACG,IAAhB,EAAsB;AAAA;;AAClBH,IAAAA,UAAU,CAACG,IAAX,GAAkB,kBAAIF,UAAJ,IAAiB,KAAjB,QAAlB;AACH,GAFD,MAEO;AACH,QAAMG,eAAe,GAAGJ,UAAU,CAACG,IAAX,CACnBE,IADmB,CACd,UAAAC,CAAC;AAAA,aAAIV,yBAAyB,CAACU,CAAD,CAAzB,KAAiCL,UAArC;AAAA,KADa,CAAxB;;AAEA,QAAI,CAACG,eAAL,EAAsB;AAAA;;AAClBJ,MAAAA,UAAU,CAACG,IAAX,GAAkBH,UAAU,CAACG,IAAX,CAAgBI,KAAhB,CAAsB,CAAtB,CAAlB;AACAP,MAAAA,UAAU,CAACG,IAAX,CAAgBK,IAAhB,oDAAwBP,UAAxB,IAAqC,KAArC;AACH;AACJ;AAED;AACJ;AACA;AACA;;;AACI,MAAID,UAAU,CAACS,KAAf,EAAsB;AAClB,QAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcZ,UAAU,CAACS,KAAzB,IAAkCT,UAAU,CAACS,KAAX,CAAiBF,KAAjB,CAAuB,CAAvB,CAAlC,GAA8D,CAACP,UAAU,CAACS,KAAZ,CAA9E;;AACA,QAAI,CAACC,OAAO,CAACG,QAAR,CAAiBZ,UAAjB,CAAL,EAAmC;AAC/BS,MAAAA,OAAO,CAACF,IAAR,CAAaP,UAAb;AACH;;AACDD,IAAAA,UAAU,CAACS,KAAX,GAAmBC,OAAnB;AACH;;AAED,SAAOV,UAAP;AACH","sourcesContent":["import { getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport type { FilledMangoQuery, MangoQuery, RxDocumentData, RxJsonSchema } from './types';\nimport { firstPropertyNameOfObject, flatClone } from './util';\n\n/**\n * Normalize the query to ensure we have all fields set\n * and queries that represent the same query logic are detected as equal by the caching.\n */\nexport function normalizeMangoQuery<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    mangoQuery: MangoQuery<RxDocType>\n): FilledMangoQuery<RxDocType> {\n    const primaryKey: string = getPrimaryFieldOfPrimaryKey(schema.primaryKey) as string;\n    mangoQuery = flatClone(mangoQuery);\n\n    if (typeof mangoQuery.skip !== 'number') {\n        mangoQuery.skip = 0;\n    }\n\n    /**\n     * To ensure a deterministic sorting,\n     * we have to ensure the primary key is always part\n     * of the sort query.\n     * Primary sorting is added as last sort parameter,\n     * similiar to how we add the primary key to indexes that do not have it.\n     */\n    if (!mangoQuery.sort) {\n        mangoQuery.sort = [{ [primaryKey]: 'asc' }] as any;\n    } else {\n        const isPrimaryInSort = mangoQuery.sort\n            .find(p => firstPropertyNameOfObject(p) === primaryKey);\n        if (!isPrimaryInSort) {\n            mangoQuery.sort = mangoQuery.sort.slice(0);\n            mangoQuery.sort.push({ [primaryKey]: 'asc' } as any);\n        }\n    }\n\n    /**\n     * Ensure that if an index is specified,\n     * the primaryKey is inside of it.\n     */\n    if (mangoQuery.index) {\n        const indexAr = Array.isArray(mangoQuery.index) ? mangoQuery.index.slice(0) : [mangoQuery.index];\n        if (!indexAr.includes(primaryKey)) {\n            indexAr.push(primaryKey);\n        }\n        mangoQuery.index = indexAr;\n    }\n\n    return mangoQuery as any;\n}\n"],"file":"rx-query-helper.js"}