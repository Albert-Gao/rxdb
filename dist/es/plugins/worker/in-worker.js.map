{"version":3,"sources":["../../../../src/plugins/worker/in-worker.ts"],"names":["expose","getFromMapOrThrow","wrappedWorkerRxStorage","args","nextId","instanceById","Map","exposeMe","createStorageInstance","params","instanceId","storage","instance","set","bulkWrite","documentWrites","findDocumentsById","ids","deleted","query","preparedQuery","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","changeStream","cleanup","minDeletedTime","close","remove"],"mappings":"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","sourcesContent":["/**\n * This file contains everything\n * that is supposed to run inside of the worker.\n */\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxDocumentData,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult\n} from '../../types';\nimport { expose } from 'threads/worker';\nimport { getFromMapOrThrow } from '../../util';\nimport { Observable } from 'rxjs';\n\n\nexport type InWorkerStorage = {\n    createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<number>;\n    bulkWrite<DocumentData>(\n        instanceId: number,\n        documentWrites: BulkWriteRow<DocumentData>[]\n    ): Promise<RxStorageBulkWriteResponse<DocumentData>>;\n    findDocumentsById<DocumentData>(\n        instanceId: number,\n        ids: string[], deleted: boolean\n    ): Promise<{ [documentId: string]: RxDocumentData<DocumentData> }>;\n    query<DocumentData>(\n        instanceId: number,\n        preparedQuery: any\n    ): Promise<RxStorageQueryResult<DocumentData>>;\n    getAttachmentData(\n        instanceId: number,\n        documentId: string,\n        attachmentId: string\n    ): Promise<string>;\n    getChangedDocumentsSince<RxDocType>(\n        instanceId: number,\n        limit: number,\n        checkpoint: any\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: any;\n    }[]>;\n    changeStream<DocumentData>(\n        instanceById: number\n    ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>>>;\n    cleanup(instanceId: number, minDeletedTime: number): Promise<boolean>;\n    close(instanceId: number): Promise<void>;\n    remove(instanceId: number): Promise<void>;\n}\n\nexport function wrappedWorkerRxStorage<T, D>(\n    args: {\n        storage: RxStorage<T, D>\n    }\n) {\n    let nextId = 0;\n    const instanceById: Map<number, any> = new Map();\n\n    const exposeMe: InWorkerStorage = {\n        /**\n         * RxStorageInstance\n         */\n        async createStorageInstance(params) {\n            const instanceId = nextId++;\n            const instance = await args.storage.createStorageInstance(params);\n            instanceById.set(instanceId, instance);\n            return instanceId;\n        },\n        bulkWrite<DocumentData>(\n            instanceId: number,\n            documentWrites: BulkWriteRow<DocumentData>[]\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.bulkWrite(documentWrites);\n        },\n        findDocumentsById<DocumentData>(\n            instanceId: number,\n            ids: string[],\n            deleted: boolean\n        ): Promise<{ [documentId: string]: RxDocumentData<DocumentData> }> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.findDocumentsById(ids, deleted);\n        },\n        query<DocumentData>(\n            instanceId: number,\n            preparedQuery: any\n        ): Promise<RxStorageQueryResult<DocumentData>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.query(preparedQuery);\n        },\n        getAttachmentData(\n            instanceId: number,\n            documentId: string,\n            attachmentId: string\n        ): Promise<string> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getAttachmentData(\n                documentId,\n                attachmentId\n            );\n        },\n        getChangedDocumentsSince<RxDocType>(\n            instanceId: number,\n            limit: number,\n            checkpoint: any\n        ): Promise<{\n            document: RxDocumentData<RxDocType>;\n            checkpoint: any;\n        }[]> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getChangedDocumentsSince(\n                limit,\n                checkpoint\n            );\n        },\n        changeStream<DocumentData>(\n            instanceId: number\n        ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.changeStream();\n        },\n        cleanup(\n            instanceId: number,\n            minDeletedTime: number\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.cleanup(minDeletedTime);\n        },\n        close(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.close();\n        },\n        remove(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.remove();\n        }\n    }\n    expose(exposeMe);\n}\n"],"file":"in-worker.js"}