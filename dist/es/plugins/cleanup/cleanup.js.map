{"version":3,"sources":["../../../../src/plugins/cleanup/cleanup.ts"],"names":["PROMISE_RESOLVE_TRUE","REPLICATION_STATE_BY_COLLECTION","DEFAULT_CLEANUP_POLICY","pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","runCleanupAfterDelete","rxCollection","cleanupPolicy","destroyed","promiseWait","runEach","cleanupRxCollection","rxDatabase","database","storageInstance","hasMore","requestIdlePromise","RXSOTRAGE_CLEANUP_QUEUE","cleanup","minimumDeletedTime","awaitReplicationsInSync","replicationStates","get","Promise","all","map","replicationState","isStopped","awaitInSync","startCleanupForRxCollection","Object","assign","minimumCollectionAge","waitForLeadership"],"mappings":"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","sourcesContent":["import type { RxCleanupPolicy, RxCollection } from '../../types';\nimport { PROMISE_RESOLVE_TRUE } from '../../util';\nimport { REPLICATION_STATE_BY_COLLECTION } from '../replication';\nimport { DEFAULT_CLEANUP_POLICY } from './cleanup-helper';\n\n/**\n * Even on multiple databases,\n * the calls to RxStorage().cleanup()\n * must never run in parallel.\n * The cleanup is a background task which should\n * not affect the performance of other, more important tasks.\n */\nlet RXSOTRAGE_CLEANUP_QUEUE: Promise<boolean> = PROMISE_RESOLVE_TRUE;\n\nexport async function startCleanupForRxCollection(\n    rxCollection: RxCollection\n) {\n    const rxDatabase = rxCollection.database;\n    const cleanupPolicy = Object.assign(\n        {},\n        DEFAULT_CLEANUP_POLICY,\n        rxDatabase.cleanupPolicy ? rxDatabase.cleanupPolicy : {}\n    );\n\n    /**\n     * Wait until minimumDatabaseInstanceAge is reached\n     * or collection is destroyed.\n     */\n    await rxCollection.promiseWait(cleanupPolicy.minimumCollectionAge);\n    if (rxCollection.destroyed) {\n        return;\n    }\n\n    await cleanupPolicy.waitForLeadership ? rxDatabase.waitForLeadership() : PROMISE_RESOLVE_TRUE;\n    if (rxCollection.destroyed) {\n        return;\n    }\n\n    // initially cleanup the collection\n    await cleanupRxCollection(rxCollection, cleanupPolicy);\n\n    /**\n     * Afterwards we listen to deletes\n     * and only re-run the cleanup after\n     * minimumDeletedTime is reached.\n     */\n    await runCleanupAfterDelete(rxCollection, cleanupPolicy);\n}\n\n/**\n * Runs the cleanup for a single RxCollection\n */\nexport async function cleanupRxCollection(\n    rxCollection: RxCollection,\n    cleanupPolicy: RxCleanupPolicy\n) {\n    const rxDatabase = rxCollection.database;\n    const storageInstance = rxCollection.storageInstance;\n\n    // run cleanup() until it returns true\n    let hasMore = true;\n    while (hasMore && !rxCollection.destroyed) {\n        if (cleanupPolicy.awaitReplicationsInSync) {\n            const replicationStates = REPLICATION_STATE_BY_COLLECTION.get(rxCollection);\n            if (replicationStates) {\n                await Promise.all(\n                    replicationStates.map(replicationState => {\n                        if (!replicationState.isStopped()) {\n                            return replicationState.awaitInSync();\n                        }\n                    })\n                );\n            }\n        }\n\n        await rxDatabase.requestIdlePromise();\n        if (rxCollection.destroyed) {\n            return;\n        }\n        RXSOTRAGE_CLEANUP_QUEUE = RXSOTRAGE_CLEANUP_QUEUE\n            .then(() => {\n                if (rxCollection.destroyed) {\n                    return true;\n                }\n                return storageInstance.cleanup(cleanupPolicy.minimumDeletedTime);\n            });\n        hasMore = await RXSOTRAGE_CLEANUP_QUEUE;\n    }\n}\n\nexport async function runCleanupAfterDelete(\n    rxCollection: RxCollection,\n    cleanupPolicy: RxCleanupPolicy\n) {\n    while (!rxCollection.destroyed) {\n        await rxCollection.promiseWait(cleanupPolicy.runEach);\n        if (rxCollection.destroyed) {\n            return;\n        }\n        await cleanupRxCollection(rxCollection, cleanupPolicy);\n    }\n}\n"],"file":"cleanup.js"}