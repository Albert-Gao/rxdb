{"version":3,"sources":["../../../src/plugins/ajv-validate.ts"],"names":["Ajv","newRxError","requestIdleCallbackIfAvailable","VALIDATOR_CACHE","Map","ajv","_getValidator","rxSchema","hash","has","validator","compile","jsonSchema","set","get","validateFullDocumentData","obj","useValidator","isValid","errors","schema","runAfterSchemaCreated","RxDBAjvValidatePlugin","name","rxdb","prototypes","RxSchema","proto","hooks","createRxSchema","after"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,GAAP,MAAgB,KAAhB;AACA,SACIC,UADJ,QAEO,aAFP;AAGA,SACIC,8BADJ,QAEO,SAFP;;AAQA;AACA;AACA;AACA;AACA,IAAMC,eAAiC,GAAG,IAAIC,GAAJ,EAA1C;AAGA,IAAMC,GAAG,GAAG,IAAIL,GAAJ,EAAZ;AAEA;AACA;AACA;;AACA,OAAO,SAASM,aAAT,CACHC,QADG,EAEA;AACH,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;;AACA,MAAI,CAACL,eAAe,CAACM,GAAhB,CAAoBD,IAApB,CAAL,EAAgC;AAC5B,QAAME,SAAS,GAAGL,GAAG,CAACM,OAAJ,CAAYJ,QAAQ,CAACK,UAArB,CAAlB;AACAT,IAAAA,eAAe,CAACU,GAAhB,CAAoBL,IAApB,EAA0BE,SAA1B;AACH;;AACD,SAAOP,eAAe,CAACW,GAAhB,CAAoBN,IAApB,CAAP;AACH;AAED;AACA;AACA;;AACA,SAASO,wBAAT,CAEIC,GAFJ,EAGE;AACE,MAAMC,YAAY,GAAGX,aAAa,CAAC,IAAD,CAAlC;;AACA,MAAMY,OAAO,GAAGD,YAAY,CAACD,GAAD,CAA5B;;AACA,MAAIE,OAAJ,EAAa;AACT,WAAOF,GAAP;AACH,GAFD,MAEO;AACH,UAAMf,UAAU,CAAC,KAAD,EAAQ;AACpBkB,MAAAA,MAAM,EAAEF,YAAY,CAACE,MADD;AAEpBH,MAAAA,GAAG,EAAHA,GAFoB;AAGpBI,MAAAA,MAAM,EAAE,KAAKR;AAHO,KAAR,CAAhB;AAKH;AACJ;;AAED,IAAMS,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACd,QAAD,EAAwB;AAClD;AACAL,EAAAA,8BAA8B,CAAC;AAAA,WAAMI,aAAa,CAACC,QAAD,CAAnB;AAAA,GAAD,CAA9B;AACH,CAHD;;AAOA,OAAO,IAAMe,qBAA+B,GAAG;AAC3CC,EAAAA,IAAI,EAAE,cADqC;AAE3CC,EAAAA,IAAI,EAAE,IAFqC;AAG3CC,EAAAA,UAAU,EAAE;AACR;AACR;AACA;AACQC,IAAAA,QAAQ,EAAE,kBAACC,KAAD,EAAW;AACjBA,MAAAA,KAAK,CAACZ,wBAAN,GAAiCA,wBAAjC;AACH;AANO,GAH+B;AAW3Ca,EAAAA,KAAK,EAAE;AACHC,IAAAA,cAAc,EAAE;AACZC,MAAAA,KAAK,EAAET;AADK;AADb;AAXoC,CAAxC","sourcesContent":["/**\n * this plugin validates documents before they can be inserted into the RxCollection.\n * It's using ajv as jsonschema-validator\n * @link https://github.com/epoberezkin/ajv\n */\nimport Ajv from 'ajv';\nimport {\n    newRxError\n} from '../rx-error';\nimport {\n    requestIdleCallbackIfAvailable\n} from '../util';\nimport {\n    RxSchema\n} from '../rx-schema';\nimport type { RxPlugin } from '../types';\n\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n */\nconst VALIDATOR_CACHE: Map<string, any> = new Map();\n\n\nconst ajv = new Ajv();\n\n/**\n * returns the parsed validator from ajv\n */\nexport function _getValidator(\n    rxSchema: RxSchema\n): any {\n    const hash = rxSchema.hash;\n    if (!VALIDATOR_CACHE.has(hash)) {\n        const validator = ajv.compile(rxSchema.jsonSchema);\n        VALIDATOR_CACHE.set(hash, validator);\n    }\n    return VALIDATOR_CACHE.get(hash);\n}\n\n/**\n * validates the given object against the schema\n */\nfunction validateFullDocumentData(\n    this: RxSchema,\n    obj: any\n) {\n    const useValidator = _getValidator(this);\n    const isValid = useValidator(obj);\n    if (isValid) {\n        return obj;\n    } else {\n        throw newRxError('VD2', {\n            errors: useValidator.errors,\n            obj,\n            schema: this.jsonSchema\n        });\n    }\n}\n\nconst runAfterSchemaCreated = (rxSchema: RxSchema) => {\n    // pre-generate validator-function from the schema\n    requestIdleCallbackIfAvailable(() => _getValidator(rxSchema));\n};\n\n\n\nexport const RxDBAjvValidatePlugin: RxPlugin = {\n    name: 'ajv-validate',\n    rxdb: true,\n    prototypes: {\n        /**\n         * set validate-function for the RxSchema.prototype\n         */\n        RxSchema: (proto) => {\n            proto.validateFullDocumentData = validateFullDocumentData;\n        }\n    },\n    hooks: {\n        createRxSchema: {\n            after: runAfterSchemaCreated\n        }\n    }\n};\n"],"file":"ajv-validate.js"}