{"version":3,"sources":["../../../../src/plugins/dev-mode/check-query.ts"],"names":["deepEqual","newRxError","newRxTypeError","massageSelector","checkQuery","args","isPlainObject","Object","prototype","toString","call","queryObj","op","collection","name","validKeys","keys","forEach","key","includes","checkMangoQuery","schema","rxQuery","jsonSchema","massagedSelector","mangoQuery","selector","schemaTopLevelFields","properties","filter","fieldOrOperator","startsWith","field","query","schemaIndexes","indexes","index","isInSchema","find","schemaIndex"],"mappings":"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","sourcesContent":["import type {\n    RxPluginPreCreateRxQueryArgs,\n    MangoQuery,\n    RxPluginPrePrepareQueryArgs\n} from '../../types';\nimport deepEqual from 'fast-deep-equal';\nimport { newRxError, newRxTypeError } from '../../rx-error';\nimport {\n    massageSelector\n} from 'pouchdb-selector-core';\n\n/**\n * accidentially passing a non-valid object into the query params\n * is very hard to debug especially when queries are observed\n * This is why we do some checks here in dev-mode\n */\nexport function checkQuery(args: RxPluginPreCreateRxQueryArgs) {\n    const isPlainObject = Object.prototype.toString.call(args.queryObj) === '[object Object]';\n    if (!isPlainObject) {\n        throw newRxTypeError('QU11', {\n            op: args.op,\n            collection: args.collection.name,\n            queryObj: args.queryObj\n        });\n    }\n\n    const validKeys: (keyof MangoQuery)[] = [\n        'selector',\n        'limit',\n        'skip',\n        'sort',\n        'index'\n    ];\n    Object.keys(args.queryObj).forEach(key => {\n        if (!(validKeys as string[]).includes(key)) {\n            throw newRxTypeError('QU11', {\n                op: args.op,\n                collection: args.collection.name,\n                queryObj: args.queryObj,\n                key,\n                args: {\n                    validKeys\n                }\n            });\n        }\n    });\n}\n\n\nexport function checkMangoQuery(args: RxPluginPrePrepareQueryArgs) {\n    const schema = args.rxQuery.collection.schema.jsonSchema;\n\n    /**\n     * Ensure that all top level fields are included in the schema.\n     * TODO this check can be augmented to also check sub-fields.\n     */\n    const massagedSelector = massageSelector(args.mangoQuery.selector);\n    const schemaTopLevelFields = Object.keys(schema.properties);\n    Object.keys(massagedSelector)\n        // do not check operators\n        .filter(fieldOrOperator => !fieldOrOperator.startsWith('$'))\n        // skip this check on non-top-level fields\n        .filter(field => !field.includes('.'))\n        .forEach(field => {\n            if (!schemaTopLevelFields.includes(field)) {\n                throw newRxError('QU13', {\n                    schema,\n                    field,\n                    query: args.mangoQuery,\n                });\n            }\n        });\n\n\n    /**\n     * ensure if custom index is set,\n     * it is also defined in the schema\n     */\n    const schemaIndexes = schema.indexes ? schema.indexes : [];\n    const index = args.mangoQuery.index;\n    if (index) {\n        const isInSchema = schemaIndexes.find(schemaIndex => deepEqual(schemaIndex, index));\n        if (!isInSchema) {\n            throw newRxError(\n                'QU12',\n                {\n                    collection: args.rxQuery.collection.name,\n                    query: args.mangoQuery,\n                    schema\n                }\n            );\n        }\n    }\n}\n"],"file":"check-query.js"}