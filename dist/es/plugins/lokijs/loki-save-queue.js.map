{"version":3,"sources":["../../../../src/plugins/lokijs/loki-save-queue.ts"],"names":["PROMISE_RESOLVE_VOID","requestIdlePromise","LokiSaveQueue","lokiDatabase","databaseSettings","writesSinceLastRun","saveQueue","saveQueueC","addWrite","run","adapter","then","writeAmount","Promise","res","rej","saveDatabase","err","autosaveCallback"],"mappings":"AACA,SACIA,oBADJ,EAEIC,kBAFJ,QAGO,YAHP;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAaC,aAAb;AAGI;AACJ;AACA;AACA;AAEI;AAGA,yBACoBC,YADpB,EAEoBC,gBAFpB,EAGE;AAAA,SAbKC,kBAaL,GAbkC,CAalC;AAAA,SAPKC,SAOL,GAPgCN,oBAOhC;AAAA,SALKO,UAKL,GALkB,CAKlB;AAAA,SAFkBJ,YAElB,GAFkBA,YAElB;AAAA,SADkBC,gBAClB,GADkBA,gBAClB;AAED;;AAhBL;;AAAA,SAkBWI,QAlBX,GAkBI,oBAAkB;AACd,SAAKH,kBAAL,GAA0B,KAAKA,kBAAL,GAA0B,CAApD;AACA,SAAKI,GAAL;AACH,GArBL;;AAAA,SAuBWA,GAvBX,GAuBI,eAAa;AAAA;;AACT,SACI;AACA,KAAC,KAAKL,gBAAL,CAAsBM,OAAvB,IACA;AACA,SAAKH,UAAL,GAAkB,CAJtB,EAME;AACE,aAAO,KAAKD,SAAZ;AACH;;AAED,SAAKC,UAAL,GAAkB,KAAKA,UAAL,GAAkB,CAApC;AACA,SAAKD,SAAL,GAAiB,KAAKA,SAAL,CACZK,IADY;AAAA,UACK;AACd;AAChB;AACA;AACA;AACA;AAL8B,+BAMRV,kBAAkB,EANV;AAQd;AACA,cAAI,KAAI,CAACI,kBAAL,KAA4B,CAAhC,EAAmC;AAC/B;AACH;AAED;AAChB;AACA;AACA;AACA;AACA;AACA;;;AAnB8B,iCAoBRJ,kBAAkB,GAAGU,IAArB,CAA0B;AAAA,mBAAMV,kBAAkB,EAAxB;AAAA,WAA1B,CApBQ;AAsBd,gBAAI,KAAI,CAACI,kBAAL,KAA4B,CAAhC,EAAmC;AAC/B;AACH;;AAED,gBAAMO,WAAW,GAAG,KAAI,CAACP,kBAAzB;AACA,YAAA,KAAI,CAACA,kBAAL,GAA0B,CAA1B;AACA,mBAAO,IAAIQ,OAAJ,CAAkB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnC,cAAA,KAAI,CAACZ,YAAL,CAAkBa,YAAlB,CAA+B,UAAAC,GAAG,EAAI;AAClC,oBAAIA,GAAJ,EAAS;AACL,kBAAA,KAAI,CAACZ,kBAAL,GAA0B,KAAI,CAACA,kBAAL,GAA0BO,WAApD;AACAG,kBAAAA,GAAG,CAACE,GAAD,CAAH;AACH,iBAHD,MAGO;AACH,sBAAI,KAAI,CAACb,gBAAL,CAAsBc,gBAA1B,EAA4C;AACxC,oBAAA,KAAI,CAACd,gBAAL,CAAsBc,gBAAtB;AACH;;AACDJ,kBAAAA,GAAG;AACN;AACJ,eAVD;AAWH,aAZM,CAAP;AA5Bc;AAAA;AAyCjB,OA1CY;AAAA;AAAA;AAAA,gBA2CN,YAAM,CAAG,CA3CH,EA4CZH,IA5CY,CA4CP,YAAM;AACR,MAAA,KAAI,CAACJ,UAAL,GAAkB,KAAI,CAACA,UAAL,GAAkB,CAApC;AACH,KA9CY,CAAjB;AA+CA,WAAO,KAAKD,SAAZ;AACH,GAnFL;;AAAA;AAAA","sourcesContent":["import type { LokiDatabaseSettings } from '../../types';\nimport {\n    PROMISE_RESOLVE_VOID,\n    requestIdlePromise\n} from '../../util';\n\n/**\n * The autosave feature of lokijs has strange behaviors\n * and often runs a save in critical moments when other\n * more important tasks are running.\n * So instead we use a custom save queue that ensures we\n * only run loki.saveDatabase() when nothing else is running.\n */\nexport class LokiSaveQueue {\n    public writesSinceLastRun: number = 0;\n\n    /**\n     * Ensures that we do not run multiple saves\n     * in parallel\n     */\n    public saveQueue: Promise<void> = PROMISE_RESOLVE_VOID;\n    // track amount of non-finished save calls in the queue.\n    public saveQueueC = 0;\n\n    constructor(\n        public readonly lokiDatabase: Loki,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n\n    }\n\n    public addWrite() {\n        this.writesSinceLastRun = this.writesSinceLastRun + 1;\n        this.run();\n    }\n\n    public run() {\n        if (\n            // no persistence adapter given, so we do not need to save\n            !this.databaseSettings.adapter ||\n            // do not add more then two pending calls to the queue.\n            this.saveQueueC > 2\n\n        ) {\n            return this.saveQueue;\n        }\n\n        this.saveQueueC = this.saveQueueC + 1;\n        this.saveQueue = this.saveQueue\n            .then(async () => {\n                /**\n                 * Always wait until the JavaScript process is idle.\n                 * This ensures that CPU blocking writes are finished\n                 * before we proceed.\n                 */\n                await requestIdlePromise();\n\n                // no write happened since the last save call\n                if (this.writesSinceLastRun === 0) {\n                    return;\n                }\n\n                /**\n                 * Because LokiJS is a in-memory database,\n                 * we can just wait until the JavaScript process is idle\n                 * via requestIdlePromise(). Then we know that nothing important\n                 * is running at the moment. Also we wait at least wait 100ms\n                 * to ensure it has enough time to free up stuff.\n                 */\n                await requestIdlePromise().then(() => requestIdlePromise());\n\n                if (this.writesSinceLastRun === 0) {\n                    return;\n                }\n\n                const writeAmount = this.writesSinceLastRun;\n                this.writesSinceLastRun = 0;\n                return new Promise<void>((res, rej) => {\n                    this.lokiDatabase.saveDatabase(err => {\n                        if (err) {\n                            this.writesSinceLastRun = this.writesSinceLastRun + writeAmount;\n                            rej(err);\n                        } else {\n                            if (this.databaseSettings.autosaveCallback) {\n                                this.databaseSettings.autosaveCallback();\n                            }\n                            res();\n                        }\n                    });\n                });\n            })\n            .catch(() => { })\n            .then(() => {\n                this.saveQueueC = this.saveQueueC - 1;\n            });\n        return this.saveQueue;\n    }\n}\n"],"file":"loki-save-queue.js"}