{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"names":["Subject","flatClone","now","ensureNotFalsy","isMaybeReadonlyArray","getFromMapOrThrow","getSortDocumentsByLastWriteTimeComparator","RX_META_LWT_MINIMUM","newRxError","closeLokiCollections","getLokiDatabase","OPEN_LOKIJS_STORAGE_INSTANCES","LOKIJS_COLLECTION_DEFAULT_OPTIONS","stripLokiKey","getLokiSortComparator","getLokiLeaderElector","removeLokiLeaderElectorReference","requestRemoteInstance","mustUseLocalState","handleRemoteRequest","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","createLokiStorageInstance","storage","params","databaseSettings","instance","RxStorageInstanceLoki","databaseName","collectionName","schema","internals","options","multiInstance","leaderElector","awaitLeadership","then","closed","localState","createLokiLocalState","databaseState","indices","indexes","forEach","idx","push","primaryKey","lokiCollectionName","version","collectionOptions","Object","assign","unique","collection","database","addCollection","collections","ret","instanceId","changes$","lastChangefeedSequence","primaryPath","add","broadcastChannel","addEventListener","msg","bulkWrite","documentWrites","length","args","success","error","docsInDb","Map","docsInDbWithLokiKey","writeRow","id","document","documentInDb","by","set","categorized","bulkInsertDocs","docId","insert","bulkUpdateDocs","documentInDbWithLokiKey","writeDoc","$loki","update","errors","err","documentId","saveQueue","addWrite","next","eventBulk","findDocumentsById","ids","deleted","_deleted","query","preparedQuery","chain","find","selector","sort","skip","offset","limit","foundDocuments","data","map","lokiDoc","documents","getAttachmentData","_documentId","_attachmentId","Error","getChangedDocumentsSince","checkpoint","sinceLwt","lwt","$gte","changedDocs","first","_meta","shift","slice","docData","changeStream","asObservable","cleanup","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","remove","close","complete","dbState","run","removeCollection","name"],"mappings":"AAAA,SACIA,OADJ,QAGO,MAHP;AAIA,SACIC,SADJ,EAEIC,GAFJ,EAGIC,cAHJ,EAIIC,oBAJJ,EAKIC,iBALJ,EAMIC,yCANJ,EAOIC,mBAPJ,QAQO,YARP;AASA,SAASC,UAAT,QAA2B,gBAA3B;AAkBA,SACIC,oBADJ,EAEIC,eAFJ,EAGIC,6BAHJ,EAIIC,iCAJJ,EAKIC,YALJ,EAMIC,qBANJ,EAOIC,oBAPJ,EAQIC,gCARJ,EASIC,qBATJ,EAUIC,iBAVJ,EAWIC,mBAXJ,QAYO,iBAZP;AAiBA,SAASC,2BAAT,QAA4C,wBAA5C;AACA,SAASC,uBAAT,QAAwC,yBAAxC;AA4TA,WAAsBC,yBAAtB,YAAsBA,yBAAtB,CACIC,OADJ,EAEIC,MAFJ,EAGIC,gBAHJ;AAAA,MAI6C;AAAA;AAYzC,UAAMC,QAAQ,GAAG,IAAIC,qBAAJ,CACbJ,OADa,EAEbC,MAAM,CAACI,YAFM,EAGbJ,MAAM,CAACK,cAHM,EAIbL,MAAM,CAACM,MAJM,EAKbC,UALa,EAMbP,MAAM,CAACQ,OANM,EAObP,gBAPa,CAAjB;AAUA;AACJ;AACA;;AACI,UAAID,MAAM,CAACS,aAAX,EAA0B;AACtB9B,QAAAA,cAAc,CAAC4B,UAAS,CAACG,aAAX,CAAd,CACKC,eADL,GAEKC,IAFL,CAEU,YAAM;AACR,cAAI,CAACV,QAAQ,CAACW,MAAd,EAAsB;AAClBnB,YAAAA,iBAAiB,CAACQ,QAAD,CAAjB;AACH;AACJ,SANL;AAOH;;AAGD,aAAOA,QAAP;AApCyC;;AACzC,QAAMK,UAA+B,GAAG,EAAxC;;AADyC;AAAA,UAGrCP,MAAM,CAACS,aAH8B;AAIrC,YAAMC,aAAa,GAAGnB,oBAAoB,CAACQ,OAAD,EAAUC,MAAM,CAACI,YAAjB,CAA1C;AACAG,QAAAA,UAAS,CAACG,aAAV,GAA0BA,aAA1B;AALqC;AAOrC;AACAH,QAAAA,UAAS,CAACO,UAAV,GAAuBC,oBAAoB,CAACf,MAAD,EAASC,gBAAT,CAA3C;AARqC,+BAS/BM,UAAS,CAACO,UATqB;AAAA;AAAA;;AAAA;AAqC5C,GAzCD;AAAA;AAAA;AAAA;AAzDA,WAAsBC,oBAAtB,YAAsBA,oBAAtB,CACIf,MADJ,EAEIC,gBAFJ;AAAA,MAGmC;AAC/B,QAAI,CAACD,MAAM,CAACQ,OAAZ,EAAqB;AACjBR,MAAAA,MAAM,CAACQ,OAAP,GAAiB,EAAjB;AACH;;AAH8B,2BAKHtB,eAAe,CACvCc,MAAM,CAACI,YADgC,EAEvCH,gBAFuC,CALZ,iBAKzBe,aALyB;AAU/B;AACJ;AACA;AACA;AACI,UAAMC,OAAiB,GAAG,EAA1B;;AACA,UAAIjB,MAAM,CAACM,MAAP,CAAcY,OAAlB,EAA2B;AACvBlB,QAAAA,MAAM,CAACM,MAAP,CAAcY,OAAd,CAAsBC,OAAtB,CAA8B,UAAAC,GAAG,EAAI;AACjC,cAAI,CAACxC,oBAAoB,CAACwC,GAAD,CAAzB,EAAgC;AAC5BH,YAAAA,OAAO,CAACI,IAAR,CAAaD,GAAb;AACH;AACJ,SAJD;AAKH;AACD;AACJ;AACA;AACA;;;AACI,UAAME,UAAU,GAAG1B,2BAA2B,CAACI,MAAM,CAACM,MAAP,CAAcgB,UAAf,CAA9C;AACAL,MAAAA,OAAO,CAACI,IAAR,CAAaC,UAAb;AAEA,UAAMC,kBAAkB,GAAGvB,MAAM,CAACK,cAAP,GAAwB,GAAxB,GAA8BL,MAAM,CAACM,MAAP,CAAckB,OAAvE;AACA,UAAMC,iBAAwE,GAAGC,MAAM,CAACC,MAAP,CAC7E,EAD6E,EAE7EJ,kBAF6E,EAG7E;AACIN,QAAAA,OAAO,EAAEA,OADb;AAEIW,QAAAA,MAAM,EAAE,CAACN,UAAD;AAFZ,OAH6E,EAO7ElC,iCAP6E,CAAjF;AAUA,UAAMyC,UAAsB,GAAGb,aAAa,CAACc,QAAd,CAAuBC,aAAvB,CAC3BR,kBAD2B,EAE3BE,iBAF2B,CAA/B;AAIAT,MAAAA,aAAa,CAACgB,WAAd,CAA0BhC,MAAM,CAACK,cAAjC,IAAmDwB,UAAnD;AACA,UAAMI,GAA2B,GAAG;AAChCjB,QAAAA,aAAa,EAAbA,aADgC;AAEhCa,QAAAA,UAAU,EAAVA;AAFgC,OAApC;AAKA,aAAOI,GAAP;AAlD+B;AAmDlC,GAtDD;AAAA;AAAA;AAAA;AAjQA,IAAIC,UAAU,GAAGxD,GAAG,EAApB;AAEA,WAAayB,qBAAb;AAaI,iCACoBJ,OADpB,EAEoBK,YAFpB,EAGoBC,cAHpB,EAIoBC,MAJpB,EAKoBC,SALpB,EAMoBC,OANpB,EAOoBP,gBAPpB,EAQE;AAAA;;AAAA,SAdMkC,QAcN,GAdsF,IAAI3D,OAAJ,EActF;AAAA,SAbM4D,sBAaN,GAbuC,CAavC;AAAA,SAZcF,UAYd,GAZ2BA,UAAU,EAYrC;AAAA,SAVKrB,MAUL,GAVc,KAUd;AAAA,SAPkBd,OAOlB,GAPkBA,OAOlB;AAAA,SANkBK,YAMlB,GANkBA,YAMlB;AAAA,SALkBC,cAKlB,GALkBA,cAKlB;AAAA,SAJkBC,MAIlB,GAJkBA,MAIlB;AAAA,SAHkBC,SAGlB,GAHkBA,SAGlB;AAAA,SAFkBC,OAElB,GAFkBA,OAElB;AAAA,SADkBP,gBAClB,GADkBA,gBAClB;AACE,SAAKoC,WAAL,GAAmBzC,2BAA2B,CAAC,KAAKU,MAAL,CAAYgB,UAAb,CAA9C;AACAnC,IAAAA,6BAA6B,CAACmD,GAA9B,CAAkC,IAAlC;;AACA,QAAI,KAAK/B,SAAL,CAAeG,aAAnB,EAAkC;AAC9B,WAAKH,SAAL,CAAeG,aAAf,CAA6BC,eAA7B,GAA+CC,IAA/C,CAAoD,YAAM;AACtD;AACAjC,QAAAA,cAAc,CAAC,KAAI,CAAC4B,SAAL,CAAeG,aAAhB,CAAd,CAA6C6B,gBAA7C,CACKC,gBADL,CACsB,SADtB,YACwCC,GADxC;AAAA;AAAA,mCACgD9C,mBAAmB,CAAC,KAAD,EAAO8C,GAAP,CADnE;AAAA;AAAA;AAAA;AAAA;AAEH,OAJD;AAKH;AACJ;;AA/BL;;AAAA,SAiCUC,SAjCV,sBAiCoBC,cAjCpB;AAAA,QAiC+G;AAAA,mBAQ5D,IAR4D;;AACvG,UAAIA,cAAc,CAACC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,cAAM5D,UAAU,CAAC,IAAD,EAAO;AACnB6D,UAAAA,IAAI,EAAE;AACFF,YAAAA,cAAc,EAAdA;AADE;AADa,SAAP,CAAhB;AAKH;;AAPsG,6BAQ9EjD,iBAAiB,QAR6D,iBAQjGoB,UARiG;AASvG,YAAI,CAACA,UAAL,EAAiB;AACb,iBAAOrB,qBAAqB,SAAO,WAAP,EAAoB,CAACkD,cAAD,CAApB,CAA5B;AACH;;AAED,YAAMV,GAA0C,GAAG;AAC/Ca,UAAAA,OAAO,EAAE,EADsC;AAE/CC,UAAAA,KAAK,EAAE;AAFwC,SAAnD;AAKA,YAAMC,QAAoF,GAAG,IAAIC,GAAJ,EAA7F;AACA,YAAMC,mBAGL,GAAG,IAAID,GAAJ,EAHJ;AAIAN,QAAAA,cAAc,CAACxB,OAAf,CAAuB,UAAAgC,QAAQ,EAAI;AAC/B,cAAMC,EAAE,GAAGD,QAAQ,CAACE,QAAT,CAAkB,OAAKhB,WAAvB,CAAX;AACA,cAAMiB,YAAY,GAAGxC,UAAU,CAACe,UAAX,CAAsB0B,EAAtB,CAAyB,OAAKlB,WAA9B,EAA2Ce,EAA3C,CAArB;;AACA,cAAIE,YAAJ,EAAkB;AACdJ,YAAAA,mBAAmB,CAACM,GAApB,CAAwBJ,EAAxB,EAA4BE,YAA5B;AACAN,YAAAA,QAAQ,CAACQ,GAAT,CAAaJ,EAAb,EAAiB/D,YAAY,CAACiE,YAAD,CAA7B;AACH;AACJ,SAPD;AASA,YAAMG,WAAW,GAAG5D,uBAAuB,SAEvC,OAAKwC,WAFkC,EAGvCW,QAHuC,EAIvCL,cAJuC,CAA3C;AAOAc,QAAAA,WAAW,CAACC,cAAZ,CAA2BvC,OAA3B,CAAmC,UAAAgC,QAAQ,EAAI;AAC3C,cAAMQ,KAAK,GAAGR,QAAQ,CAACE,QAAT,CAAkB,OAAKhB,WAAvB,CAAd;AACAvB,UAAAA,UAAU,CAACe,UAAX,CAAsB+B,MAAtB,CAA6BnF,SAAS,CAAC0E,QAAQ,CAACE,QAAV,CAAtC;AACApB,UAAAA,GAAG,CAACa,OAAJ,CAAYa,KAAZ,IAA4BR,QAAQ,CAACE,QAArC;AACH,SAJD;AAKAI,QAAAA,WAAW,CAACI,cAAZ,CAA2B1C,OAA3B,CAAmC,UAAAgC,QAAQ,EAAI;AAC3C,cAAMQ,KAAK,GAAGR,QAAQ,CAACE,QAAT,CAAkB,OAAKhB,WAAvB,CAAd;AACA,cAAMyB,uBAAuB,GAAGjF,iBAAiB,CAACqE,mBAAD,EAAsBS,KAAtB,CAAjD;AACA,cAAMI,QAAa,GAAGrC,MAAM,CAACC,MAAP,CAClB,EADkB,EAElBwB,QAAQ,CAACE,QAFS,EAGlB;AACIW,YAAAA,KAAK,EAAEF,uBAAuB,CAACE;AADnC,WAHkB,CAAtB;AAOAlD,UAAAA,UAAU,CAACe,UAAX,CAAsBoC,MAAtB,CAA6BF,QAA7B;AACA9B,UAAAA,GAAG,CAACa,OAAJ,CAAYa,KAAZ,IAA4BR,QAAQ,CAACE,QAArC;AACH,SAZD;AAaAI,QAAAA,WAAW,CAACS,MAAZ,CAAmB/C,OAAnB,CAA2B,UAAAgD,GAAG,EAAI;AAC9BlC,UAAAA,GAAG,CAACc,KAAJ,CAAUoB,GAAG,CAACC,UAAd,IAA4BD,GAA5B;AACH,SAFD;AAGArD,QAAAA,UAAU,CAACE,aAAX,CAAyBqD,SAAzB,CAAmCC,QAAnC;;AACA,eAAKnC,QAAL,CAAcoC,IAAd,CAAmBd,WAAW,CAACe,SAA/B;;AAEA,eAAOvC,GAAP;AA/DuG;AAgE1G,KAjGL;AAAA;AAAA;AAAA;;AAAA,SAkGUwC,iBAlGV,8BAkG4BC,GAlG5B,EAkG2CC,OAlG3C;AAAA,QAkG2H;AAAA,mBACxE,IADwE;;AAAA,6BAC1FjF,iBAAiB,QADyE,iBAC7GoB,UAD6G;AAEnH,YAAI,CAACA,UAAL,EAAiB;AACb,iBAAOrB,qBAAqB,SAAO,mBAAP,EAA4B,CAACiF,GAAD,EAAMC,OAAN,CAA5B,CAA5B;AACH;;AAED,YAAM1C,GAAwD,GAAG,EAAjE;AACAyC,QAAAA,GAAG,CAACvD,OAAJ,CAAY,UAAAiC,EAAE,EAAI;AACd,cAAME,YAAY,GAAGxC,UAAU,CAACe,UAAX,CAAsB0B,EAAtB,CAAyB,OAAKlB,WAA9B,EAA2Ce,EAA3C,CAArB;;AACA,cACIE,YAAY,KACX,CAACA,YAAY,CAACsB,QAAd,IAA0BD,OADf,CADhB,EAGE;AACE1C,YAAAA,GAAG,CAACmB,EAAD,CAAH,GAAU/D,YAAY,CAACiE,YAAD,CAAtB;AACH;AACJ,SARD;AASA,eAAOrB,GAAP;AAhBmH;AAiBtH,KAnHL;AAAA;AAAA;AAAA;;AAAA,SAoHU4C,KApHV,kBAoHgBC,aApHhB;AAAA,QAoHgG;AAAA,mBAC7C,IAD6C;;AAAA,6BAC/DpF,iBAAiB,QAD8C,iBAClFoB,UADkF;AAExF,YAAI,CAACA,UAAL,EAAiB;AACb,iBAAOrB,qBAAqB,SAAO,OAAP,EAAgB,CAACqF,aAAD,CAAhB,CAA5B;AACH;;AAED,YAAID,KAAK,GAAG/D,UAAU,CAACe,UAAX,CACPkD,KADO,GAEPC,IAFO,CAEFF,aAAa,CAACG,QAFZ,CAAZ;;AAIA,YAAIH,aAAa,CAACI,IAAlB,EAAwB;AACpBL,UAAAA,KAAK,GAAGA,KAAK,CAACK,IAAN,CAAW5F,qBAAqB,CAAC,OAAKgB,MAAN,EAAcwE,aAAd,CAAhC,CAAR;AACH;AAED;AACR;AACA;AACA;;;AACQ,YAAIA,aAAa,CAACK,IAAlB,EAAwB;AACpBN,UAAAA,KAAK,GAAGA,KAAK,CAACO,MAAN,CAAaN,aAAa,CAACK,IAA3B,CAAR;AACH;;AAED,YAAIL,aAAa,CAACO,KAAlB,EAAyB;AACrBR,UAAAA,KAAK,GAAGA,KAAK,CAACQ,KAAN,CAAYP,aAAa,CAACO,KAA1B,CAAR;AACH;;AAED,YAAMC,cAAc,GAAGT,KAAK,CAACU,IAAN,GAAaC,GAAb,CAAiB,UAAAC,OAAO;AAAA,iBAAIpG,YAAY,CAACoG,OAAD,CAAhB;AAAA,SAAxB,CAAvB;AACA,eAAO;AACHC,UAAAA,SAAS,EAAEJ;AADR,SAAP;AA3BwF;AA8B3F,KAlJL;AAAA;AAAA;AAAA;;AAAA,SAmJIK,iBAnJJ,GAmJI,2BAAkBC,WAAlB,EAAuCC,aAAvC,EAA+E;AAC3E,UAAM,IAAIC,KAAJ,CAAU,+EAAV,CAAN;AACH,GArJL;;AAAA,SAwJUC,wBAxJV,qCAyJQV,KAzJR,EA0JQW,UA1JR;AAAA,QA8JS;AAAA,mBAC0C,IAD1C;;AAAA,6BACwBtG,iBAAiB,QADzC,iBACKoB,UADL;AAED,YAAI,CAACA,UAAL,EAAiB;AACb,iBAAOrB,qBAAqB,SAAO,0BAAP,EAAmC,CAAC4F,KAAD,EAAQW,UAAR,CAAnC,CAA5B;AACH;;AAED,YAAMC,QAAQ,GAAGD,UAAU,GAAGA,UAAU,CAACE,GAAd,GAAoBnH,mBAA/C;AACA,YAAM8F,KAAK,GAAG/D,UAAU,CAACe,UAAX,CACTkD,KADS,GAETC,IAFS,CAEJ;AACF,uBAAa;AACTmB,YAAAA,IAAI,EAAEF;AADG;AADX,SAFI,EAOTf,IAPS,CAOJpG,yCAAyC,CAAC,OAAKuD,WAAN,CAPrC,CAAd;AAQA,YAAI+D,WAAW,GAAGvB,KAAK,CAACU,IAAN,EAAlB;AAEA,YAAMc,KAAK,GAAGD,WAAW,CAAC,CAAD,CAAzB;;AACA,YACIJ,UAAU,IACVK,KADA,IAEAA,KAAK,CAAC,OAAKhE,WAAN,CAAL,KAA4B2D,UAAU,CAAC5C,EAFvC,IAGAiD,KAAK,CAACC,KAAN,CAAYJ,GAAZ,KAAoBF,UAAU,CAACE,GAJnC,EAKE;AACEE,UAAAA,WAAW,CAACG,KAAZ;AACH;;AAEDH,QAAAA,WAAW,GAAGA,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqBnB,KAArB,CAAd;AACA,eAAOe,WAAW,CAACZ,GAAZ,CAAgB,UAAAiB,OAAO;AAAA,iBAAK;AAC/BpD,YAAAA,QAAQ,EAAEhE,YAAY,CAACoH,OAAD,CADS;AAE/BT,YAAAA,UAAU,EAAE;AACR5C,cAAAA,EAAE,EAAEqD,OAAO,CAAC,OAAKpE,WAAN,CADH;AAER6D,cAAAA,GAAG,EAAEO,OAAO,CAACH,KAAR,CAAcJ;AAFX;AAFmB,WAAL;AAAA,SAAvB,CAAP;AA5BC;AAmCJ,KAjML;AAAA;AAAA;AAAA;;AAAA,SAmMIQ,YAnMJ,GAmMI,wBAAuF;AACnF,WAAO,KAAKvE,QAAL,CAAcwE,YAAd,EAAP;AACH,GArML;;AAAA,SAuMUC,OAvMV,oBAuMkBC,kBAvMlB;AAAA,QAuMgE;AAAA,oBACb,IADa;;AAAA,6BAC/BnH,iBAAiB,SADc,iBAClDoB,UADkD;AAExD,YAAI,CAACA,UAAL,EAAiB;AACb,iBAAOrB,qBAAqB,UAAO,SAAP,EAAkB,CAACoH,kBAAD,CAAlB,CAA5B;AACH;;AAED,YAAMC,kBAAkB,GAAG,EAA3B;AACA,YAAMC,eAAe,GAAGrI,GAAG,KAAKmI,kBAAhC;AACA,YAAMhC,KAAK,GAAG/D,UAAU,CAACe,UAAX,CACTkD,KADS,GAETC,IAFS,CAEJ;AACFJ,UAAAA,QAAQ,EAAE,IADR;AAEF,uBAAa;AACToC,YAAAA,GAAG,EAAED;AADI;AAFX,SAFI,EAOP1B,KAPO,CAODyB,kBAPC,CAAd;AAQA,YAAMxB,cAAc,GAAGT,KAAK,CAACU,IAAN,EAAvB;;AACA,YAAID,cAAc,CAAC1C,MAAf,GAAwB,CAA5B,EAA+B;AAC3B9B,UAAAA,UAAU,CAACe,UAAX,CAAsBoF,MAAtB,CAA6B3B,cAA7B;AACAxE,UAAAA,UAAU,CAACE,aAAX,CAAyBqD,SAAzB,CAAmCC,QAAnC;AACH;;AAED,eAAOgB,cAAc,CAAC1C,MAAf,KAA0BkE,kBAAjC;AAtBwD;AAuB3D,KA9NL;AAAA;AAAA;AAAA;;AAAA,SAgOUI,KAhOV;AAAA,QAgOiC;AAAA;AAmBzB1H,QAAAA,gCAAgC,CAAC,QAAKO,OAAN,EAAe,QAAKK,YAApB,CAAhC;AAnByB;;AAAA,oBACzB,IADyB;;AACzB,cAAKS,MAAL,GAAc,IAAd;;AACA,cAAKsB,QAAL,CAAcgF,QAAd;;AACAhI,MAAAA,6BAA6B,UAA7B;;AAHyB;AAAA,YAKrB,QAAKoB,SAAL,CAAeO,UALM;AAAA,iCAMI,QAAKP,SAAL,CAAeO,UANnB,iBAMfA,UANe;AAAA,mCAOC5B,eAAe,CACjC,QAAKkB,YAD4B,EAEjC,QAAKH,gBAF4B,CAPhB,iBAOfmH,OAPe;AAAA,qCAWfA,OAAO,CAAC/C,SAAR,CAAkBgD,GAAlB,EAXe;AAAA,uCAYfpI,oBAAoB,CACtB,QAAKmB,YADiB,EAEtB,CACIU,UAAU,CAACe,UADf,CAFsB,CAZL;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAoB5B,KApPL;AAAA;AAAA;AAAA;;AAAA,SAqPUoF,MArPV;AAAA,QAqPkC;AAAA,oBACiB,IADjB;;AAAA,6BACDvH,iBAAiB,SADhB,iBACpBoB,UADoB;AAE1B,YAAI,CAACA,UAAL,EAAiB;AACb,iBAAOrB,qBAAqB,UAAO,QAAP,EAAiB,EAAjB,CAA5B;AACH;;AACDqB,QAAAA,UAAU,CAACE,aAAX,CAAyBc,QAAzB,CAAkCwF,gBAAlC,CAAmDxG,UAAU,CAACe,UAAX,CAAsB0F,IAAzE;AACA,eAAO,QAAKL,KAAL,EAAP;AAN0B;AAO7B,KA5PL;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow,\n    getSortDocumentsByLastWriteTimeComparator,\n    RX_META_LWT_MINIMUM\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk,\n    LokiChangesCheckpoint\n} from '../../types';\nimport {\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    removeLokiLeaderElectorReference,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings\n> {\n\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private lastChangefeedSequence: number = 0;\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey) as any;\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', async (msg) => handleRemoteRequest(this, msg));\n            });\n        }\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[keyof RxDocType], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[keyof RxDocType],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id, documentInDb);\n                docsInDb.set(id, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath,\n            docsInDb,\n            documentWrites\n        );\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.errors.forEach(err => {\n            ret.error[err.documentId] = err;\n        });\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(categorized.eventBulk);\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: LokiChangesCheckpoint\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: LokiChangesCheckpoint;\n    }[]> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocumentsSince', [limit, checkpoint]);\n        }\n\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const query = localState.collection\n            .chain()\n            .find({\n                '_meta.lwt': {\n                    $gte: sinceLwt\n                }\n            })\n            .sort(getSortDocumentsByLastWriteTimeComparator(this.primaryPath as any));\n        let changedDocs = query.data();\n\n        const first = changedDocs[0];\n        if (\n            checkpoint &&\n            first &&\n            first[this.primaryPath] === checkpoint.id &&\n            first._meta.lwt === checkpoint.lwt\n        ) {\n            changedDocs.shift();\n        }\n\n        changedDocs = changedDocs.slice(0, limit);\n        return changedDocs.map(docData => ({\n            document: stripLokiKey(docData),\n            checkpoint: {\n                id: docData[this.primaryPath] as any,\n                lwt: docData._meta.lwt\n            }\n        }));\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection\n                ]\n            );\n        }\n        removeLokiLeaderElectorReference(this.storage, this.databaseName);\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        return this.close();\n    }\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const lokiCollectionName = params.collectionName + '-' + params.schema.version;\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        lokiCollectionName,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        lokiCollectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(storage, params.databaseName);\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    /**\n     * Directly create the localState if the db becomes leader.\n     */\n    if (params.multiInstance) {\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance)\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"file":"rx-storage-instance-loki.js"}