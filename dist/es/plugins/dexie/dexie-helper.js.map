{"version":3,"sources":["../../../../src/plugins/dexie/dexie-helper.ts"],"names":["mingo","Dexie","flatClone","newRxError","getPrimaryFieldOfPrimaryKey","getDocsInDb","internals","docIds","state","Promise","all","dexieTable","bulkGet","dexieDeletedTable","nonDeletedDocsInDb","deletedDocsInDb","docsInDb","slice","forEach","doc","idx","closeDexieDb","statePromise","prevCount","REF_COUNT_PER_DEXIE_DB","get","newCount","dexieDb","close","set","DEXIE_DOCS_TABLE_NAME","DEXIE_DELETED_DOCS_TABLE_NAME","DEXIE_CHANGES_TABLE_NAME","DEXIE_STATE_DB_BY_NAME","Map","getDexieDbWithTables","databaseName","collectionName","settings","schema","primaryPath","primaryKey","dexieDbName","version","useSettings","autoOpen","stores","getDexieStoreSchema","open","dexieChangesTable","sortDirectionToMingo","direction","getDexieSortComparator","_schema","query","mingoSortObject","sort","sortBlock","key","Object","keys","values","fun","a","b","sorted","find","first","next","DEXIE_PIPE_SUBSTITUTE","dexieReplaceIfStartsWithPipe","str","startsWith","withoutFirst","substring","rxJsonSchema","parts","push","indexes","index","arIndex","Array","isArray","map","part","length","join"],"mappings":"AAGA,OAAOA,KAAP,MAAkB,OAAlB;AAOA,SAASC,KAAT,QAAsB,OAAtB;AAEA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,2BAAT,QAA4C,wBAA5C;;AAiLA;AACA;AACA;AACA;AACA,WAAsBC,WAAtB,YAAsBA,WAAtB,CACIC,SADJ,EAEIC,MAFJ,EAGwC;AAAA,yBAChBD,SADgB,iBAC9BE,KAD8B;AAAA,2BAK1BC,OAAO,CAACC,GAAR,CAAY,CAClBF,KAAK,CAACG,UAAN,CAAiBC,OAAjB,CAAyBL,MAAzB,CADkB,EAElBC,KAAK,CAACK,iBAAN,CAAwBD,OAAxB,CAAgCL,MAAhC,CAFkB,CAAZ,CAL0B;AAAA,UAGhCO,kBAHgC;AAAA,UAIhCC,eAJgC;AASpC,UAAMC,QAAQ,GAAGD,eAAe,CAACE,KAAhB,CAAsB,CAAtB,CAAjB;AACAH,MAAAA,kBAAkB,CAACI,OAAnB,CAA2B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrC,YAAID,GAAJ,EAAS;AACLH,UAAAA,QAAQ,CAACI,GAAD,CAAR,GAAgBD,GAAhB;AACH;AACJ,OAJD;AAKA,aAAOH,QAAP;AAfoC;AAAA;AAgBvC,CAnBD;AA3HA,WAAsBK,YAAtB,YAAsBA,YAAtB,CAAmCC,YAAnC,EAAwE;AAAA,yBAChDA,YADgD,iBAC9Dd,KAD8D;AAEpE,QAAMe,SAAS,GAAGC,sBAAsB,CAACC,GAAvB,CAA2BH,YAA3B,CAAlB;AACA,QAAMI,QAAQ,GAAIH,SAAD,GAAqB,CAAtC;;AAHoE,QAIhEG,QAAQ,KAAK,CAJmD;AAKhElB,MAAAA,KAAK,CAACmB,OAAN,CAAcC,KAAd;AACAJ,MAAAA,sBAAsB,UAAtB,CAA8BF,YAA9B;AANgE;AAQhEE,MAAAA,sBAAsB,CAACK,GAAvB,CAA2BP,YAA3B,EAAyCI,QAAzC;AARgE;AAAA;AAUvE,CAVD;AAxDA,OAAO,IAAMI,qBAAqB,GAAG,MAA9B;AACP,OAAO,IAAMC,6BAA6B,GAAG,cAAtC;AACP,OAAO,IAAMC,wBAAwB,GAAG,SAAjC;AAGP,IAAMC,sBAA0D,GAAG,IAAIC,GAAJ,EAAnE;AACA,IAAMV,sBAA0D,GAAG,IAAIU,GAAJ,EAAnE;AACA,OAAO,SAASC,oBAAT,CACHC,YADG,EAEHC,cAFG,EAGHC,QAHG,EAIHC,MAJG,EAKkB;AACrB,MAAMC,WAAmB,GAAGpC,2BAA2B,CAACmC,MAAM,CAACE,UAAR,CAAvD;AACA,MAAMC,WAAW,GAAG,gBAAgBN,YAAhB,GAA+B,IAA/B,GAAsCG,MAAM,CAACI,OAA7C,GAAuD,IAAvD,GAA8DN,cAAlF;AACA,MAAI7B,KAAK,GAAGyB,sBAAsB,CAACR,GAAvB,CAA2BiB,WAA3B,CAAZ;;AACA,MAAI,CAAClC,KAAL,EAAY;AACRA,IAAAA,KAAK,GAAG;AAAA,UAAa;AAAA;;AACjB;AACZ;AACA;AACA;AACA;AACY,YAAMoC,WAAW,GAAG1C,SAAS,CAACoC,QAAD,CAA7B;AACAM,QAAAA,WAAW,CAACC,QAAZ,GAAuB,KAAvB;AACA,YAAMlB,OAAO,GAAG,IAAI1B,KAAJ,CAAUyC,WAAV,EAAuBE,WAAvB,CAAhB;AACAjB,QAAAA,OAAO,CAACgB,OAAR,CAAgB,CAAhB,EAAmBG,MAAnB,oDACKhB,qBADL,IAC6BiB,mBAAmB,CAACR,MAAD,CADhD,wBAEKP,wBAFL,IAEgC,gBAFhC,wBAYKD,6BAZL,IAYqCS,WAAW,GAAG,wBAAd,GAAyCA,WAAzC,GAAuD,GAZ5F;AATiB,+BAuBXb,OAAO,CAACqB,IAAR,EAvBW;AAwBjB,iBAAO;AACHrB,YAAAA,OAAO,EAAPA,OADG;AAEHhB,YAAAA,UAAU,EAAGgB,OAAD,CAAiBG,qBAAjB,CAFT;AAGHjB,YAAAA,iBAAiB,EAAGc,OAAD,CAAiBI,6BAAjB,CAHhB;AAIHkB,YAAAA,iBAAiB,EAAGtB,OAAD,CAAiBK,wBAAjB;AAJhB,WAAP;AAxBiB;AA8BpB,OA9BO;AAAA;AAAA;AAAA,OAAR;;AAgCAC,IAAAA,sBAAsB,CAACJ,GAAvB,CAA2Ba,WAA3B,EAAwClC,KAAxC;AACAgB,IAAAA,sBAAsB,CAACK,GAAvB,CAA2BrB,KAA3B,EAAkC,CAAlC;AACH;;AAED,SAAOA,KAAP;AACH;;AAeD,SAAS0C,oBAAT,CAA8BC,SAA9B,EAAiE;AAC7D,MAAIA,SAAS,KAAK,KAAlB,EAAyB;AACrB,WAAO,CAAP;AACH,GAFD,MAEO;AACH,WAAO,CAAC,CAAR;AACH;AACJ;AAED;AACA;AACA;AACA;;;AACA,OAAO,SAASC,sBAAT,CACHC,OADG,EAEHC,KAFG,EAGmC;AACtC,MAAMC,eAEL,GAAG,EAFJ;;AAIA,MAAI,CAACD,KAAK,CAACE,IAAX,EAAiB;AACb,UAAMrD,UAAU,CAAC,KAAD,EAAQ;AAAEmD,MAAAA,KAAK,EAALA;AAAF,KAAR,CAAhB;AACH;;AAEDA,EAAAA,KAAK,CAACE,IAAN,CAAWtC,OAAX,CAAmB,UAAAuC,SAAS,EAAI;AAC5B,QAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuB,CAAvB,CAAZ;AACA,QAAMN,SAAS,GAAGQ,MAAM,CAACE,MAAP,CAAcJ,SAAd,EAAyB,CAAzB,CAAlB;AACAF,IAAAA,eAAe,CAACG,GAAD,CAAf,GAAuBR,oBAAoB,CAACC,SAAD,CAA3C;AACH,GAJD;;AAMA,MAAMW,GAA2C,GAAG,SAA9CA,GAA8C,CAACC,CAAD,EAAeC,CAAf,EAAgC;AAChF,QAAMC,MAAM,GAAGjE,KAAK,CAACkE,IAAN,CAAW,CAACH,CAAD,EAAIC,CAAJ,CAAX,EAAmB,EAAnB,EAAuBR,IAAvB,CAA4BD,eAA5B,CAAf;AACA,QAAMY,KAAK,GAAGF,MAAM,CAACG,IAAP,EAAd;;AACA,QAAID,KAAK,KAAKJ,CAAd,EAAiB;AACb,aAAO,CAAC,CAAR;AACH,KAFD,MAEO;AACH,aAAO,CAAP;AACH;AACJ,GARD;;AAUA,SAAOD,GAAP;AACH;AAKD;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMO,qBAAqB,GAAG,eAA9B;AACP,OAAO,SAASC,4BAAT,CAAsCC,GAAtC,EAA2D;AAC9D,MAAIA,GAAG,CAACC,UAAJ,CAAe,GAAf,CAAJ,EAAyB;AACrB,QAAMC,YAAY,GAAGF,GAAG,CAACG,SAAJ,CAAc,CAAd,CAArB;AACA,WAAOL,qBAAqB,GAAGI,YAA/B;AACH,GAHD,MAGO;AACH,WAAOF,GAAP;AACH;AACJ;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASxB,mBAAT,CACH4B,YADG,EAEG;AACN,MAAIC,KAAiB,GAAG,EAAxB;AAEA;AACJ;AACA;AACA;;AACI,MAAMnC,UAAkB,GAAGrC,2BAA2B,CAACuE,YAAY,CAAClC,UAAd,CAAtD;AACAmC,EAAAA,KAAK,CAACC,IAAN,CAAW,CAACpC,UAAD,CAAX,EARM,CAUN;;AACA,MAAIkC,YAAY,CAACG,OAAjB,EAA0B;AACtBH,IAAAA,YAAY,CAACG,OAAb,CAAqB5D,OAArB,CAA6B,UAAA6D,KAAK,EAAI;AAClC,UAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA/C;AACAH,MAAAA,KAAK,CAACC,IAAN,CAAWG,OAAX;AACH,KAHD;AAIH,GAhBK,CAkBN;;;AACAJ,EAAAA,KAAK,CAACC,IAAN,CAAW,CAAC,WAAD,EAAcpC,UAAd,CAAX;AAEA;AACJ;AACA;AACA;AACA;;AACImC,EAAAA,KAAK,GAAGA,KAAK,CAACO,GAAN,CAAU,UAAAC,IAAI,EAAI;AACtB,WAAOA,IAAI,CAACD,GAAL,CAAS,UAAAZ,GAAG;AAAA,aAAID,4BAA4B,CAACC,GAAD,CAAhC;AAAA,KAAZ,CAAP;AACH,GAFO,CAAR;AAIA,SAAOK,KAAK,CAACO,GAAN,CAAU,UAAAC,IAAI,EAAI;AACrB,QAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACnB,aAAOD,IAAI,CAAC,CAAD,CAAX;AACH,KAFD,MAEO;AACH,aAAO,MAAMA,IAAI,CAACE,IAAL,CAAU,GAAV,CAAN,GAAuB,GAA9B;AACH;AACJ,GANM,EAMJA,IANI,CAMC,IAND,CAAP;AAOH","sourcesContent":["import type {\n    DeterministicSortComparator\n} from 'event-reduce-js';\nimport mingo from 'mingo';\nimport type {\n    DexieStorageInternals,\n    MangoQuery,\n    RxDocumentData,\n    RxJsonSchema\n} from '../../types';\nimport { Dexie } from 'dexie';\nimport { DexieSettings } from '../../types';\nimport { flatClone } from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\n\nexport const DEXIE_DOCS_TABLE_NAME = 'docs';\nexport const DEXIE_DELETED_DOCS_TABLE_NAME = 'deleted-docs';\nexport const DEXIE_CHANGES_TABLE_NAME = 'changes';\n\n\nconst DEXIE_STATE_DB_BY_NAME: Map<string, DexieStorageInternals> = new Map();\nconst REF_COUNT_PER_DEXIE_DB: Map<DexieStorageInternals, number> = new Map();\nexport function getDexieDbWithTables(\n    databaseName: string,\n    collectionName: string,\n    settings: DexieSettings,\n    schema: RxJsonSchema<any>\n): DexieStorageInternals {\n    const primaryPath: string = getPrimaryFieldOfPrimaryKey(schema.primaryKey) as any;\n    const dexieDbName = 'rxdb-dexie-' + databaseName + '--' + schema.version + '--' + collectionName;\n    let state = DEXIE_STATE_DB_BY_NAME.get(dexieDbName);\n    if (!state) {\n        state = (async () => {\n            /**\n             * IndexedDB was not designed for dynamically adding tables on the fly,\n             * so we create one dexie database per RxDB storage instance.\n             * @link https://github.com/dexie/Dexie.js/issues/684#issuecomment-373224696\n             */\n            const useSettings = flatClone(settings);\n            useSettings.autoOpen = false;\n            const dexieDb = new Dexie(dexieDbName, useSettings);\n            dexieDb.version(1).stores({\n                [DEXIE_DOCS_TABLE_NAME]: getDexieStoreSchema(schema),\n                [DEXIE_CHANGES_TABLE_NAME]: '++sequence, id',\n                /**\n                 * Instead of adding {deleted: false} to every query we run over the document store,\n                 * we move deleted documents into a separate store where they can only be queried\n                 * by primary key.\n                 * This increases performance because it is way easier for the query planner to select\n                 * a good index and we also do not have to add the _deleted field to every index.\n                 * \n                 * We also need the [_meta.lwt+' + primaryPath + '] index for getChangedDocumentsSince()\n                 */\n                [DEXIE_DELETED_DOCS_TABLE_NAME]: primaryPath + ',_meta.lwt,[_meta.lwt+' + primaryPath + ']'\n            });\n            await dexieDb.open();\n            return {\n                dexieDb,\n                dexieTable: (dexieDb as any)[DEXIE_DOCS_TABLE_NAME],\n                dexieDeletedTable: (dexieDb as any)[DEXIE_DELETED_DOCS_TABLE_NAME],\n                dexieChangesTable: (dexieDb as any)[DEXIE_CHANGES_TABLE_NAME]\n            };\n        })();\n\n        DEXIE_STATE_DB_BY_NAME.set(dexieDbName, state);\n        REF_COUNT_PER_DEXIE_DB.set(state, 0);\n    }\n\n    return state;\n}\n\nexport async function closeDexieDb(statePromise: DexieStorageInternals) {\n    const state = await statePromise;\n    const prevCount = REF_COUNT_PER_DEXIE_DB.get(statePromise);\n    const newCount = (prevCount as any) - 1;\n    if (newCount === 0) {\n        state.dexieDb.close();\n        REF_COUNT_PER_DEXIE_DB.delete(statePromise);\n    } else {\n        REF_COUNT_PER_DEXIE_DB.set(statePromise, newCount);\n    }\n}\n\n\nfunction sortDirectionToMingo(direction: 'asc' | 'desc'): 1 | -1 {\n    if (direction === 'asc') {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\n/**\n * This function is at dexie-helper\n * because we need it in multiple places.\n */\nexport function getDexieSortComparator<RxDocType>(\n    _schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: MangoQuery<RxDocType>\n): DeterministicSortComparator<RxDocType> {\n    const mingoSortObject: {\n        [fieldName: string]: 1 | -1;\n    } = {};\n\n    if (!query.sort) {\n        throw newRxError('SNH', { query });\n    }\n\n    query.sort.forEach(sortBlock => {\n        const key = Object.keys(sortBlock)[0];\n        const direction = Object.values(sortBlock)[0];\n        mingoSortObject[key] = sortDirectionToMingo(direction);\n    });\n\n    const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n        const sorted = mingo.find([a, b], {}).sort(mingoSortObject);\n        const first = sorted.next();\n        if (first === a) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    return fun;\n}\n\n\n\n\n/**\n * It is not possible to set non-javascript-variable-syntax\n * keys as IndexedDB indexes. So we have to substitute the pipe-char\n * which comes from the key-compression plugin.\n */\nexport const DEXIE_PIPE_SUBSTITUTE = 'RxDBSubstPIPE';\nexport function dexieReplaceIfStartsWithPipe(str: string): string {\n    if (str.startsWith('|')) {\n        const withoutFirst = str.substring(1);\n        return DEXIE_PIPE_SUBSTITUTE + withoutFirst;\n    } else {\n        return str;\n    }\n}\n\n/**\n * Creates a string that can be used to create the dexie store.\n * @link https://dexie.org/docs/API-Reference#quick-reference\n */\nexport function getDexieStoreSchema(\n    rxJsonSchema: RxJsonSchema<any>\n): string {\n    let parts: string[][] = [];\n\n    /**\n     * First part must be the primary key\n     * @link https://github.com/dexie/Dexie.js/issues/1307#issuecomment-846590912\n     */\n    const primaryKey: string = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey) as string;\n    parts.push([primaryKey]);\n\n    // add other indexes\n    if (rxJsonSchema.indexes) {\n        rxJsonSchema.indexes.forEach(index => {\n            const arIndex = Array.isArray(index) ? index : [index];\n            parts.push(arIndex);\n        });\n    }\n\n    // we also need the _meta.lwt+primaryKey index for the getChangedDocumentsSince() method.\n    parts.push(['_meta.lwt', primaryKey]);\n\n    /**\n     * It is not possible to set non-javascript-variable-syntax\n     * keys as IndexedDB indexes. So we have to substitute the pipe-char\n     * which comes from the key-compression plugin.\n     */\n    parts = parts.map(part => {\n        return part.map(str => dexieReplaceIfStartsWithPipe(str))\n    });\n\n    return parts.map(part => {\n        if (part.length === 1) {\n            return part[0];\n        } else {\n            return '[' + part.join('+') + ']';\n        }\n    }).join(', ');\n}\n\n/**\n * Returns all documents in the database.\n * Non-deleted plus deleted ones.\n */\nexport async function getDocsInDb<RxDocType>(\n    internals: DexieStorageInternals,\n    docIds: string[]\n): Promise<RxDocumentData<RxDocType>[]> {\n    const state = await internals;\n    const [\n        nonDeletedDocsInDb,\n        deletedDocsInDb\n    ] = await Promise.all([\n        state.dexieTable.bulkGet(docIds),\n        state.dexieDeletedTable.bulkGet(docIds)\n    ]);\n    const docsInDb = deletedDocsInDb.slice(0);\n    nonDeletedDocsInDb.forEach((doc, idx) => {\n        if (doc) {\n            docsInDb[idx] = doc;\n        }\n    });\n    return docsInDb;\n}\n"],"file":"dexie-helper.js"}