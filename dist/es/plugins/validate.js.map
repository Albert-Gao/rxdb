{"version":3,"sources":["../../../src/plugins/validate.ts"],"names":["isMyJsonValid","newRxError","requestIdleCallbackIfAvailable","VALIDATOR_CACHE","Map","_getValidator","rxSchema","hash","has","validator","jsonSchema","set","get","validateFullDocumentData","obj","useValidator","isValid","errors","schema","runAfterSchemaCreated","RxDBValidatePlugin","name","rxdb","prototypes","RxSchema","proto","hooks","createRxSchema","after"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,SACIC,UADJ,QAEO,aAFP;AAGA,SACIC,8BADJ,QAEO,SAFP;;AAQA;AACA;AACA;AACA;AACA,IAAMC,eAAiC,GAAG,IAAIC,GAAJ,EAA1C;AAGA;AACA;AACA;;AACA,SAASC,aAAT,CACIC,QADJ,EAEE;AACE,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;;AACA,MAAI,CAACJ,eAAe,CAACK,GAAhB,CAAoBD,IAApB,CAAL,EAAgC;AAC5B,QAAME,SAAS,GAAGT,aAAa,CAACM,QAAQ,CAACI,UAAV,CAA/B;AACAP,IAAAA,eAAe,CAACQ,GAAhB,CAAoBJ,IAApB,EAA0BE,SAA1B;AACH;;AACD,SAAON,eAAe,CAACS,GAAhB,CAAoBL,IAApB,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASM,wBAAT,CAEIC,GAFJ,EAGO;AACH,MAAMC,YAAY,GAAGV,aAAa,CAAC,IAAD,CAAlC;;AACA,MAAMW,OAAO,GAAGD,YAAY,CAACD,GAAD,CAA5B;AACA,MAAIE,OAAJ,EAAa,OAAOF,GAAP,CAAb,KACK;AACD,UAAMb,UAAU,CAAC,KAAD,EAAQ;AACpBgB,MAAAA,MAAM,EAAEF,YAAY,CAACE,MADD;AAEpBH,MAAAA,GAAG,EAAHA,GAFoB;AAGpBI,MAAAA,MAAM,EAAE,KAAKR;AAHO,KAAR,CAAhB;AAKH;AACJ;;AAED,IAAMS,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACb,QAAD,EAAwB;AAClD;AACAJ,EAAAA,8BAA8B,CAAC,YAAM;AACjCG,IAAAA,aAAa,CAACC,QAAD,CAAb;AACH,GAF6B,CAA9B;AAGH,CALD;;AAOA,OAAO,IAAMc,kBAA4B,GAAG;AACxCC,EAAAA,IAAI,EAAE,UADkC;AAExCC,EAAAA,IAAI,EAAE,IAFkC;AAGxCC,EAAAA,UAAU,EAAE;AACR;AACR;AACA;AACA;AACQC,IAAAA,QAAQ,EAAE,kBAACC,KAAD,EAAgB;AACtBA,MAAAA,KAAK,CAACpB,aAAN,GAAsBA,aAAtB;AACAoB,MAAAA,KAAK,CAACZ,wBAAN,GAAiCA,wBAAjC;AACH;AARO,GAH4B;AAaxCa,EAAAA,KAAK,EAAE;AACHC,IAAAA,cAAc,EAAE;AACZC,MAAAA,KAAK,EAAET;AADK;AADb;AAbiC,CAArC","sourcesContent":["/**\n * this plugin validates documents before they can be inserted into the RxCollection.\n * It's using is-my-json-valid as jsonschema-validator\n * @link https://github.com/mafintosh/is-my-json-valid\n */\nimport isMyJsonValid from 'is-my-json-valid';\nimport {\n    newRxError\n} from '../rx-error';\nimport {\n    requestIdleCallbackIfAvailable\n} from '../util';\nimport {\n    RxSchema\n} from '../rx-schema';\nimport type { RxPlugin } from '../types';\n\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n */\nconst VALIDATOR_CACHE: Map<string, any> = new Map();\n\n\n/**\n * returns the parsed validator from is-my-json-valid\n */\nfunction _getValidator(\n    rxSchema: RxSchema\n) {\n    const hash = rxSchema.hash;\n    if (!VALIDATOR_CACHE.has(hash)) {\n        const validator = isMyJsonValid(rxSchema.jsonSchema as any);\n        VALIDATOR_CACHE.set(hash, validator);\n    }\n    return VALIDATOR_CACHE.get(hash);\n}\n\n/**\n * validates the given object against the schema\n * @param  schemaPath if given, the sub-schema will be validated\n * @throws {RxError} if not valid\n */\nfunction validateFullDocumentData(\n    this: RxSchema,\n    obj: any\n): any {\n    const useValidator = _getValidator(this);\n    const isValid = useValidator(obj);\n    if (isValid) return obj;\n    else {\n        throw newRxError('VD2', {\n            errors: useValidator.errors,\n            obj,\n            schema: this.jsonSchema\n        });\n    }\n}\n\nconst runAfterSchemaCreated = (rxSchema: RxSchema) => {\n    // pre-generate the isMyJsonValid-validator from the schema\n    requestIdleCallbackIfAvailable(() => {\n        _getValidator(rxSchema);\n    });\n};\n\nexport const RxDBValidatePlugin: RxPlugin = {\n    name: 'validate',\n    rxdb: true,\n    prototypes: {\n        /**\n         * set validate-function for the RxSchema.prototype\n         * @param prototype of RxSchema\n         */\n        RxSchema: (proto: any) => {\n            proto._getValidator = _getValidator;\n            proto.validateFullDocumentData = validateFullDocumentData;\n        }\n    },\n    hooks: {\n        createRxSchema: {\n            after: runAfterSchemaCreated\n        }\n    }\n};\n"],"file":"validate.js"}