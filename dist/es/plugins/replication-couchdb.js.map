{"version":3,"sources":["../../../src/plugins/replication-couchdb.ts"],"names":["PouchReplicationPlugin","BehaviorSubject","Subject","fromEvent","firstValueFrom","skipUntil","filter","first","mergeMap","promiseWait","flatClone","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_TRUE","newRxError","isInstanceOf","isInstanceOfPouchDB","addPouchPlugin","isRxCollection","runPluginHooks","INTERNAL_POUCHDBS","WeakSet","RxCouchDBReplicationStateBase","collection","syncOptions","_subs","_subjects","change","docs","denied","active","complete","alive","error","canceled","Object","keys","forEach","key","defineProperty","get","asObservable","awaitInitialReplication","options","live","database","name","multiInstance","waitForLeadership","that","complete$","pipe","x","cancel","_pouchEventEmitterObject","sub","unsubscribe","setPouchEventEmitter","rxRepState","evEmitter","push","subscribe","ev","next","observers","length","direction","doc","language","map","hookParams","primaryPath","schema","jsonSchema","info","requestIdlePromise","then","getIsAlive","emitter","state","pull","reduce","acc","val","isAlive","Promise","resolve","createRxCouchDBReplicationState","pouchReplicationFunction","pouch","sync","bind","replicate","to","from","syncCouchDB","remote","retry","query","useOptions","has","storageInstance","internals","syncFun","selector","getPreparedQuery","repState","waitTillRun","destroyed","pouchSync","onDestroy","RxDBReplicationCouchDBPlugin","rxdb","init","prototypes","RxCollection","proto","hooks","createRxCollection","after","args","add"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAOA,sBAAP,MAAmC,qBAAnC;AACA,SACIC,eADJ,EAEIC,OAFJ,EAGIC,SAHJ,EAMIC,cANJ,QAOO,MAPP;AAQA,SACIC,SADJ,EAEIC,MAFJ,EAGIC,KAHJ,EAIIC,QAJJ,QAKO,gBALP;AAOA,SACIC,WADJ,EAEIC,SAFJ,EAGIC,qBAHJ,EAIIC,oBAJJ,QAKO,SALP;AAMA,SACIC,UADJ,QAEO,aAFP;AAGA,SACIC,YAAY,IAAIC,mBADpB,EAEIC,cAFJ,QAGO,oBAHP;AAKA,SACIC,cADJ,QAEO,kBAFP;AAWA,SAASC,cAAT,QAA+B,UAA/B;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,iBAAiB,GAAG,IAAIC,OAAJ,EAA1B;AAEA,WAAaC,6BAAb;AAkBI,yCACoBC,UADpB,EAEoBC,WAFpB,EAGE;AAAA;;AAAA,SApBKC,KAoBL,GApB6B,EAoB7B;AAAA,SAfKC,SAeL,GAfiB;AACfC,MAAAA,MAAM,EAAE,IAAIxB,OAAJ,EADO;AAEfyB,MAAAA,IAAI,EAAE,IAAIzB,OAAJ,EAFS;AAGf0B,MAAAA,MAAM,EAAE,IAAI1B,OAAJ,EAHO;AAIf2B,MAAAA,MAAM,EAAE,IAAI5B,eAAJ,CAAoB,KAApB,CAJO;AAKf6B,MAAAA,QAAQ,EAAE,IAAI7B,eAAJ,CAAoB,KAApB,CALK;AAMf8B,MAAAA,KAAK,EAAE,IAAI9B,eAAJ,CAAoB,KAApB,CANQ;AAOf+B,MAAAA,KAAK,EAAE,IAAI9B,OAAJ;AAPQ,KAejB;AAAA,SALK+B,QAKL,GALyB,KAKzB;AAAA,SAFkBX,UAElB,GAFkBA,UAElB;AAAA,SADkBC,WAClB,GADkBA,WAClB;AACE;AACAW,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAKV,SAAjB,EAA4BW,OAA5B,CAAoC,UAAAC,GAAG,EAAI;AACvCH,MAAAA,MAAM,CAACI,cAAP,CAAsB,KAAtB,EAA4BD,GAAG,GAAG,GAAlC,EAAuC;AACnCE,QAAAA,GAAG,EAAE,eAAY;AACb,iBAAO,KAAKd,SAAL,CAAeY,GAAf,EAAoBG,YAApB,EAAP;AACH;AAHkC,OAAvC;AAKH,KAND;AAOH;;AA9BL;;AAAA,SAgCIC,uBAhCJ,GAgCI,mCAAyC;AACrC,QAAI,KAAKlB,WAAL,CAAiBmB,OAAjB,IAA4B,KAAKnB,WAAL,CAAiBmB,OAAjB,CAAyBC,IAAzD,EAA+D;AAC3D,YAAM9B,UAAU,CAAC,KAAD,EAAQ;AACpB+B,QAAAA,QAAQ,EAAE,KAAKtB,UAAL,CAAgBsB,QAAhB,CAAyBC,IADf;AAEpBvB,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBuB;AAFR,OAAR,CAAhB;AAIH;;AACD,QAAI,KAAKvB,UAAL,CAAgBsB,QAAhB,CAAyBE,aAAzB,IAA0C,KAAKvB,WAAL,CAAiBwB,iBAA/D,EAAkF;AAC9E,YAAMlC,UAAU,CAAC,KAAD,EAAQ;AACpB+B,QAAAA,QAAQ,EAAE,KAAKtB,UAAL,CAAgBsB,QAAhB,CAAyBC,IADf;AAEpBvB,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBuB;AAFR,OAAR,CAAhB;AAIH;;AAED,QAAMG,IAA+B,GAAG,IAAxC;AACA,WAAO5C,cAAc,CACjB4C,IAAI,CAACC,SAAL,CAAeC,IAAf,CACI5C,MAAM,CAAC,UAAA6C,CAAC;AAAA,aAAI,CAAC,CAACA,CAAN;AAAA,KAAF,CADV,CADiB,CAArB;AAKH;AAED;AACJ;AACA;AAxDA;;AAAA,SAyDIC,MAzDJ,GAyDI,kBAA2B;AACvB,QAAI,KAAKnB,QAAT,EAAmB;AACf,aAAOtB,qBAAP;AACH;;AACD,SAAKsB,QAAL,GAAgB,IAAhB;;AACA,QAAI,KAAKoB,wBAAT,EAAmC;AAC/B,WAAKA,wBAAL,CAA8BD,MAA9B;AACH;;AACD,SAAK5B,KAAL,CAAWY,OAAX,CAAmB,UAAAkB,GAAG;AAAA,aAAIA,GAAG,CAACC,WAAJ,EAAJ;AAAA,KAAtB;;AAEA,WAAO3C,oBAAP;AACH,GApEL;;AAAA;AAAA;AAiFA,OAAO,SAAS4C,oBAAT,CACHC,UADG,EAEHC,SAFG,EAGL;AACE,MAAID,UAAU,CAACJ,wBAAf,EAAyC;AACrC,UAAMxC,UAAU,CAAC,KAAD,CAAhB;AACH;;AACD4C,EAAAA,UAAU,CAACJ,wBAAX,GAAsCK,SAAtC,CAJF,CAME;;AACAD,EAAAA,UAAU,CAACjC,KAAX,CAAiBmC,IAAjB,CACIxD,SAAS,CAACuD,SAAD,EAAmB,QAAnB,CAAT,CACKE,SADL,CACe,UAAAC,EAAE,EAAI;AACbJ,IAAAA,UAAU,CAAChC,SAAX,CAAqBC,MAArB,CAA4BoC,IAA5B,CAAiCD,EAAjC;AACH,GAHL,CADJ,EAPF,CAcE;;;AACAJ,EAAAA,UAAU,CAACjC,KAAX,CAAiBmC,IAAjB,CACIxD,SAAS,CAACuD,SAAD,EAAmB,QAAnB,CAAT,CACKE,SADL,CACe,UAAAC,EAAE;AAAA,WAAIJ,UAAU,CAAChC,SAAX,CAAqBG,MAArB,CAA4BkC,IAA5B,CAAiCD,EAAjC,CAAJ;AAAA,GADjB,CADJ,EAfF,CAoBE;;;AACAJ,EAAAA,UAAU,CAACjC,KAAX,CAAiBmC,IAAjB,CACIxD,SAAS,CAACuD,SAAD,EAAmB,QAAnB,CAAT,CACKE,SADL,CACe,UAAAC,EAAE,EAAI;AACb,QACIJ,UAAU,CAAChC,SAAX,CAAqBE,IAArB,CAA0BoC,SAA1B,CAAoCC,MAApC,KAA+C,CAA/C,IACCH,EAAD,CAAYI,SAAZ,KAA0B,MAF9B,EAGE;AAEDJ,IAAAA,EAAD,CAAYnC,MAAZ,CAAmBC,IAAnB,CACKrB,MADL,CACY,UAAC4D,GAAD;AAAA,aAAcA,GAAG,CAACC,QAAJ,KAAiB,OAA/B;AAAA,KADZ,EACoD;AADpD,KAEKC,GAFL,CAES,UAACF,GAAD,EAAc;AACf,UAAMG,UAAU,GAAG;AACfzB,QAAAA,QAAQ,EAAEa,UAAU,CAACnC,UAAX,CAAsBsB,QADjB;AAEf0B,QAAAA,WAAW,EAAEb,UAAU,CAACnC,UAAX,CAAsBiD,MAAtB,CAA6BD,WAF3B;AAGfC,QAAAA,MAAM,EAAEd,UAAU,CAACnC,UAAX,CAAsBiD,MAAtB,CAA6BC,UAHtB;AAIfN,QAAAA,GAAG,EAAHA;AAJe,OAAnB;AAOAhD,MAAAA,cAAc,CAAC,sBAAD,EAAyBmD,UAAzB,CAAd;AACA,aAAOA,UAAU,CAACH,GAAlB;AACH,KAZL,EAYO;AAZP,KAaK9B,OAbL,CAaa,UAAC8B,GAAD;AAAA,aAAcT,UAAU,CAAChC,SAAX,CAAqBE,IAArB,CAA0BmC,IAA1B,CAA+BI,GAA/B,CAAd;AAAA,KAbb;AAcH,GArBL,CADJ,EArBF,CA6CE;;;AACAT,EAAAA,UAAU,CAACjC,KAAX,CAAiBmC,IAAjB,CACIxD,SAAS,CAACuD,SAAD,EAAmB,OAAnB,CAAT,CACKE,SADL,CACe,UAAAC,EAAE;AAAA,WAAIJ,UAAU,CAAChC,SAAX,CAAqBO,KAArB,CAA2B8B,IAA3B,CAAgCD,EAAhC,CAAJ;AAAA,GADjB,CADJ,EA9CF,CAmDE;;;AACAJ,EAAAA,UAAU,CAACjC,KAAX,CAAiBmC,IAAjB,CACIxD,SAAS,CAACuD,SAAD,EAAmB,QAAnB,CAAT,CACKE,SADL,CACe;AAAA,WAAMH,UAAU,CAAChC,SAAX,CAAqBI,MAArB,CAA4BiC,IAA5B,CAAiC,IAAjC,CAAN;AAAA,GADf,CADJ;;AAIAL,EAAAA,UAAU,CAACjC,KAAX,CAAiBmC,IAAjB,CACIxD,SAAS,CAACuD,SAAD,EAAmB,QAAnB,CAAT,CACKE,SADL,CACe;AAAA,WAAMH,UAAU,CAAChC,SAAX,CAAqBI,MAArB,CAA4BiC,IAA5B,CAAiC,KAAjC,CAAN;AAAA,GADf,CADJ,EAxDF,CA6DE;;;AACAL,EAAAA,UAAU,CAACjC,KAAX,CAAiBmC,IAAjB,CACIxD,SAAS,CAACuD,SAAD,EAAmB,UAAnB,CAAT,CACKE,SADL,WACsBa,IADtB;AAAA,QACoC;AAC5B;AAChB;AACA;AACA;AACA;AAL4C,6BAMtBhE,WAAW,CAAC,GAAD,CANW;AAO5BgD,QAAAA,UAAU,CAAChC,SAAX,CAAqBK,QAArB,CAA8BgC,IAA9B,CAAmCW,IAAnC;AAP4B;AAQ/B,KATL;AAAA;AAAA;AAAA,IADJ,EA9DF,CA0EE;;;AACA,MACI,CAAChB,UAAU,CAAClC,WAAX,CAAuBmB,OAAxB,IACA,CAACe,UAAU,CAAClC,WAAX,CAAuBmB,OAAvB,CAA+BC,IAFpC,EAGE;AACEc,IAAAA,UAAU,CAACjC,KAAX,CAAiBmC,IAAjB,CACIF,UAAU,CAACR,SAAX,CAAqBC,IAArB,CACI5C,MAAM,CAAC,UAAA6C,CAAC;AAAA,aAAI,CAAC,CAACA,CAAN;AAAA,KAAF,CADV,EAEI5C,KAAK,EAFT,EAGIC,QAAQ,CAAC,YAAM;AACX,aAAOiD,UAAU,CAACnC,UAAX,CAAsBsB,QAAtB,CACF8B,kBADE,GAEFC,IAFE,CAEG;AAAA,eAAMlB,UAAU,CAACL,MAAX,EAAN;AAAA,OAFH,CAAP;AAGH,KAJO,CAHZ,EAQEQ,SARF,EADJ;AAWH;;AAED,WAASgB,UAAT,CAAoBC,OAApB,EAAoD;AAChD;AACA;AACA,QAAIC,KAAK,GAAGD,OAAO,CAACC,KAApB;;AACA,QAAI,CAACA,KAAL,EAAY;AACRA,MAAAA,KAAK,GAAG,CAACD,OAAO,CAACE,IAAR,CAAaD,KAAd,EAAqBD,OAAO,CAAClB,IAAR,CAAamB,KAAlC,EACHE,MADG,CACI,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClB,YAAID,GAAG,KAAK,QAAR,IAAoBC,GAAG,KAAK,QAAhC,EAA0C,OAAO,QAAP;AAC1C,eAAOD,GAAG,KAAK,SAAR,GAAoBA,GAApB,GAA0BC,GAAjC;AACH,OAJG,EAID,EAJC,CAAR;AAKH,KAV+C,CAYhD;AACA;;;AACA,QAAIJ,KAAK,KAAK,QAAd,EAAwB;AACpB,aAAOrE,WAAW,CAAC,EAAD,CAAX,CAAgBkE,IAAhB,CAAqB;AAAA,eAAMC,UAAU,CAACC,OAAD,CAAhB;AAAA,OAArB,CAAP;AACH;;AAED,QAAMM,OAAO,GAAGL,KAAK,KAAK,SAA1B;AACA,WAAOM,OAAO,CAACC,OAAR,CAAgBF,OAAhB,CAAP;AACH;;AAED1B,EAAAA,UAAU,CAACjC,KAAX,CAAiBmC,IAAjB,CACIxD,SAAS,CAACuD,SAAD,EAAmB,QAAnB,CAAT,CACKR,IADL,CAEQ7C,SAAS,CAACF,SAAS,CAACuD,SAAD,EAAmB,QAAnB,CAAV,CAFjB,EAGME,SAHN,CAGgB,YAAM;AACdgB,IAAAA,UAAU,CAACnB,UAAU,CAACJ,wBAAZ,CAAV,CACKsB,IADL,CACU,UAAAQ,OAAO;AAAA,aAAI1B,UAAU,CAAChC,SAAX,CAAqBM,KAArB,CAA2B+B,IAA3B,CAAgCqB,OAAhC,CAAJ;AAAA,KADjB;AAEH,GANL,CADJ;AASH;AAED,OAAO,SAASG,+BAAT,CACHhE,UADG,EAEHC,WAFG,EAGsB;AACzB,SAAO,IAAIF,6BAAJ,CACHC,UADG,EAEHC,WAFG,CAAP;AAIH;AAED;AACA;AACA;;AACA,OAAO,SAASgE,wBAAT,CACHC,KADG,QAMA;AAAA,uBAHCT,IAGD;AAAA,MAHCA,IAGD,0BAHQ,IAGR;AAAA,uBAFCpB,IAED;AAAA,MAFCA,IAED,0BAFQ,IAER;;AACH,MAAIoB,IAAI,IAAIpB,IAAZ,EAAkB;AACd,WAAO6B,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBF,KAAhB,CAAP;AACH;;AACD,MAAI,CAACT,IAAD,IAASpB,IAAb,EAAmB;AACf,WAAQ6B,KAAK,CAACG,SAAP,CAAyBC,EAAzB,CAA4BF,IAA5B,CAAiCF,KAAjC,CAAP;AACH;;AACD,MAAIT,IAAI,IAAI,CAACpB,IAAb,EAAmB;AACf,WAAQ6B,KAAK,CAACG,SAAP,CAAyBE,IAAzB,CAA8BH,IAA9B,CAAmCF,KAAnC,CAAP;AACH;;AACD,MAAI,CAACT,IAAD,IAAS,CAACpB,IAAd,EAAoB;AAChB,UAAM9C,UAAU,CAAC,KAAD,EAAQ;AACpBkE,MAAAA,IAAI,EAAJA,IADoB;AAEpBpB,MAAAA,IAAI,EAAJA;AAFoB,KAAR,CAAhB;AAIH;AACJ;AAED,OAAO,SAASmC,WAAT,QAca;AAAA;;AAAA,MAXZC,MAWY,SAXZA,MAWY;AAAA,oCAVZhD,iBAUY;AAAA,MAVZA,iBAUY,sCAVQ,IAUR;AAAA,8BATZkB,SASY;AAAA,MATZA,SASY,gCATA;AACRc,IAAAA,IAAI,EAAE,IADE;AAERpB,IAAAA,IAAI,EAAE;AAFE,GASA;AAAA,4BALZjB,OAKY;AAAA,MALZA,OAKY,8BALF;AACNC,IAAAA,IAAI,EAAE,IADA;AAENqD,IAAAA,KAAK,EAAE;AAFD,GAKE;AAAA,MADZC,KACY,SADZA,KACY;AAChB,MAAMC,UAAuD,GAAGxF,SAAS,CAACgC,OAAD,CAAzE,CADgB,CAGhB;;AACA,MACI3B,mBAAmB,CAACgF,MAAD,CAAnB,IACA5E,iBAAiB,CAACgF,GAAlB,CAAsBJ,MAAtB,CAFJ,EAGE;AACE,UAAMlF,UAAU,CAAC,KAAD,EAAQ;AACpB+B,MAAAA,QAAQ,EAAE,KAAKA,QAAL,CAAcC,IADJ;AAEpBvB,MAAAA,UAAU,EAAE,KAAKuB;AAFG,KAAR,CAAhB;AAIH,GAZe,CAchB;;;AACA,MAAI5B,cAAc,CAAC8E,MAAD,CAAlB,EAA4B;AACxBA,IAAAA,MAAM,GAAIA,MAAD,CAAyBK,eAAzB,CAAyCC,SAAzC,CAAmDb,KAA5D;AACH;;AAED,MAAIS,KAAK,IAAI,SAASA,KAAK,CAAC3E,UAA5B,EAAwC;AACpC,UAAMT,UAAU,CAAC,KAAD,EAAQ;AACpBoF,MAAAA,KAAK,EAALA;AADoB,KAAR,CAAhB;AAGH;;AAED,MAAMK,OAAO,GAAGf,wBAAwB,CAAC,KAAKa,eAAL,CAAqBC,SAArB,CAA+Bb,KAAhC,EAAuCvB,SAAvC,CAAxC;;AACA,MAAIgC,KAAJ,EAAW;AACPC,IAAAA,UAAU,CAACK,QAAX,GAAsBN,KAAK,CAACO,gBAAN,GAAyBD,QAA/C;AACH;;AAED,MAAME,QAAa,GAAGnB,+BAA+B,CACjD,IADiD,EAEjD;AACIS,IAAAA,MAAM,EAANA,MADJ;AAEIhD,IAAAA,iBAAiB,EAAjBA,iBAFJ;AAGIkB,IAAAA,SAAS,EAATA,SAHJ;AAIIvB,IAAAA,OAAO,EAAPA,OAJJ;AAKIuD,IAAAA,KAAK,EAALA;AALJ,GAFiD,CAArD,CA9BgB,CAyChB;;AACA,MAAMS,WAAW,GACb3D,iBAAiB,IACjB,KAAKH,QAAL,CAAcE,aAFE,CAEY;AAFZ,IAGhB,KAAKF,QAAL,CAAcG,iBAAd,EAHgB,GAGoBtC,WAAW,CAAC,CAAD,CAHnD;AAICiG,EAAAA,WAAD,CAAqB/B,IAArB,CAA0B,YAAM;AAC5B,QAAI,MAAI,CAACgC,SAAL,IAAkBF,QAAQ,CAACxE,QAA/B,EAAyC;AACrC;AACH;;AACD,QAAM2E,SAAS,GAAGN,OAAO,CAACP,MAAD,EAASG,UAAT,CAAzB;AACA1C,IAAAA,oBAAoB,CAACiD,QAAD,EAAWG,SAAX,CAApB;;AAEA,IAAA,MAAI,CAACC,SAAL,CAAelC,IAAf,CAAoB;AAAA,aAAM8B,QAAQ,CAACrD,MAAT,EAAN;AAAA,KAApB;AACH,GARD;AAUA,SAAOqD,QAAP;AACH;AAID,OAAO,IAAMK,4BAAsC,GAAG;AAClDjE,EAAAA,IAAI,EAAE,qBAD4C;AAElDkE,EAAAA,IAAI,EAAE,IAF4C;AAGlDC,EAAAA,IAHkD,kBAG3C;AACH;AACAhG,IAAAA,cAAc,CAAChB,sBAAD,CAAd;AACH,GANiD;AAOlDiH,EAAAA,UAAU,EAAE;AACRC,IAAAA,YAAY,EAAE,sBAACC,KAAD,EAAgB;AAC1BA,MAAAA,KAAK,CAACrB,WAAN,GAAoBA,WAApB;AACH;AAHO,GAPsC;AAYlDsB,EAAAA,KAAK,EAAE;AACHC,IAAAA,kBAAkB,EAAE;AAChBC,MAAAA,KAAK,EAAE,eAAAC,IAAI,EAAI;AACX,YAAMjG,UAAU,GAAGiG,IAAI,CAACjG,UAAxB;AACA,YAAMkE,KAAkC,GAAGlE,UAAU,CAAC8E,eAAX,CAA2BC,SAA3B,CAAqCb,KAAhF;;AACA,YAAIA,KAAJ,EAAW;AACPrE,UAAAA,iBAAiB,CAACqG,GAAlB,CAAsBlG,UAAU,CAAC8E,eAAX,CAA2BC,SAA3B,CAAqCb,KAA3D;AACH;AACJ;AAPe;AADjB;AAZ2C,CAA/C","sourcesContent":["/**\n * this plugin adds the RxCollection.sync()-function to rxdb\n * you can use it to sync collections with remote or local couchdb-instances\n */\n\nimport PouchReplicationPlugin from 'pouchdb-replication';\nimport {\n    BehaviorSubject,\n    Subject,\n    fromEvent,\n    Subscription,\n    Observable,\n    firstValueFrom\n} from 'rxjs';\nimport {\n    skipUntil,\n    filter,\n    first,\n    mergeMap\n} from 'rxjs/operators';\n\nimport {\n    promiseWait,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_TRUE\n} from '../util';\nimport {\n    newRxError\n} from '../rx-error';\nimport {\n    isInstanceOf as isInstanceOfPouchDB,\n    addPouchPlugin\n} from '../plugins/pouchdb';\n\nimport {\n    isRxCollection\n} from '../rx-collection';\nimport type {\n    RxCollection,\n    PouchSyncHandler,\n    PouchReplicationOptions,\n    RxPlugin,\n    SyncOptions,\n    PouchDBInstance\n} from '../types';\nimport { runPluginHooks } from '../hooks';\n\n/**\n * Contains all pouchdb instances that\n * are used inside of RxDB by collections or databases.\n * Used to ensure the remote of a replication cannot be an internal pouchdb.\n */\nconst INTERNAL_POUCHDBS = new WeakSet();\n\nexport class RxCouchDBReplicationStateBase {\n    public _subs: Subscription[] = [];\n\n    // can be used for debuging or custom event-handling\n    // will be set some time after sync() is called\n    public _pouchEventEmitterObject?: PouchSyncHandler | null;\n    public _subjects = {\n        change: new Subject(),\n        docs: new Subject(),\n        denied: new Subject(),\n        active: new BehaviorSubject(false),\n        complete: new BehaviorSubject(false),\n        alive: new BehaviorSubject(false),\n        error: new Subject(),\n    };\n\n    public canceled: boolean = false;\n\n    constructor(\n        public readonly collection: RxCollection,\n        public readonly syncOptions: SyncOptions\n    ) {\n        // create getters\n        Object.keys(this._subjects).forEach(key => {\n            Object.defineProperty(this, key + '$', {\n                get: function () {\n                    return this._subjects[key].asObservable();\n                }\n            });\n        });\n    }\n\n    awaitInitialReplication(): Promise<void> {\n        if (this.syncOptions.options && this.syncOptions.options.live) {\n            throw newRxError('RC4', {\n                database: this.collection.database.name,\n                collection: this.collection.name\n            });\n        }\n        if (this.collection.database.multiInstance && this.syncOptions.waitForLeadership) {\n            throw newRxError('RC5', {\n                database: this.collection.database.name,\n                collection: this.collection.name\n            });\n        }\n\n        const that: RxCouchDBReplicationState = this as any;\n        return firstValueFrom(\n            that.complete$.pipe(\n                filter(x => !!x)\n            )\n        );\n    }\n\n    /**\n     * Returns false when the replication has already been canceled\n     */\n    cancel(): Promise<boolean> {\n        if (this.canceled) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        this.canceled = true;\n        if (this._pouchEventEmitterObject) {\n            this._pouchEventEmitterObject.cancel();\n        }\n        this._subs.forEach(sub => sub.unsubscribe());\n\n        return PROMISE_RESOLVE_TRUE;\n    }\n}\n\nexport type RxCouchDBReplicationState = RxCouchDBReplicationStateBase & {\n    change$: Observable<any>;\n    docs$: Observable<any>;\n    denied$: Observable<any>;\n    active$: Observable<any>;\n    alive$: Observable<boolean>;\n    complete$: Observable<any>;\n    error$: Observable<any>;\n};\n\nexport function setPouchEventEmitter(\n    rxRepState: RxCouchDBReplicationState,\n    evEmitter: PouchSyncHandler\n) {\n    if (rxRepState._pouchEventEmitterObject) {\n        throw newRxError('RC1');\n    }\n    rxRepState._pouchEventEmitterObject = evEmitter;\n\n    // change\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'change')\n            .subscribe(ev => {\n                rxRepState._subjects.change.next(ev);\n            })\n    );\n\n    // denied\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'denied')\n            .subscribe(ev => rxRepState._subjects.denied.next(ev))\n    );\n\n    // docs\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'change')\n            .subscribe(ev => {\n                if (\n                    rxRepState._subjects.docs.observers.length === 0 ||\n                    (ev as any).direction !== 'pull'\n                ) return;\n\n                (ev as any).change.docs\n                    .filter((doc: any) => doc.language !== 'query') // remove internal docs\n                    .map((doc: any) => {\n                        const hookParams = {\n                            database: rxRepState.collection.database,\n                            primaryPath: rxRepState.collection.schema.primaryPath,\n                            schema: rxRepState.collection.schema.jsonSchema,\n                            doc\n                        };\n\n                        runPluginHooks('postReadFromInstance', hookParams);\n                        return hookParams.doc;\n                    }) // do primary-swap and keycompression\n                    .forEach((doc: any) => rxRepState._subjects.docs.next(doc));\n            }));\n\n    // error\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'error')\n            .subscribe(ev => rxRepState._subjects.error.next(ev))\n    );\n\n    // active\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'active')\n            .subscribe(() => rxRepState._subjects.active.next(true))\n    );\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'paused')\n            .subscribe(() => rxRepState._subjects.active.next(false))\n    );\n\n    // complete\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'complete')\n            .subscribe(async (info: any) => {\n                /**\n                 * when complete fires, it might be that not all changeEvents\n                 * have passed throught, because of the delay of .wachtForChanges()\n                 * Therefore we have to first ensure that all previous changeEvents have been handled\n                 */\n                await promiseWait(100);\n                rxRepState._subjects.complete.next(info);\n            })\n    );\n    // auto-cancel one-time replications on complelete to not cause memory leak\n    if (\n        !rxRepState.syncOptions.options ||\n        !rxRepState.syncOptions.options.live\n    ) {\n        rxRepState._subs.push(\n            rxRepState.complete$.pipe(\n                filter(x => !!x),\n                first(),\n                mergeMap(() => {\n                    return rxRepState.collection.database\n                        .requestIdlePromise()\n                        .then(() => rxRepState.cancel());\n                })\n            ).subscribe()\n        );\n    }\n\n    function getIsAlive(emitter: any): Promise<boolean> {\n        // \"state\" will live in emitter.state if single direction replication\n        // or in emitter.push.state & emitter.pull.state when syncing for both\n        let state = emitter.state;\n        if (!state) {\n            state = [emitter.pull.state, emitter.push.state]\n                .reduce((acc, val) => {\n                    if (acc === 'active' || val === 'active') return 'active';\n                    return acc === 'stopped' ? acc : val;\n                }, '');\n        }\n\n        // If it's active, we can't determine whether the connection is active\n        // or not yet\n        if (state === 'active') {\n            return promiseWait(15).then(() => getIsAlive(emitter));\n        }\n\n        const isAlive = state !== 'stopped';\n        return Promise.resolve(isAlive);\n    }\n\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'paused')\n            .pipe(\n                skipUntil(fromEvent(evEmitter as any, 'active'))\n            ).subscribe(() => {\n                getIsAlive(rxRepState._pouchEventEmitterObject)\n                    .then(isAlive => rxRepState._subjects.alive.next(isAlive));\n            })\n    );\n}\n\nexport function createRxCouchDBReplicationState(\n    collection: RxCollection,\n    syncOptions: SyncOptions\n): RxCouchDBReplicationState {\n    return new RxCouchDBReplicationStateBase(\n        collection,\n        syncOptions\n    ) as RxCouchDBReplicationState;\n}\n\n/**\n * get the correct function-name for pouchdb-replication\n */\nexport function pouchReplicationFunction(\n    pouch: PouchDBInstance,\n    {\n        pull = true,\n        push = true\n    }\n): any {\n    if (pull && push) {\n        return pouch.sync.bind(pouch);\n    }\n    if (!pull && push) {\n        return (pouch.replicate as any).to.bind(pouch);\n    }\n    if (pull && !push) {\n        return (pouch.replicate as any).from.bind(pouch);\n    }\n    if (!pull && !push) {\n        throw newRxError('UT3', {\n            pull,\n            push\n        });\n    }\n}\n\nexport function syncCouchDB(\n    this: RxCollection,\n    {\n        remote,\n        waitForLeadership = true,\n        direction = {\n            pull: true,\n            push: true\n        },\n        options = {\n            live: true,\n            retry: true\n        },\n        query\n    }: SyncOptions) {\n    const useOptions: PouchReplicationOptions & { selector: any } = flatClone(options) as any;\n\n    // prevent #641 by not allowing internal pouchdbs as remote\n    if (\n        isInstanceOfPouchDB(remote) &&\n        INTERNAL_POUCHDBS.has(remote)\n    ) {\n        throw newRxError('RC3', {\n            database: this.database.name,\n            collection: this.name\n        });\n    }\n\n    // if remote is RxCollection, get internal pouchdb\n    if (isRxCollection(remote)) {\n        remote = (remote as RxCollection).storageInstance.internals.pouch;\n    }\n\n    if (query && this !== query.collection) {\n        throw newRxError('RC2', {\n            query\n        });\n    }\n\n    const syncFun = pouchReplicationFunction(this.storageInstance.internals.pouch, direction);\n    if (query) {\n        useOptions.selector = query.getPreparedQuery().selector;\n    }\n\n    const repState: any = createRxCouchDBReplicationState(\n        this,\n        {\n            remote,\n            waitForLeadership,\n            direction,\n            options,\n            query\n        }\n    );\n\n    // run internal so .sync() does not have to be async\n    const waitTillRun = (\n        waitForLeadership &&\n        this.database.multiInstance // do not await leadership if not multiInstance\n    ) ? this.database.waitForLeadership() : promiseWait(0);\n    (waitTillRun as any).then(() => {\n        if (this.destroyed || repState.canceled) {\n            return;\n        }\n        const pouchSync = syncFun(remote, useOptions);\n        setPouchEventEmitter(repState, pouchSync);\n\n        this.onDestroy.then(() => repState.cancel());\n    });\n\n    return repState;\n}\n\n\n\nexport const RxDBReplicationCouchDBPlugin: RxPlugin = {\n    name: 'replication-couchdb',\n    rxdb: true,\n    init() {\n        // add pouchdb-replication-plugin\n        addPouchPlugin(PouchReplicationPlugin);\n    },\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncCouchDB = syncCouchDB;\n        }\n    },\n    hooks: {\n        createRxCollection: {\n            after: args => {\n                const collection = args.collection;\n                const pouch: PouchDBInstance | undefined = collection.storageInstance.internals.pouch;\n                if (pouch) {\n                    INTERNAL_POUCHDBS.add(collection.storageInstance.internals.pouch);\n                }\n            }\n        }\n    }\n};\n"],"file":"replication-couchdb.js"}