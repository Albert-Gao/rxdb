{"version":3,"sources":["../../../src/plugins/json-dump.ts"],"names":["createRxQuery","queryCollection","_getDefaultQuery","newRxError","dumpRxDatabase","collections","json","name","instanceToken","token","useCollections","Object","keys","filter","colName","includes","charAt","map","Promise","all","col","exportJSON","then","cols","importDumpRxDatabase","dump","missingCollections","length","colDump","importJSON","dumpRxCollection","schemaHash","schema","hash","docs","query","docData","_rev","_attachments","importDumpRxCollection","exportedJSON","own","doc","validate","storageInstance","bulkWrite","document","RxDBJsonDumpPlugin","rxdb","prototypes","RxDatabase","proto","RxCollection","overwritable"],"mappings":"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","sourcesContent":["/**\n * this plugin adds the json export/import capabilities to RxDB\n */\nimport {\n    createRxQuery,\n    queryCollection,\n    _getDefaultQuery\n} from '../rx-query';\nimport {\n    newRxError\n} from '../rx-error';\nimport type {\n    RxDatabase,\n    RxCollection,\n    RxPlugin,\n    RxDocumentData\n} from '../types';\n\nfunction dumpRxDatabase(\n    this: RxDatabase,\n    collections?: string[]\n): Promise<any> {\n    const json: any = {\n        name: this.name,\n        instanceToken: this.token,\n        collections: []\n    };\n\n    const useCollections = Object.keys(this.collections)\n        .filter(colName => !collections || collections.includes(colName))\n        .filter(colName => colName.charAt(0) !== '_')\n        .map(colName => this.collections[colName]);\n\n    return Promise.all(\n        useCollections\n            .map(col => col.exportJSON())\n    ).then(cols => {\n        json.collections = cols;\n        return json;\n    });\n}\n\nconst importDumpRxDatabase = function (\n    this: RxDatabase,\n    dump: any\n) {\n    /**\n     * collections must be created before the import\n     * because we do not know about the other collection-settings here\n     */\n    const missingCollections = dump.collections\n        .filter((col: any) => !this.collections[col.name])\n        .map((col: any) => col.name);\n    if (missingCollections.length > 0) {\n        throw newRxError('JD1', {\n            missingCollections\n        });\n    }\n\n    return Promise.all(\n        dump.collections\n            .map((colDump: any) => this.collections[colDump.name].importJSON(colDump))\n    );\n};\n\nconst dumpRxCollection = function (\n    this: RxCollection\n) {\n    const json: any = {\n        name: this.name,\n        schemaHash: this.schema.hash,\n        docs: []\n    };\n\n    const query = createRxQuery(\n        'find',\n        _getDefaultQuery(),\n        this\n    );\n    return queryCollection(query)\n        .then((docs: any) => {\n            json.docs = docs.map((docData: any) => {\n                delete docData._rev;\n                delete docData._attachments;\n                return docData;\n            });\n            return json;\n        });\n};\n\nfunction importDumpRxCollection<RxDocType>(\n    this: RxCollection<RxDocType>,\n    exportedJSON: any\n): Promise<any> {\n    // check schemaHash\n    if (exportedJSON.schemaHash !== this.schema.hash) {\n        throw newRxError('JD2', {\n            schemaHash: exportedJSON.schemaHash,\n            own: this.schema.hash\n        });\n    }\n\n    const docs: RxDocumentData<RxDocType>[] = exportedJSON.docs\n        // validate schema\n        .map((doc: any) => this.schema.validate(doc));\n\n    return this.storageInstance.bulkWrite(docs.map(document => ({ document })));\n}\n\nexport const RxDBJsonDumpPlugin: RxPlugin = {\n    name: 'json-dump',\n    rxdb: true,\n    prototypes: {\n        RxDatabase: (proto: any) => {\n            proto.exportJSON = dumpRxDatabase;\n            proto.importJSON = importDumpRxDatabase;\n        },\n        RxCollection: (proto: any) => {\n            proto.exportJSON = dumpRxCollection;\n            proto.importJSON = importDumpRxCollection;\n        }\n    },\n    overwritable: {}\n};\n"],"file":"json-dump.js"}