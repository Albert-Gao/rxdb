{"version":3,"sources":["../../src/change-event-buffer.ts"],"names":["filter","ChangeEventBuffer","collection","subs","limit","counter","eventCounterMap","WeakMap","buffer","push","$","pipe","cE","isLocal","subscribe","_handleChangeEvent","changeEvent","set","length","shift","getArrayIndexByPointer","pointer","oldestEvent","oldestCounter","get","rest","getFrom","ret","currentIndex","nextEvent","runFrom","fn","Error","forEach","reduceByLastOfDoc","changeEvents","slice","docEventMap","documentId","Object","values","destroy","sub","unsubscribe","createChangeEventBuffer"],"mappings":"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","sourcesContent":["/**\n * a buffer-cache which holds the last X changeEvents of the collection\n */\nimport {\n    Subscription\n} from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport type {\n    RxChangeEvent,\n    RxCollection\n} from './types';\n\nexport class ChangeEventBuffer {\n    private subs: Subscription[] = [];\n    public limit: number = 100;\n    public counter: number = 0;\n    private eventCounterMap: WeakMap<\n        RxChangeEvent<any>, number\n    > = new WeakMap();\n\n    /**\n     * array with changeEvents\n     * starts with oldest known event, ends with newest\n     */\n    public buffer: RxChangeEvent<any>[] = [];\n\n    constructor(\n        public collection: RxCollection\n    ) {\n        this.subs.push(\n            this.collection.$.pipe(\n                filter(cE => !cE.isLocal)\n            ).subscribe((cE: any) => this._handleChangeEvent(cE))\n        );\n    }\n\n    _handleChangeEvent(changeEvent: RxChangeEvent<any>) {\n        this.counter++;\n        this.buffer.push(changeEvent);\n        this.eventCounterMap.set(changeEvent, this.counter);\n        while (this.buffer.length > this.limit) {\n            this.buffer.shift();\n        }\n    }\n\n    /**\n     * gets the array-index for the given pointer\n     * @return arrayIndex which can be used to itterate from there. If null, pointer is out of lower bound\n     */\n    getArrayIndexByPointer(pointer: number): number | null {\n        const oldestEvent = this.buffer[0];\n        const oldestCounter = this.eventCounterMap.get(\n            oldestEvent\n        ) as number;\n\n        if (pointer < oldestCounter)\n            return null; // out of bounds\n\n        const rest = pointer - oldestCounter;\n        return rest;\n    }\n\n    /**\n     * get all changeEvents which came in later than the pointer-event\n     * @return array with change-events. Iif null, pointer out of bounds\n     */\n    getFrom(pointer: number): RxChangeEvent<any>[] | null {\n        const ret = [];\n        let currentIndex = this.getArrayIndexByPointer(pointer);\n        if (currentIndex === null) // out of bounds\n            return null;\n\n        while (true) {\n            const nextEvent = this.buffer[currentIndex];\n            currentIndex++;\n            if (!nextEvent) {\n                return ret;\n            } else {\n                ret.push(nextEvent);\n            }\n        }\n    }\n\n    runFrom(pointer: number, fn: Function) {\n        const ret = this.getFrom(pointer);\n        if (ret === null) {\n            throw new Error('out of bounds');\n        } else {\n            ret.forEach(cE => fn(cE));\n        }\n    }\n\n    /**\n     * no matter how many operations are done on one document,\n     * only the last operation has to be checked to calculate the new state\n     * this function reduces the events to the last ChangeEvent of each doc\n     */\n    reduceByLastOfDoc(changeEvents: RxChangeEvent<any>[]): RxChangeEvent<any>[] {\n        return changeEvents.slice(0);\n        // TODO the old implementation was wrong\n        // because it did not correctly reassigned the previousData of the changeevents\n        // this should be added to the event-reduce library and not be done in RxDB\n        const docEventMap: any = {};\n        changeEvents.forEach(changeEvent => {\n            docEventMap[changeEvent.documentId] = changeEvent;\n        });\n        return Object.values(docEventMap);\n    }\n\n    destroy() {\n        this.subs.forEach(sub => sub.unsubscribe());\n    }\n}\n\nexport function createChangeEventBuffer(\n    collection: RxCollection<any, any>\n) {\n    return new ChangeEventBuffer(collection);\n}\n"],"file":"change-event-buffer.js"}